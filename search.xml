<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>build-an-openai-powered-vscode-extension-in-no-time</title>
    <url>/2023/03/12/build-an-openai-powered-vscode-extension-in-no-time/</url>
    <content><![CDATA[<p>These days, everyone is talking about ChatGTP, which is a powerful AI tool that can have natural conversations with humans. It is powered by OpenAI. I have started to use ChatGPT in different scenarios. Besides using it to write some scripts, I also use it to revise or translate some text. In some cases, it provides a better result than Google Translate or DeepL. However, I still need to copy and paste the text to the website. I often use VS Code to write or translate technical documents, so I want to integrate AI power into my VS Code. Similar to <a href="https://medium.com/@yanxiaodi/how-to-develop-a-vs-code-extension-step-by-step-translator-helper-55226fcd018e">Translator Helper</a>, I spent around three hours building an OpenAI-powered VS Code extension. The extension is called <a href="https://marketplace.visualstudio.com/items?itemName=XiaodiYan.revision">ReVision</a>. It is an open-source project, and you can find the source code on <a href="https://github.com/yanxiaodi/vs-code-revision">GitHub</a>.</p>
<span id="more"></span>

<p>In this article, I will show you how to build an OpenAI-powered VS Code extension in no time. With the help of AI, the productivity of developers will definitely be improved.</p>
<h2 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h2><p>One thing in my daily work is to write various technical documents or emails. Previously, I used some tools such as Grammarly to check the grammar. In some cases, I may need to rewrite the whole paragraph in another way. For example:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Revise the text in a professional style:</span><br><span class="line">Code-review is important in our daily development. Some developers may spend lots of time on learning new features of the languages, DDD, distributed system or some fancy stuff but the first thing we should keep in mind is we need to write the robust, maintainable code. Here are some tips from my recent code-review and I hope it would be helpful for you.</span><br></pre></td></tr></table></figure>

<p>ChatGPT can help me to revise the text in a professional style:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Code review is an integral aspect of our daily development process. While it is essential for developers to stay abreast of the latest features and trends in languages, DDD, distributed systems, and other advanced concepts, it is imperative to prioritize writing robust and maintainable code. In light of this, I would like to share some tips from my recent code review experience, which I believe will prove beneficial to you.</span><br></pre></td></tr></table></figure>

<img src="/2023/03/12/build-an-openai-powered-vscode-extension-in-no-time/image-20230312142051850.png" class="" title="Revise the text in ChatGPT" alt="Revise the text in ChatGPT">

<p>You may find that the revised text has more professional words and the sentence structure is better. It is a good tool to help me write a better document (and improve my English writing skills).</p>
<blockquote>
<p>Note<br>There are some arguments about whether we should use AI to produce content, and whether the content produced by AI is meaningful. For sure, students should not use AI to cheat in their exams. I won’t discuss this topic in this article because it is out of the scope.</p>
</blockquote>
<p>We can also use ChatGPT to translate the text. For example, I can translate the following text from English to Chinese:</p>
<img src="/2023/03/12/build-an-openai-powered-vscode-extension-in-no-time/image-20230312142200856.png" class="" title="Translate text in ChatGPT" alt="Translate text in ChatGPT">

<p>ChatGPT is powered by <a href="https://platform.openai.com/">OpenAI</a>, which provides a powerful API to use its AI model. My idea is to follow the approach of Translator Helper to build an OpenAI-powered VS Code extension so that I can easily revise or translate the text in VS Code without leaving the editor. Because I have already built the Translator Helper, I can reuse some code to build the new extension.</p>
<h2 id="Creating-an-OpenAI-account-and-getting-the-API-key"><a href="#Creating-an-OpenAI-account-and-getting-the-API-key" class="headerlink" title="Creating an OpenAI account and getting the API key"></a>Creating an OpenAI account and getting the API key</h2><p>The first step is to create an OpenAI account and get the API key. You can create an account on <a href="https://platform.openai.com/">OpenAI</a>. After creating the account, you can get the API key on the <a href="https://platform.openai.com/account/api-keys">API Keys</a> page.</p>
<p>Note that the API key only shows once. You need to save it somewhere safe. If you lose the API key, you need to create a new one.</p>
<p>OpenAI provides a set of examples to show you how to use the API: <a href="https://platform.openai.com/examples">https://platform.openai.com/examples</a>. Here is an example to translate the text from English to three different languages:</p>
<img src="/2023/03/12/build-an-openai-powered-vscode-extension-in-no-time/image-20230312143556430.png" class="" title="OpenAI example" alt="OpenAI example">

<p>So the basic usage of the API is to send a request to the API endpoint with a <strong>Prompt</strong>:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Translate this into 1. French, 2. Spanish and 3. Japanese:</span><br><span class="line"></span><br><span class="line">&lt;The text you want to translate&gt;</span><br></pre></td></tr></table></figure>

<p>Similarly, we can use the API to revise the text. OpenAI provides a playground to test the API: <a href="https://platform.openai.com/playground">https://platform.openai.com/playground</a>. Let’s try to revise the text:</p>
<img src="/2023/03/12/build-an-openai-powered-vscode-extension-in-no-time/image-20230312144101050.png" class="" title="OpenAI playground" alt="OpenAI playground">

<p>In the settings panel, you can choose settings such as Model, Temperature, and Top P, etc. The default settings are good enough for most cases.</p>
<img src="/2023/03/12/build-an-openai-powered-vscode-extension-in-no-time/image-20230312144250919.png" class="" title="OpenAI API settings" alt="OpenAI API settings">

<p>To learn more about the settings, you can read the <a href="https://platform.openai.com/docs/introduction">OpenAI API documentation</a>.</p>
<h2 id="Creating-the-extension"><a href="#Creating-the-extension" class="headerlink" title="Creating the extension"></a>Creating the extension</h2><p>Now we have the API key, we can start to build the extension. First, I asked ChatGPT to advise me on what name I can use.</p>
<img src="/2023/03/12/build-an-openai-powered-vscode-extension-in-no-time/image-20230312144645619.png" class="" title="Ask ChatGPT to give me a name for the extension" alt="Ask ChatGPT to give me a name for the extension">

<p>Not bad, isn’t it? I would use the name <strong>ReVision</strong> for the extension.</p>
<p>So the next step is to create a new VS Code extension project. You can find more information about how to create a VS Code extension project in the VS Code document: <a href="https://code.visualstudio.com/api/get-started/your-first-extension">Your First Extension</a>. I will skip this step and assume that you have already created a new VS Code extension project.</p>
<h2 id="Installing-the-OpenAI-SDK"><a href="#Installing-the-OpenAI-SDK" class="headerlink" title="Installing the OpenAI SDK"></a>Installing the OpenAI SDK</h2><p>OpenAI provides a set of SDKs to help developers to use the API. You can find the SDKs on this page: <a href="https://platform.openai.com/docs/libraries">https://platform.openai.com/docs/libraries</a>. I will use the OpenAI Node.js SDK. Run the following command to install the SDK:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install openai</span><br></pre></td></tr></table></figure>

<h2 id="Writing-the-code"><a href="#Writing-the-code" class="headerlink" title="Writing the code"></a>Writing the code</h2><p>The idea is similar to Translator Helper. We click a paragraph and then press a shortcut key to trigger the extension. The extension will automatically select the whole paragraph and then send a request to the OpenAI API endpoint. The response will be inserted into the editor after the current paragraph.</p>
<p>Using different shortcuts, we can send different requests to revise or translate the text. For example, we can use <code>shift+alt+r</code> to revise the text and use <code>ctrl+shift+t</code> to translate the text.</p>
<h3 id="Extension-configurations"><a href="#Extension-configurations" class="headerlink" title="Extension configurations"></a>Extension configurations</h3><p>We will need two commands: <code>revision.reviseInsert</code> and <code>revision.translateInsert</code>. Here are the settings for commands and keybindings in the <code>package.json</code> file:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;revision.reviseInsert&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Revise &amp; Insert&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;revision.translateInsert&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Translate &amp; Insert&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;keybindings&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;revision.reviseInsert&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shift+alt+r&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mac&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shift+alt+r&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;when&quot;</span><span class="punctuation">:</span> <span class="string">&quot;editorTextFocus&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;revision.translateInsert&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ctrl+shift+t&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mac&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cmd+shift+t&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;when&quot;</span><span class="punctuation">:</span> <span class="string">&quot;editorTextFocus&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>We also need these configurations in the <code>package.json</code> file:</p>
<ul>
<li><code>revision.openAIApiKey</code>: the API key of OpenAI</li>
<li><code>revision.writingStyle</code>: the writing style, which can be <code>professional</code> or <code>casual</code></li>
<li><code>revision.sourceLanguage</code>: the source language</li>
<li><code>revision.targetLanguage</code>: the target language to be translated</li>
<li><code>revision.maxTokens</code>: the maximum number of tokens to be generated. OpenAI API has a limit of 4097 tokens shared between prompt and completion.</li>
</ul>
<p>We can provide some default styles in the <code>package.json</code> file:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;revision.writingStyle&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;professional&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;enum&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;professional&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;formal&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;casual&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;humorous&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;sarcastic&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;informative&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;empathetic&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;authoritative&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;poetic&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;other&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;enumDescriptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;A professional tone that is appropriate for business documents, such as proposals, reports, and presentations.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;A formal tone that is appropriate for documents that require a high level of formality, such as legal documents, academic papers, and business correspondence.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;A casual tone that is appropriate for documents that are meant to be read by friends, family, or colleagues.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;A humorous tone that is fun and playful.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;A sarcastic tone that is characterized by its use of irony and sarcasm, often used to express displeasure or frustration.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;An informative tone that focuses on presenting factual information in a clear and concise manner.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;An empathetic tone that is used to express understanding and compassion towards the reader, often used in customer service or support contexts.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;An authoritative tone that is used to convey expertise and authority on a particular subject, often used in instructional or educational contexts.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;A poetic tone that is appropriate for poems, song lyrics, and other works of art.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;A custom tone that is not one of the above.&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>By the way, these settings and descriptions were generated by ChatGPT as well.</p>
<p>So users can choose the writing style in the settings panel:</p>
<img src="/2023/03/12/build-an-openai-powered-vscode-extension-in-no-time/image-20230312150404908.png" class="" title="ReVision configurations" alt="ReVision configurations">

<h3 id="Extension-code"><a href="#Extension-code" class="headerlink" title="Extension code"></a>Extension code</h3><p>We can reuse lots of code from Translator Helper, including the code to get the current paragraph and the code to insert the text into the editor. The main difference is the code to send the request to the OpenAI API endpoint.</p>
<p>Here is the code to revise the text:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">revise</span>(</span><br><span class="line">  <span class="attr">text</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">language</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">writingStyle</span>: <span class="built_in">string</span></span><br><span class="line">): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span> | <span class="literal">undefined</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> maxTokens = <span class="title function_">getMaxTokensConfiguration</span>();</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">openaiService</span>.<span class="title function_">createCompletion</span>(&#123;</span><br><span class="line">      <span class="attr">model</span>: <span class="string">&quot;text-davinci-003&quot;</span>,</span><br><span class="line">      <span class="attr">prompt</span>: <span class="string">`Revise this into better sentences and paragraphs in <span class="subst">$&#123;language&#125;</span> using a <span class="subst">$&#123;writingStyle&#125;</span> tone:\n\n<span class="subst">$&#123;text&#125;</span>\n\n`</span>,</span><br><span class="line">      <span class="attr">temperature</span>: <span class="number">0.3</span>,</span><br><span class="line">      <span class="attr">max_tokens</span>: maxTokens,</span><br><span class="line">      <span class="attr">top_p</span>: <span class="number">1.0</span>,</span><br><span class="line">      <span class="attr">frequency_penalty</span>: <span class="number">0.0</span>,</span><br><span class="line">      <span class="attr">presence_penalty</span>: <span class="number">0.0</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">let</span> result = response.<span class="property">data</span>.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">text</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (<span class="attr">error</span>: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The code to translate the text is similar:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">translate</span>(</span><br><span class="line">    <span class="attr">text</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">sourceLanguage</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">targetLanguage</span>: <span class="built_in">string</span></span><br><span class="line">  ): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span> | <span class="literal">undefined</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">openaiService</span>.<span class="title function_">createCompletion</span>(&#123;</span><br><span class="line">        <span class="attr">model</span>: <span class="string">&quot;text-davinci-003&quot;</span>,</span><br><span class="line">        <span class="attr">prompt</span>: <span class="string">`Translate this into <span class="subst">$&#123;targetLanguage&#125;</span> from <span class="subst">$&#123;sourceLanguage&#125;</span>:\n\n<span class="subst">$&#123;text&#125;</span>\n\n`</span>,</span><br><span class="line">        <span class="attr">temperature</span>: <span class="number">0.3</span>,</span><br><span class="line">        <span class="attr">max_tokens</span>: <span class="number">2048</span>,</span><br><span class="line">        <span class="attr">top_p</span>: <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">frequency_penalty</span>: <span class="number">0.0</span>,</span><br><span class="line">        <span class="attr">presence_penalty</span>: <span class="number">0.0</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">let</span> result = response.<span class="property">data</span>.<span class="property">choices</span>[<span class="number">0</span>].<span class="property">text</span>;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="attr">error</span>: <span class="built_in">any</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>The core code here is just to get the selected text and build a prompt. OpenAI API will generate the text based on the prompt. You can fine-tune the parameters to get better results. Prompts are very important in AI applications. You can read more about it here: <a href="https://help.openai.com/en/articles/6654000-best-practices-for-prompt-engineering-with-openai-api">Best practices for prompt engineering with OpenAI API</a>. I think prompts may be a future programming language for developers - who knows?</p>
<p>The code to insert the text into the editor is the same as Translator Helper.</p>
<p>Now when we edit the text, we can press <code>shift+alt+r</code> to revise the text:</p>
<img src="/2023/03/12/build-an-openai-powered-vscode-extension-in-no-time/revision.gif" class="" title="Revise the text using ReVision" alt="Revise the text using ReVision">

<p>And press <code>ctrl+shift+t</code> to translate the text:</p>
<img src="/2023/03/12/build-an-openai-powered-vscode-extension-in-no-time/translation.gif" class="" title="Translate the text using ReVision" alt="Translate the text using ReVision">

<p>It’s nearly done!</p>
<h3 id="Publishing-the-extension"><a href="#Publishing-the-extension" class="headerlink" title="Publishing the extension"></a>Publishing the extension</h3><p>I have described how to publish the extension in the <a href="https://medium.com/@yanxiaodi/how-to-develop-a-vs-code-extension-step-by-step-translator-helper-55226fcd018e">previous post</a>, including how to set up the Azure DevOps pipeline. So I won’t repeat it here.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this article, I have shown you how easy it is to develop a VS Code extension using the OpenAI API. OpenAI API provides various possibilities for developers. Check the examples of OpenAI and see if you can find any interesting ideas. The code of ReVision is available on GitHub: <a href="https://github.com/yanxiaodi/vs-code-revision">vs-code-revision</a>. Try this extension in VS Code and feel free to leave comments and suggestions. Thanks for reading!</p>
]]></content>
      <categories>
        <category>My Projects</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>vscode</tag>
        <tag>vscode extension</tag>
        <tag>translate</tag>
        <tag>open source</tag>
      </tags>
  </entry>
  <entry>
    <title>Be a life-long learner to embrace AI</title>
    <url>/2021/06/08/be-a-life-long-learner-to-embrace-ai/</url>
    <content><![CDATA[<p>Recently, I participated the MVP Global Cloud Skills Challenge, which allows all Microsoft MVPs to be competing on a global stage. As you know, <a href="https://docs.microsoft.com/en-us/learn/?WT.mc_id=DT-MVP-5001643">Microsoft Learn</a> is a free learning resource site for everyone who wants to learn Microsoft technologies. I have advocated it many times via my social network. Today, I would like to share what I learned from #TheMVPChallenge.</p>
<span id="more"></span>

<p>First, I would say the content of Microsoft Learn is super high-quality and it is so easy to follow the instructions to create your immersive learning experience. Before the MVP Challenge, I have been immersed in Microsoft Learn for hundreds of hours. With the help of Microsoft Learn, I have successfully achieved the following certificates:</p>
<img src="/2021/06/08/be-a-life-long-learner-to-embrace-ai/0_wLRTfH7z9FQRlzWl.png" class="" title="Microsoft Certified Azure Fundamentals" alt="Microsoft Certified Azure Fundamentals">

<img src="/2021/06/08/be-a-life-long-learner-to-embrace-ai/0_3CmvqLN3rjzyIbiO.png" class="" title="Microsoft Certified Azure Developer" alt="Microsoft Certified Azure Developer">

<img src="/2021/06/08/be-a-life-long-learner-to-embrace-ai/0_T1p5ME0aJlpLtNwr.png" class="" title="Microsoft Certified Azure Solutions Architect" alt="Microsoft Certified Azure Solutions Architect">

<p>I completed <a href="https://docs.microsoft.com/en-us/learn/challenges?id=cb3d0159-4881-4b81-a67f-6263a700163b&WT.mc_id=DT-MVP-5001643">The MVP Challenge - Azure Data &amp; AI Challenge</a>, which contains a bunch of content that you need to know to start your first AI application. For example, you can learn how to create a Cognitive Service on Azure, or create a classification model with Azure Machine Learning. You can find all the resources you need to complete a functional application, and you can even use the Azure hands-on lab for free! All you need is just a Microsoft account and your patience. I would say the content of Microsoft Learn is super high-quality and it is so easy to follow the instructions to create your immersive learning experience.</p>
<p>By leveraging Azure, you don’t have to dive into the complicated AI algorithms. Microsoft Learn will guide you how to create the resource and how to write your first line of code. Or even no code at all! Don’t you believe it? Just have a try. I have created a collection about Cognitive Service so that you can walk through how to use it to detect and analyze the faces in the photos, or use your phone to detect the dog breeds. Sounds interesting? Find it here and let’s learn: <a href="https://docs.microsoft.com/en-us/users/yanxiaodi/collections/ng15u7qxk66ej5?WT.mc_id=DT-MVP-5001643">Xiaodi’s Collection for Azure Cognitive Services</a>.</p>
<p>I’m also an advocator for life-long learners. The technologies grow rapidly every day, and we must upskill ourselves to keep the sensitiveness for the world. What I learned from the MVP Challenge is AI will significantly impact our life in the future and we need to be ready to embrace the new AI technologies. In my spare time, I’m a volunteer of <a href="https://hourofcode.com/"><strong>Hour of Code</strong></a> - a global movement for kids to inspire them to learning computer science. I believe coding would be the essential skill in the future. Recently I organized a “Hour of Code” event. But how could I do better to inspire the kids? One idea jumped in my mind one day after I learned some AI courses on Microsoft Learn. With Azure Cognitive Services, I just spent one weekend to develop a Face recognition app! The Azure Cognitive Services are so powerful and easy to use. I just need to create a Cognitive Service from Azure and upload the camera stream then it can return some properties of the person in the camera, such as the gender and age, etc. It can even recognize the emotions. How wonderful it is! I cannot imagine how complicated it would be if we develop such an AI app from scratch without Azure. But with Azure Cognitive Services, you can do it too. It looks like this:</p>
<img src="/2021/06/08/be-a-life-long-learner-to-embrace-ai/image-20210607130418066.png" class="" title="My Face Recognition app powered by Azure Cognitive Services" alt="My Face Recognition app powered by Azure Cognitive Services">

<p>I showed this app in the <a href="https://hourofcode.com/"><strong>Hour of Code</strong></a> event and all kids were interested in it. They excitedly asked, “Why does it know how old I am?” “Hey I am 10, not 9!” “It knows you wear glasses! How can it know that?” What a joyful day! I believe this fun app can inspire their curiosity to the computer science. And maybe one day they would create some cool stuff as well! Maybe creating a robot to  improve the health care? Or overcoming the physical disadvantages, or even saving the earth? Who knows?! But I think this app would kindle the flame of the computer science in their life journey. In the below photo, some kids were using the photo classifier to classify the fishes. The projector screen showed how my AI app recognized the faces in the camera.</p>
<img src="/2021/06/08/be-a-life-long-learner-to-embrace-ai/IMG_20201226_142717.jpg" class="" title="Kids playing the Face Recognition app in Hour of Code" alt="Kids playing the Face Recognition app in Hour of Code">

<p>If you also want to create an app like this, you can learn the course in my collection - <a href="https://docs.microsoft.com/en-us/learn/modules/identify-faces-with-computer-vision/?WT.mc_id=DT-MVP-5001643">Identify faces and expressions by using the Computer Vision API in Azure Cognitive Services</a>. I highly recommend you walk through each module to have a better understanding for the Cognitive Services of Azure. This collection covers some key aspects in Azure Cognitive Services:</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/learn/modules/get-started-ai-fundamentals/?WT.mc_id=DT-MVP-5001643&ns-enrollment-type=Collection&ns-enrollment-id=ng15u7qxk66ej5">Get started with AI on Azure</a></li>
<li><a href="https://docs.microsoft.com/en-us/learn/modules/analyze-images-computer-vision/?WT.mc_id=DT-MVP-5001643&ns-enrollment-type=Collection&ns-enrollment-id=ng15u7qxk66ej5">Analyze images with the Computer Vision service</a></li>
<li><a href="https://docs.microsoft.com/en-us/learn/modules/detect-objects-images-custom-vision/?WT.mc_id=DT-MVP-5001643&ns-enrollment-type=Collection&ns-enrollment-id=ng15u7qxk66ej5">Detect objects in images with the Custom Vision service</a></li>
<li><a href="https://docs.microsoft.com/en-us/learn/modules/classify-images-with-custom-vision-service/?WT.mc_id=DT-MVP-5001643&ns-enrollment-type=Collection&ns-enrollment-id=ng15u7qxk66ej5">Classify images with the Microsoft Custom Vision Service</a></li>
<li><a href="https://docs.microsoft.com/en-us/learn/modules/identify-faces-with-computer-vision/?WT.mc_id=DT-MVP-5001643&ns-enrollment-type=Collection&ns-enrollment-id=ng15u7qxk66ej5">Identify faces and expressions by using the Computer Vision API in Azure Cognitive Services</a></li>
<li><a href="https://docs.microsoft.com/en-us/learn/modules/cv-classify-bird-species/?WT.mc_id=DT-MVP-5001643&ns-enrollment-type=Collection&ns-enrollment-id=ng15u7qxk66ej5">Classify endangered bird species with Custom Vision</a></li>
<li><a href="https://docs.microsoft.com/en-us/learn/modules/create-language-translator-mixed-reality-application-unity-azure-cognitive-services/?WT.mc_id=DT-MVP-5001643&ns-enrollment-type=Collection&ns-enrollment-id=ng15u7qxk66ej5">Create a language translator application with Unity and Azure Cognitive Services.</a></li>
<li><a href="https://docs.microsoft.com/en-us/learn/modules/transcribe-speech-input-text/?WT.mc_id=DT-MVP-5001643&ns-enrollment-type=Collection&ns-enrollment-id=ng15u7qxk66ej5">Create speech-enabled apps with the Speech service</a></li>
<li><a href="https://docs.microsoft.com/en-us/learn/modules/translate-speech-speech-service/?WT.mc_id=DT-MVP-5001643&ns-enrollment-type=Collection&ns-enrollment-id=ng15u7qxk66ej5">Translate speech with the speech service</a></li>
</ul>
<p>We definitely will face more challenges in the future, but that is why we keep growing ourselves by being a life-long learner. AI enable us to build amazing software that can empower humans. Everyone should start to know a little basic of AI because it would impact our daily life. Honestly, if you asked me ten years ago, I never thought AI would be so close in our daily life. It already comes. Be ready to embrace the AI technologies, and be a life-long learner now: <a href="https://docs.microsoft.com/en-us/users/yanxiaodi/collections/ng15u7qxk66ej5?WT.mc_id=DT-MVP-5001643">Xiaodi’s Collection for Azure Cognitive Services</a>!</p>
]]></content>
      <categories>
        <category>Community</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>Visual Studio</tag>
        <tag>.NET</tag>
        <tag>Azure</tag>
      </tags>
  </entry>
  <entry>
    <title>Four ways to generate code in C# - Including Source Generators in .NET 5</title>
    <url>/2021/01/18/four-ways-to-generate-code-in-c-sharp-including-source-generators-in-dotnet-5/</url>
    <content><![CDATA[<p>Microsoft introduced Source Generator in the latest C# version. It is a new feature that allows us to generate source code when the code compiles. In this article, I will walk you through four ways that can generate source code to simplify our daily jobs. Then you can choose the proper way for various scenarios.</p>
<span id="more"></span>

<p>Good developers are lazy developers because they don’t want to repeat the code over and over again. In the .NET world, we have such ways to help us generate code:</p>
<ul>
<li>Code snippets.</li>
<li>Reflection.</li>
<li>T4 Template.</li>
<li>[New] Source Generators in .NET 5.</li>
</ul>
<p>Maybe you have more ideas but this article will mainly cover these four ways. You can check my repo for this article: <a href="https://github.com/yanxiaodi/MyCodeSamples/tree/main/CodeGeneratorDemo">https://github.com/yanxiaodi/MyCodeSamples/tree/main/CodeGeneratorDemo</a>. Let’s get started!</p>
<h2 id="Code-snippets"><a href="#Code-snippets" class="headerlink" title="Code snippets"></a>Code snippets</h2><p>Code snippets are small blocks of reusable code that can be inserted in our code files by using a combination of hotkeys. For example, if you type <code>prop</code> then press <code>Tab</code> in Visual Studio, VS will automatically generate a property in your class, then you can easily replace the property name. VS already provides us with lots of built-in code snippets, such as <code>prop</code>, <code>if</code>, <code>while</code>, <code>for</code>, <code>try</code>, etc. You can find the list of all default code snippets here: <a href="https://docs.microsoft.com/en-us/visualstudio/ide/visual-csharp-code-snippets?view=vs-2019&WT.mc_id=DT-MVP-5001643">C# code snippets</a>.</p>
<p>The benefit of code snippets is you can replace the parameters. For example, when we use MVVM pattern for UWP&#x2F;Xamarin&#x2F;WPF apps, we often need to create properties in the class that implements <a href="https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.inotifypropertychanged?WT.mc_id=DT-MVP-5001643">INotifyPropertyChanged</a> interface. If you use <strong>MvvmCross</strong> framework, it may look like this:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ObservableCollection&lt;Comment&gt; _commentList;</span><br><span class="line"><span class="keyword">public</span> ObservableCollection&lt;Comment&gt; CommentList</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">get</span> =&gt; _commentList;</span><br><span class="line">     <span class="keyword">set</span> =&gt; SetProperty(<span class="keyword">ref</span> _commentList, <span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>We do not want to copy&#x2F;paste then change the variable names so I created a code snippet to simplify the work. Create a new file called <code>myMvvm.snippet</code> and copy &amp; paste the below code:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">CodeSnippets</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CodeSnippet</span> <span class="attr">Format</span>=<span class="string">&quot;1.0.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">SnippetTypes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SnippetType</span>&gt;</span>Expansion<span class="tag">&lt;/<span class="name">SnippetType</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">SnippetTypes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Title</span>&gt;</span>MvvmCross property<span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Author</span>&gt;</span>Xiaodi Yan<span class="tag">&lt;/<span class="name">Author</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Shortcut</span>&gt;</span>mvxprop<span class="tag">&lt;/<span class="name">Shortcut</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Description</span>&gt;</span></span><br><span class="line">        A property in a ViewModel in the Xamarin project with MvvmCross.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">Description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Snippet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Declarations</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Literal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ID</span>&gt;</span>Property<span class="tag">&lt;/<span class="name">ID</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ToolTip</span>&gt;</span>Property name<span class="tag">&lt;/<span class="name">ToolTip</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Default</span>&gt;</span>Property<span class="tag">&lt;/<span class="name">Default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Literal</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Object</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ID</span>&gt;</span>type<span class="tag">&lt;/<span class="name">ID</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ToolTip</span>&gt;</span>Property type<span class="tag">&lt;/<span class="name">ToolTip</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Default</span>&gt;</span>string<span class="tag">&lt;/<span class="name">Default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Object</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Literal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ID</span>&gt;</span>pProperty<span class="tag">&lt;/<span class="name">ID</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ToolTip</span>&gt;</span>Private property name<span class="tag">&lt;/<span class="name">ToolTip</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Default</span>&gt;</span>property<span class="tag">&lt;/<span class="name">Default</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Literal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Declarations</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Code</span> <span class="attr">Language</span>=<span class="string">&quot;csharp&quot;</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[#region $Property$;</span><br><span class="line">		private $type$ _$pProperty$;</span><br><span class="line">        public $type$ $Property$</span><br><span class="line">        &#123;</span><br><span class="line">            get =&gt; _$pProperty$;</span><br><span class="line">            set =&gt; SetProperty(ref _$pProperty$, value);</span><br><span class="line">        &#125;</span><br><span class="line">		#endregion]]&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">Code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Snippet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">CodeSnippet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">CodeSnippets</span>&gt;</span>    </span><br></pre></td></tr></table></figure>

<p>In this code snippets, we use <code>&lt;Shortcut&gt;</code> section to specify the shortcut <code>mvxprop</code>, and use <code>&lt;Declarations&gt;</code> section to declare some parameters. For instance, we declared a parameter named <code>Property</code>, then insert it to the snippet using <code>$Property</code>. You can import this code snippet by <strong>Code Snippets Manager</strong> from VS <strong>Tools</strong> menu (or press <strong>Ctrl+K, Ctrl+B</strong>).</p>
<p>Now you can type <code>mvxprop</code> and press <strong>Tab</strong>, VS can create the property for you - you just manually replace the property names.</p>
<p>For more information: </p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/visualstudio/ide/walkthrough-creating-a-code-snippet?view=vs-2019&WT.mc_id=DT-MVP-5001643">Walkthrough: Create a code snippet</a></li>
<li><a href="https://docs.microsoft.com/en-us/visualstudio/ide/code-snippet-functions?view=vs-2019&WT.mc_id=DT-MVP-5001643">Code snippet functions</a></li>
<li><a href="https://docs.microsoft.com/en-us/visualstudio/ide/how-to-distribute-code-snippets?view=vs-2019&WT.mc_id=DT-MVP-5001643">How to: Distribute code snippets</a></li>
</ul>
<p>Code snippets are suitable to reuse to insert entire classes or methods or properties. You can also distribute the code snippets to other users. It is useful when we create the new files&#x2F;classes&#x2F;methods. But if you want to update the generated code after it is done, you have to delete the existing code then recreate it. Basically, it saves the time from boring copy&#x2F;paste, but it is a once-only use.</p>
<h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><p>Reflection is widely used in many .NET frameworks and libraries, such as <a href="https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-5.0&WT.mc_id=DT-MVP-5001643">ASP.NET Core</a>, <a href="https://docs.microsoft.com/en-us/ef/core/?WT.mc_id=DT-MVP-5001643">Entity Framework Core</a>, etc. It can provide object of type <a href="https://docs.microsoft.com/en-us/dotnet/api/system.type?WT.mc_id=DT-MVP-5001643">Type</a> that describes assemblies, modules and types so you can dynamically create an instance of a type, get the type from an existing object then invoke its methods or access its fields and properties.</p>
<p>When we build the .NET application, it generates assemblies - such as the .dll files. These assemblies contain our modules, which contain some types. Types contain members. Reflection allows us to read the information of these. So we can dynamically load new .dll files and call the methods or events of them without editing the code. <strong>Dynamically</strong> means it works at runtime. In other words, when we compile the application, the .NET app does not know what types we need to use, until it runs. By this way, we can create a client that can dynamically execute methods in other assemblies based on our rules. If we update the classes in other assemblies following the rules, we do not need to update the client code.</p>
<p>Let us check the below sample. You can find it in my sample project. We have an interface called <code>ISpeaker</code> in the <strong>CodeGeneratorDemo.ReflectionDemo.Core</strong> project as shown below:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">CodeGeneratorDemo.ReflectionDemo.Core</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISpeaker</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">SayHello</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Create two implementation classes:</p>
<p><code>ChineseSpeaker</code>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">CodeGeneratorDemo.ReflectionDemo.Core</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChineseSpeaker</span> : <span class="title">ISpeaker</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name =&gt; <span class="keyword">this</span>.GetType().ToString();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">SayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Nihao&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>and <code>EnglishSpeaker</code>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">CodeGeneratorDemo.ReflectionDemo.Core</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnglishSpeaker</span> : <span class="title">ISpeaker</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name =&gt; <span class="keyword">this</span>.GetType().ToString();</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">SayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Now we can use reflection to find all the implementations of <code>ISpeaker</code> interface and call their methods or properties.</p>
<p>Create a new file named <strong>ReflectionHelper</strong> in the <strong>CodeGeneratorDemo.ReflectionDemo</strong> project:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> CodeGeneratorDemo.ReflectionDemo.Core;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CodeGeneratorDemo.ReflectionDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReflectionHelper</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Type&gt; <span class="title">GetAvailableSpeakers</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// You can also use AppDomain.CurrentDomain.GetAssemblies() to load all assemblies in the current domain.</span></span><br><span class="line">            <span class="comment">// Get the specified assembly.</span></span><br><span class="line">            <span class="keyword">var</span> assembly =</span><br><span class="line">                Assembly.LoadFrom(Path.Combine(Directory.GetCurrentDirectory(), <span class="string">&quot;CodeGeneratorDemo.ReflectionDemo.Core.dll&quot;</span>));</span><br><span class="line">            <span class="comment">// Find all the types in the assembly.</span></span><br><span class="line">            <span class="keyword">var</span> types = assembly.GetTypes();</span><br><span class="line">            <span class="comment">// Apply the filter to find the implementations of ISayHello interface.</span></span><br><span class="line">            <span class="keyword">var</span> result = types.Where(x =&gt; x.IsClass &amp;&amp; <span class="keyword">typeof</span>(ISpeaker).IsAssignableFrom(x)).ToList();</span><br><span class="line">            <span class="comment">// Or you can use types.Where(x =&gt; x.IsClass &amp;&amp; x.GetInterfaces().Contains(typeof(ISpeaker))).ToList();</span></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In this class, we load the specified dll file that contains types we need. Then we can apply the LINQ query to find all the implementations of <code>ISpeaker</code> interface using Reflection.</p>
<p>In the <strong>CodeGeneratorDemo.Client</strong> project, we can output the name and call <code>SayHello</code> method of each speaker:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReflectionSample</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Here is the Reflection sample:&quot;</span>);</span><br><span class="line">    <span class="comment">// Find all the speakers in the current domain</span></span><br><span class="line">    <span class="keyword">var</span> availableSpeakers = ReflectionHelper.GetAvailableSpeakers();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> availableSpeaker <span class="keyword">in</span> availableSpeakers)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Create the instance of the type</span></span><br><span class="line">        <span class="keyword">var</span> speaker = Activator.CreateInstance(availableSpeaker);</span><br><span class="line">        <span class="comment">// Get the property info of the given property name</span></span><br><span class="line">        PropertyInfo namePropertyInfo = availableSpeaker.GetProperty(<span class="string">&quot;Name&quot;</span>);</span><br><span class="line">        <span class="comment">// Then you can get the value of the property</span></span><br><span class="line">        <span class="keyword">var</span> name = namePropertyInfo?.GetValue(speaker)?.ToString();</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;I am <span class="subst">&#123;name&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="comment">// Invoke the method of the instance</span></span><br><span class="line">        Console.WriteLine(availableSpeaker.InvokeMember(<span class="string">&quot;SayHello&quot;</span>, BindingFlags.InvokeMethod, <span class="literal">null</span>, speaker, <span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Run the program, you will see the below output:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Here is the Reflection sample:</span><br><span class="line">I am CodeGeneratorDemo.ReflectionDemo.Core.ChineseSpeaker</span><br><span class="line">Nihao</span><br><span class="line">I am CodeGeneratorDemo.ReflectionDemo.Core.EnglishSpeaker</span><br><span class="line">Hello!</span><br></pre></td></tr></table></figure>

<p>If we need to add other speakers in other languages, just add the implementation classes in the same project. .NET reflection can automatically find out all the required classes and call the methods correctly.</p>
<p>It is extremely useful when we create the plugin-type applications. First we make the interfaces and call the methods from the client by reflection. Then we can create plugins following the interface for the client, which can be loaded as the *.dll files dynamically and executed.</p>
<p>Another scenario is for the framework development. As a framework developer, you will not be able to know what implementations the users will create, so you can only use reflection to create these instances. One example is in some MVVM frameworks, if you create the classes following the conventions, eg. xxxViewModel, the framework can find all the ViewModels and load them automatically using reflection.</p>
<p>Generally, when people talk about reflection, the main concern is the performance. Because it runs on runtime, so theoretically, it is a little bit slower than the normal application. But it is flexible for many scenarios, especially if you develop the framework. If it is acceptable to spend a few seconds (or only hundreds of milliseconds) to load assemblies, then feel free to use it.</p>
<p>The main namespaces we need to use for reflection are <a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection?WT.mc_id=DT-MVP-5001643">System.Reflection</a> and <a href="https://docs.microsoft.com/en-us/dotnet/api/system.type?WT.mc_id=DT-MVP-5001643">System.Type</a>. You may also need to know the below terms:</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly?WT.mc_id=DT-MVP-5001643">Assembly</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.module?WT.mc_id=DT-MVP-5001643">Module</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.constructorinfo?WT.mc_id=DT-MVP-5001643">ConstructorInfo</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.methodinfo?WT.mc_id=DT-MVP-5001643">MethodInfo</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.fieldinfo?WT.mc_id=DT-MVP-5001643">FieldInfo</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.eventinfo?WT.mc_id=DT-MVP-5001643">EventInfo</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.propertyinfo?WT.mc_id=DT-MVP-5001643">PropertyInfo</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.parameterinfo?WT.mc_id=DT-MVP-5001643">ParameterInfo</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.customattributedata?WT.mc_id=DT-MVP-5001643">CustomAttributeData</a></li>
</ul>
<p>For more information, please check these docs:</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/reflection?WT.mc_id=DT-MVP-5001643">Reflection in .NET</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/viewing-type-information?WT.mc_id=DT-MVP-5001643">Viewing Type Information</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/dynamically-loading-and-using-types?WT.mc_id=DT-MVP-5001643">Dynamically Loading and Using Types</a></li>
</ul>
<h2 id="T4-Template"><a href="#T4-Template" class="headerlink" title="T4 Template"></a>T4 Template</h2><p><strong>T4 Text Template</strong> is a mixture of text blocks and control logic that can generate a text file. <strong>T4</strong> means <em>text template transformation</em>. You can use it to generate files in Visual Studio for C# and Visual Basic. But the file itself can be text of any kind, such as .txt file, or a HTML file, or a program source code of any languages. You use C# code(or VB) to control the logic in the template. A couple of years ago, I used to use a NuGet package (EntityFramework Reverse POCO Generator) to generate the POCO models for EntityFramework. It is implemented by the T4 template. I just needed to update the database connection string in the T4 template and save it, then the T4 template can read the database information and automatically create all the models and methods.</p>
<p>Let us see how the magic happens. There are two kinds of T4 templates: <strong>Run-Time</strong> and <strong>Design-Time</strong>. The difference is that the run time T4 template is executed in the application to generate the text strings. It will create a .cs class which contains a <code>TransformText()</code> method. Then you can call this method to generate the strings even the target machine does not have Visual Studio installed. On the contrary, the design time T4 template generates the raw source code or text files when you save the template in Visual Studio. If you want to use the run time T4 template, you need to set the <strong>Custom Tool</strong> property of the file as <strong>TextTemplatingFilePreprocessor</strong>. For design time T4 template, the <strong>Custom Tool</strong> property should be set to <strong>TextTemplatingFileGenerator</strong>.</p>
<img src="/2021/01/18/four-ways-to-generate-code-in-c-sharp-including-source-generators-in-dotnet-5/image-20210114155123349.png" class="" title="Set Custom Tool property for the T4 template" alt="Set Custom Tool property for the T4 template">

<p>You can find the samples in the <strong>CodeGeneratorDemo.T4TemplateDemo</strong> project. There are two T4 templates: <strong>RunTimeTextTemplateDemo.tt</strong> and <strong>DesignTimeTextTemplateDemo.tt</strong>.</p>
<h3 id="Run-Time-T4-Template"><a href="#Run-Time-T4-Template" class="headerlink" title="Run-Time T4 Template"></a>Run-Time T4 Template</h3><p>To build the project correctly, you need to install the <strong>System.CodeDom</strong> NuGet package. Open the <strong>RunTimeTextTemplateDemo.tt</strong> file, make some changes to the HTML code, then save it. You will see the T4 template automatically update the generated file <strong>RunTimeTextTemplateDemo.cs</strong>. There is a method called <code>TransformText()</code> you can use in the client code.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">#@ template language=&quot;C#&quot; #&gt;</span></span><br><span class="line">&lt;<span class="meta">#@ assembly name=&quot;System.Core&quot; #&gt;</span></span><br><span class="line">&lt;<span class="meta">#@ import namespace=&quot;System.Linq&quot; #&gt;</span></span><br><span class="line">&lt;<span class="meta">#@ import namespace=&quot;System.Text&quot; #&gt;</span></span><br><span class="line">&lt;<span class="meta">#@ import namespace=&quot;System.Collections.Generic&quot; #&gt;</span></span><br><span class="line">&lt;html&gt;&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Sales <span class="keyword">for</span> Previous Month&lt;/h2&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;<span class="meta"># for (int i = 1; i &lt;= 10; i++)</span></span><br><span class="line">       &#123; <span class="meta">#&gt;</span></span><br><span class="line">         &lt;tr&gt;&lt;td&gt;Test name &lt;<span class="meta">#= i #&gt; &lt;/td&gt;</span></span><br><span class="line">             &lt;td&gt;Test <span class="keyword">value</span> &lt;<span class="meta">#= i * i #&gt; &lt;/td&gt; &lt;/tr&gt;</span></span><br><span class="line">    &lt;<span class="meta"># &#125; #&gt;</span></span><br><span class="line"> &lt;/table&gt;</span><br><span class="line">This report <span class="keyword">is</span> Company Confidential.</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>Every time you save the template, it will update the generated file. In the client code, we can call the below code:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> page = <span class="keyword">new</span> RunTimeTextTemplateDemo();</span><br><span class="line">Console.WriteLine(page.TransformText());</span><br></pre></td></tr></table></figure>

<p>You will see the HTML code in the console.</p>
<h3 id="Design-Time-T4-Template"><a href="#Design-Time-T4-Template" class="headerlink" title="Design-Time T4 Template"></a>Design-Time T4 Template</h3><p>Design-Time template can only be used in the Visual Studio when you develop the program. It generates the raw text files, whatever the format is - it can be .cs, .html, or .txt. Typically, you will need to define a <strong>model</strong>, which could be a text file (XML or JSON or csv or whatever), or a database, then the template reads the data from the model and generate some of your source code.</p>
<p>Here is an example:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">#@ template debug=&quot;false&quot; hostspecific=&quot;true&quot; language=&quot;C#&quot; #&gt;</span></span><br><span class="line">&lt;<span class="meta">#@ assembly name=&quot;System.Core&quot; #&gt;</span></span><br><span class="line">&lt;<span class="meta">#@ import namespace=&quot;System.Linq&quot; #&gt;</span></span><br><span class="line">&lt;<span class="meta">#@ import namespace=&quot;System.Text&quot; #&gt;</span></span><br><span class="line">&lt;<span class="meta">#@ import namespace=&quot;System.Collections.Generic&quot; #&gt;</span></span><br><span class="line">&lt;<span class="meta">#@ import namespace=&quot;System.IO&quot; #&gt;</span></span><br><span class="line">&lt;<span class="meta">#@ output extension=&quot;.cs&quot; #&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CodeGeneratorDemo.T4TemplateDemo.DesignTimeTextTemplateDemo</span></span><br><span class="line">&#123;</span><br><span class="line">&lt;<span class="meta"># </span></span><br><span class="line">    <span class="keyword">var</span> models = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">    <span class="comment">// You can read the data from any source you have.</span></span><br><span class="line">    <span class="built_in">string</span> path = Path.Combine(Path.GetDirectoryName(<span class="keyword">this</span>.Host.TemplateFile), <span class="string">&quot;dataSource.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(File.Exists(path))</span><br><span class="line">    &#123;</span><br><span class="line">        models = File.ReadAllText(path).Split(<span class="string">&#x27;,&#x27;</span>).ToList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> model <span class="keyword">in</span> models)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">#&gt;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> &lt;#=<span class="title">model</span>#&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> Guid Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> &lt;<span class="meta">#=model#&gt;(Guid id)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Id = id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> &lt;#=<span class="title">model</span>#&gt;<span class="title">Service</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> Task&lt;&lt;<span class="meta">#=model#&gt;&gt; Get&lt;#=model#&gt;(Guid id)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Task.FromResult(<span class="keyword">new</span> &lt;<span class="meta">#=model#&gt;(id));</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="meta">#</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>When you save the template, the T4 template can generate the Model and the Service for each class.</p>
<h3 id="How-to-create-a-T4-Template"><a href="#How-to-create-a-T4-Template" class="headerlink" title="How to create a T4 Template"></a>How to create a T4 Template</h3><p>As you see in the above examples, the T4 templates are composed of the following parts:</p>
<ul>
<li><strong>Directives</strong> - elements that control how the template is processed.</li>
<li><strong>Text blocks</strong> - the raw text that is copied directly to the output.</li>
<li><strong>Control blocks</strong> - program code that inserts variable values into the text, and controls conditional or repeated parts of the text.</li>
</ul>
<p>For example, you can use the below directive to specify the output file format:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">#@ output extension=&quot;.txt&quot; #&gt;</span></span><br></pre></td></tr></table></figure>

<p>You can also use C# code to control the logic. For example, check this code:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">#</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#&gt;</span></span><br><span class="line">Hello!</span><br><span class="line">&lt;<span class="meta">#</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#&gt;</span></span><br></pre></td></tr></table></figure>

<p>It will output <code>Hello</code> four times. In this example, <code>Hello</code> is a text block, and the <code>for</code> statement is just the C# code.</p>
<p>To use the variables, you can use the expression control blocks. Just use <code>&lt;#= ... #&gt;</code> to output the variables, as shown below:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">#</span></span><br><span class="line">    <span class="built_in">string</span> message = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#&gt;</span></span><br><span class="line">		&lt;<span class="meta">#=message#&gt;</span></span><br><span class="line">&lt;<span class="meta">#</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#&gt;</span></span><br></pre></td></tr></table></figure>

<p>It will output <code>Hello</code> four times as well.</p>
<p>The powerful feature of T4 template is that you can import assemblies and use most of .NET libraries you need, eg:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">#@ assembly name=&quot;System.Core&quot; #&gt;</span></span><br><span class="line">&lt;<span class="meta">#@ import namespace=&quot;System.Linq&quot; #&gt;</span></span><br><span class="line">&lt;<span class="meta">#@ import namespace=&quot;System.Text&quot; #&gt;</span></span><br><span class="line">&lt;<span class="meta">#@ import namespace=&quot;System.Collections.Generic&quot; #&gt;</span></span><br><span class="line">&lt;<span class="meta">#@ import namespace=&quot;System.IO&quot; #&gt;</span></span><br></pre></td></tr></table></figure>

<p>Just note that you need to place them before the raw text and control blocks. You can even use Reflection in the control blocks. With these features, we can write quite useful templates for some scenarios.</p>
<h3 id="Debug-the-T4-Template"><a href="#Debug-the-T4-Template" class="headerlink" title="Debug the T4 Template"></a>Debug the T4 Template</h3><p>Like the normal C# program, we can debug the T4 template by setting breakpoints. To debug a design-time T4 template, right click the template and choose <strong>Debug T4 template</strong> from the menu of the file in Solution Explorer. To debug a run-time T4 template, just debug the project because it runs when the program compiles.</p>
<img src="/2021/01/18/four-ways-to-generate-code-in-c-sharp-including-source-generators-in-dotnet-5/image-20210114222759505.png" class="" title="Debug the T4 template" alt="Debug the T4 template">

<h3 id="T4-Template-editor"><a href="#T4-Template-editor" class="headerlink" title="T4 Template editor"></a>T4 Template editor</h3><p>By default, Visual Studio does not support the syntax coloring and Intellisense, etc. Fortunately, we have some VS extensions to improve the productivity, such as <a href="https://www.devart.com/t4-editor/">DevArt T4 Editor</a>. You can search <em>T4 template</em> in the VS extension market and you will find more.</p>
<p>We will not cover all the details of T4 template in this article. For more information, please read these documents:</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/visualstudio/modeling/code-generation-and-t4-text-templates?view=vs-2019&WT.mc_id=DT-MVP-5001643">Code Generation and T4 Text Templates</a></li>
<li><a href="https://docs.microsoft.com/en-us/visualstudio/modeling/walkthrough-generating-code-by-using-text-templates?view=vs-2019&WT.mc_id=DT-MVP-5001643">Walkthrough: Generate Code by using Text Templates</a></li>
<li><a href="https://docs.microsoft.com/en-us/visualstudio/modeling/run-time-text-generation-with-t4-text-templates?view=vs-2019&WT.mc_id=DT-MVP-5001643">Run-Time Text Generation with T4 Text Templates</a></li>
<li><a href="https://docs.microsoft.com/en-us/visualstudio/modeling/t4-text-template-directives?view=vs-2019&WT.mc_id=DT-MVP-5001643">T4 Text Template Directives</a></li>
<li><a href="https://docs.microsoft.com/en-us/visualstudio/modeling/text-template-control-blocks?view=vs-2019&WT.mc_id=DT-MVP-5001643">Text Template Control Blocks</a></li>
<li><a href="https://docs.microsoft.com/en-us/visualstudio/modeling/guidelines-for-writing-t4-text-templates?view=vs-2019&WT.mc_id=DT-MVP-5001643">Guidelines for Writing T4 Text Templates</a></li>
</ul>
<h2 id="Source-Generators-in-NET-5"><a href="#Source-Generators-in-NET-5" class="headerlink" title="Source Generators in .NET 5"></a>Source Generators in .NET 5</h2><p>To get started with Source Generators, you need to install the latest <a href="https://dotnet.microsoft.com/download/dotnet/5.0">.NET 5 SDK</a>.</p>
<h3 id="What-is-a-Source-Generator-and-how-it-works"><a href="#What-is-a-Source-Generator-and-how-it-works" class="headerlink" title="What is a Source Generator and how it works?"></a>What is a Source Generator and how it works?</h3><p>According to Microsoft’s definition:</p>
<blockquote>
<p>A Source Generator is a piece of code that runs during compilation and can inspect your program to produce additional files that are compiled together with the rest of your code.</p>
</blockquote>
<p>Let us recap how the Reflection works. As I mentioned before, when we build the application, the reflection code does not know what types it will use, until the application runs. That’s why people complain the performance of reflection. If we have lots of assemblies to load when the app starts, it may cause a slight impact to the performance. And this issue is hard to resolve because that is the downside of reflection - you get the benefit for the development, but you have to accept the disadvantage of it.</p>
<p>Source Generators are used to solve the performance issue - at least, to improve the performance is one of the important goals. Source Generators can analyze the current source code and inject into the code compilation process, then generate some code that will be compiled along the current source code - in other words, when the app completes the compilation, it already exactly knew what types it would use. That is the key to the improvement.</p>
<p>Here is the diagram of Source Generators from Microsoft:</p>
<img src="/2021/01/18/four-ways-to-generate-code-in-c-sharp-including-source-generators-in-dotnet-5/Picture1.png" class="" title="Source Generators" alt="Source Generators">

<p>One thing we need to know is that <strong>Source Generators can only add something to code but not change any existing code</strong>. Let us see an example.</p>
<h3 id="My-first-Source-Generator-sample"><a href="#My-first-Source-Generator-sample" class="headerlink" title="My first Source Generator sample"></a>My first Source Generator sample</h3><p>A Source Generate is an implementation of <code>Microsoft.CodeAnalysis.ISourceGenerator</code>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Microsoft.CodeAnalysis</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISourceGenerator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params">GeneratorInitializationContext context</span>)</span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">GeneratorExecutionContext context</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Create a new .NET Standard 2.0 Class project called <strong>CodeGeneratorDemo.SourceGeneratorDemo</strong>. Install these two NuGet packages:</p>
<ul>
<li>Microsoft.CodeAnalysis.CSharp v3.8+</li>
<li>Microsoft.CodeAnalysis.Analyzers v3.3+</li>
</ul>
<p>We also need to specify the language version as <code>preview</code>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netstandard2.0<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">LangVersion</span>&gt;</span>preview<span class="tag">&lt;/<span class="name">LangVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Technically, Source Generators are not a C# language feature. They are still in preview. So we need to specify it explicitly at the moment.</p>
<p>Then create a <code>SpeakersSourceGenerator.cs</code> file in the project. Update the content as shown below:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.CodeAnalysis;</span><br><span class="line"><span class="keyword">using</span> Microsoft.CodeAnalysis.CSharp.Syntax;</span><br><span class="line"><span class="keyword">using</span> Microsoft.CodeAnalysis.Text;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CodeGeneratorDemo.SourceGeneratorDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Generator</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SpeakersSourceGenerator</span> : <span class="title">ISourceGenerator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params">GeneratorInitializationContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Not needed for this sample</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">GeneratorExecutionContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// begin creating the source we&#x27;ll inject into the users compilation</span></span><br><span class="line">            <span class="keyword">var</span> sourceBuilder = <span class="keyword">new</span> StringBuilder(<span class="string">@&quot;</span></span><br><span class="line"><span class="string">using System;</span></span><br><span class="line"><span class="string">namespace CodeGeneratorDemo.SourceGeneratorDemo</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    public static class SpeakerHelper</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        public static void SayHello() </span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            Console.WriteLine(&quot;&quot;Hello from generated code!&quot;&quot;);</span></span><br><span class="line"><span class="string">&quot;</span>);</span><br><span class="line">            sourceBuilder.Append(<span class="string">@&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&quot;</span>);</span><br><span class="line">            <span class="comment">// inject the created source into the users compilation</span></span><br><span class="line">            context.AddSource(<span class="string">&quot;speakersSourceGenerator&quot;</span>, SourceText.From(sourceBuilder.ToString(), Encoding.UTF8));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The <code>SpeakersSourceGenerator</code> class implements the <code>ISourceGenerator</code> interface, and has the <code>Generator</code> attribute. When the program compiles, it will find the Source Generators and produce the code we need. In this example, I only created a new class named <code>SpeakerHelper</code> that contains one <code>SayHello()</code> method. If we generate the code correctly, it should output the message in the console.</p>
<p>Next, add the reference to the <strong>CodeGeneratorDemo.Client</strong> project. Please note that you need to update the project file like this:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">&quot;Microsoft.NET.Sdk&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OutputType</span>&gt;</span>Exe<span class="tag">&lt;/<span class="name">OutputType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>net5.0<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LangVersion</span>&gt;</span>preview<span class="tag">&lt;/<span class="name">LangVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ProjectReference</span> <span class="attr">Include</span>=<span class="string">&quot;..\CodeGeneratorDemo.SourceGeneratorDemo\CodeGeneratorDemo.SourceGeneratorDemo.csproj&quot;</span> </span></span><br><span class="line"><span class="tag">                      <span class="attr">OutputItemType</span>=<span class="string">&quot;Analyzer&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">ReferenceOutputAssembly</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>You need to specify the language version as well. Also, because we do not reference the project as the normal dll file, so we need to update the values of <code>OutputItemType</code> and <code>ReferenceOutputAssembly</code> as shown above.</p>
<p>Add the code in the client code:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SourceGeneratorSample</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    CodeGeneratorDemo.SourceGeneratorDemo.SpeakerHelper.SayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You may see VS complains <code>CodeGeneratorDemo.SourceGeneratorDemo.SpeakerHelper</code> cannot be found because there is no such class in our code. The tooling of Source Generators is still in preview so we need to build the <strong>CodeGeneratorDemo.SourceGeneratorDemo</strong> project and close VS then restart it. Then you will find VS can support the Intellinsense as well. When we build it, the Source Generators actually generates the <code>SpeakerHelper</code> class. Now run the client app, we can see the output, which comes from the generated code:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hello from generated code!</span><br></pre></td></tr></table></figure>

<p>So the process is, when we build the project, the Source Generators will be called to produce some code that can be compiled with the original source code together. In that way, there is no performance issue because it happens in the compilation. When the app starts, the generated code is already compiled with the other source code.</p>
<p>From my experience, sometimes VS cannot recognize the generated methods or classes but that should be fine if the build runs correctly.</p>
<img src="/2021/01/18/four-ways-to-generate-code-in-c-sharp-including-source-generators-in-dotnet-5/image-20210115155119641.png" class="" title="VS error regarding the generated code" alt="VS error regarding the generated code">

<p>If you press <code>F12</code> to inspect the <code>SayHello()</code> method in the client code, you will see the generated file which shows this file cannot be edited:</p>
<img src="/2021/01/18/four-ways-to-generate-code-in-c-sharp-including-source-generators-in-dotnet-5/image-20210115164047740.png" class="" title="Generated code" alt="Generated code">

<p>You might be curious where the file is. If you want to see the actual generated file, you can add these section to the <strong>CodeGeneratorDemo.SourceGeneratorDemo</strong> project and the <strong>CodeGeneratorDemo.Client</strong> project:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EmitCompilerGeneratedFiles</span>&gt;</span>true<span class="tag">&lt;/<span class="name">EmitCompilerGeneratedFiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">CompilerGeneratedFilesOutputPath</span>&gt;</span>$(BaseIntermediateOutputPath)\GeneratedFiles<span class="tag">&lt;/<span class="name">CompilerGeneratedFilesOutputPath</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Then you can find the file in <strong>obj&#x2F;GeneratedFiles</strong> folder. If you do not specify the <strong>CompilerGeneratedFilesOutputPath</strong> property, it should be in <strong>obj&#x2F;SourceGeneratorFiles</strong> folder.</p>
<p>This is just a quite simple example to show how to generate the code before the runtime. Next, let us see another example that is a little bit more complex.</p>
<h3 id="Generate-an-Attribute-in-compilation"><a href="#Generate-an-Attribute-in-compilation" class="headerlink" title="Generate an Attribute in compilation"></a>Generate an Attribute in compilation</h3><p>When we use the Dependency Injection, normally we need to register the instances manually. For this demo, I will create an <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/?WT.mc_id=DT-MVP-5001643">Attribute</a> to decorate the classes that need to be registered. We can use Reflection to retrieve these attributes to find the specific classes, but the operation maybe expensive. With the Source Generators, we can generate the code to register them before the runtime.</p>
<p>Create a new class called <code>AutoRegisterSourceGenerator</code> as shown below:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Generator</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AutoRegisterSourceGenerator</span> : <span class="title">ISourceGenerator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params">GeneratorInitializationContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// TODO</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">GeneratorExecutionContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">// TODO</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Next, let us create the attribute. We can create the actual class as the normal code, but for the demonstration, I will use Source Generator to generate it. Add the below code to <code>AutoRegisterSourceGenerator</code>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> AttributeText = <span class="string">@&quot;</span></span><br><span class="line"><span class="string">using System;</span></span><br><span class="line"><span class="string">namespace CodeGeneratorDemo.SourceGeneratorDemo</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]</span></span><br><span class="line"><span class="string">    sealed class AutoRegisterAttribute : Attribute</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        public AutoRegisterAttribute()</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>This is just a string. Next, update the <code>Execute</code> method to add the string to the source code:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">GeneratorExecutionContext context</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    context.AddSource(<span class="string">&quot;AutoRegisterAttribute&quot;</span>, SourceText.From(AttributeText, Encoding.UTF8));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>When we build the project, it will generate the <code>AutoRegisterAttribute</code>. </p>
<p>The next step is to create some interfaces:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">CodeGeneratorDemo.Client.Core</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IOrderService</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IProductService</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>And some implementations, such as <code>OrderService</code> and <code>ProductService</code>, which are decorated by the <code>AutoRegister</code> attribute:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> CodeGeneratorDemo.SourceGeneratorDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CodeGeneratorDemo.Client.Core</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">AutoRegister</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderService</span> : <span class="title">IOrderService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OrderService</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;<span class="keyword">this</span>.GetType()&#125;</span> constructed.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="meta">AutoRegister</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductService</span> : <span class="title">IProductService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ProductService</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;<span class="keyword">this</span>.GetType()&#125;</span> constructed.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>We do not have <code>AutoRegister</code> in our code at the moment. So you will see VS complains. It does not matter because the attribute will be generated by the Source Generator later.</p>
<p>We will have another class called <code>DiContainerMocker</code> to mock the DI container:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CodeGeneratorDemo.Client.Core</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">DiContainerMocker</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterService</span>&lt;<span class="title">TInterface</span>, <span class="title">TImplementation</span>&gt;(<span class="params">TImplementation service</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;service.GetType()&#125;</span> has been registered for <span class="subst">&#123;<span class="keyword">typeof</span>(TInterface)&#125;</span>.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The Source Generators rely on <a href="https://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/?WT.mc_id=DT-MVP-5001643">Roslyn</a>. It can inspect the data from compilation. We can access the <code>SyntaxTrees</code> by using an object called <code>SyntaxReceivers</code>, iterate the <code>SyntaxNodes</code> then generate codes based on these information.</p>
<p>Create a new class called <code>MySyntaxReceiver</code>, which implements the <code>ISyntaxReceiver</code> interface:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MySyntaxReceiver</span> : <span class="title">ISyntaxReceiver</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;ClassDeclarationSyntax&gt; CandidateClasses &#123; <span class="keyword">get</span>; &#125; = <span class="keyword">new</span> List&lt;ClassDeclarationSyntax&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Called for every syntax node in the compilation, we can inspect the nodes and save any information useful for generation</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnVisitSyntaxNode</span>(<span class="params">SyntaxNode syntaxNode</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// any method with at least one attribute is a candidate for property generation</span></span><br><span class="line">        <span class="keyword">if</span> (syntaxNode <span class="keyword">is</span> ClassDeclarationSyntax classDeclarationSyntax</span><br><span class="line">            &amp;&amp; classDeclarationSyntax.AttributeLists.Count &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            CandidateClasses.Add(classDeclarationSyntax);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In this class, we will check each <code>SyntaxNode</code>. If it is a class and it has attributes, then we will add it to a list.</p>
<p>Next, we need to register <code>MySyntaxReceiver</code> in the <code>Initialize</code> method of the Source Generator:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params">GeneratorInitializationContext context</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    context.RegisterForSyntaxNotifications(() =&gt; <span class="keyword">new</span> MySyntaxReceiver());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Now it is time to complete our Source Generator. The idea is that we will hook the compilation and check if the <code>SyntaxNode</code> is a class and has the <code>AutoRegister</code> attribute. Update the <code>Execute</code> method by the following code:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params">GeneratorExecutionContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            context.AddSource(<span class="string">&quot;AutoRegisterAttribute&quot;</span>, SourceText.From(AttributeText, Encoding.UTF8));</span><br><span class="line">            <span class="keyword">if</span> (!(context.SyntaxReceiver <span class="keyword">is</span> MySyntaxReceiver receiver))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            CSharpParseOptions options = (context.Compilation <span class="keyword">as</span> CSharpCompilation).SyntaxTrees[<span class="number">0</span>].Options <span class="keyword">as</span> CSharpParseOptions;</span><br><span class="line">            SyntaxTree attributeSyntaxTree =</span><br><span class="line">                CSharpSyntaxTree.ParseText(SourceText.From(AttributeText, Encoding.UTF8), options);</span><br><span class="line">            Compilation compilation = context.Compilation.AddSyntaxTrees(attributeSyntaxTree);</span><br><span class="line">            StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            stringBuilder.Append(<span class="string">@&quot;</span></span><br><span class="line"><span class="string">using System;</span></span><br><span class="line"><span class="string">using CodeGeneratorDemo.Client.Core;</span></span><br><span class="line"><span class="string">namespace CodeGeneratorDemo.SourceGeneratorDemo</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    public class RegisterHelper</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        public static void RegisterServices()</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">&quot;</span>);</span><br><span class="line">            <span class="comment">// Get all the classes with the AutoRegisterAttribute</span></span><br><span class="line">            INamedTypeSymbol attributeSymbol =</span><br><span class="line"> compilation.GetTypeByMetadataName(<span class="string">&quot;CodeGeneratorDemo.SourceGeneratorDemo.AutoRegisterAttribute&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> candidateClass <span class="keyword">in</span> receiver.CandidateClasses)</span><br><span class="line">            &#123;</span><br><span class="line">                SemanticModel model = compilation.GetSemanticModel(candidateClass.SyntaxTree);</span><br><span class="line">                <span class="keyword">if</span> (model.GetDeclaredSymbol(candidateClass) <span class="keyword">is</span> ITypeSymbol typeSymbol &amp;&amp;</span><br><span class="line">                    typeSymbol.GetAttributes().Any(x =&gt;</span><br><span class="line">                        x.AttributeClass.Equals(attributeSymbol, SymbolEqualityComparer.Default)))</span><br><span class="line">                &#123;</span><br><span class="line">                    stringBuilder.Append(<span class="string">$@&quot;</span></span><br><span class="line"><span class="string">            DiContainerMocker.RegisterService&lt;I<span class="subst">&#123;candidateClass.Identifier.Text&#125;</span>, <span class="subst">&#123;candidateClass.Identifier.Text&#125;</span>&gt;(new <span class="subst">&#123;candidateClass.Identifier.Text&#125;</span>());&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            stringBuilder.Append(<span class="string">@&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&quot;</span>);</span><br><span class="line">            context.AddSource(<span class="string">&quot;RegisterServiceHelper&quot;</span>, SourceText.From(stringBuilder.ToString(), Encoding.UTF8));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>If you are not familiar with Roslyn, this method may look like complicated. It uses Roslyn API to get the metadata of the classes - kind of similar with Reflection. You can check the documents for more information:</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/work-with-syntax?WT.mc_id=DT-MVP-5001643">Work with syntax</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/work-with-semantics?WT.mc_id=DT-MVP-5001643">Work with semantics</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/syntax-visualizer?tabs=csharp&WT.mc_id=DT-MVP-5001643">Explore code with the Roslyn syntax visualizer in Visual Studio</a></li>
</ul>
<p>To better check the syntax trees in our project, you can install <strong>.NET Compiler Platform SDK</strong> from <strong>Visual Studio Installer</strong>, which provides a SyntaxVisualizer window for VS2019.</p>
<img src="/2021/01/18/four-ways-to-generate-code-in-c-sharp-including-source-generators-in-dotnet-5/image-20210115114204721.png" class="" title="Install .NET Compiler Platform SDK" alt="Install .NET Compiler Platform SDK">

<p>Once we find the classes decorated by the <code>AutoRegister</code> attribute, we can append the source code which can register the instance. The generated code will be compiled with the original code together. By this way, we avoid the expensive cost of Reflection and improve the performance.</p>
<p>Finally, we can call the generated code in the client:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SourceGeneratorSample</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Here is the simple Source Generator sample:&quot;</span>);</span><br><span class="line">    CodeGeneratorDemo.SourceGeneratorDemo.SpeakerHelper.SayHello();</span><br><span class="line">    Console.WriteLine();</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Here is the AutoRegisterAttribute Source Generator sample:&quot;</span>);</span><br><span class="line">    CodeGeneratorDemo.SourceGeneratorDemo.RegisterHelper.RegisterServices();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You need to build the <strong>CodeGeneratorDemo.SourceGeneratorDemo</strong> project then reopen the VS2019. Then you can see the output like this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Here is the AutoRegisterAttribute Source Generator sample:</span><br><span class="line">CodeGeneratorDemo.Client.Core.OrderService constructed.</span><br><span class="line">CodeGeneratorDemo.Client.Core.OrderService has been registered <span class="keyword">for</span> CodeGeneratorDemo.Client.Core.IOrderService.</span><br><span class="line">CodeGeneratorDemo.Client.Core.ProductService constructed.</span><br><span class="line">CodeGeneratorDemo.Client.Core.ProductService has been registered <span class="keyword">for</span> CodeGeneratorDemo.Client.Core.IProductService.</span><br></pre></td></tr></table></figure>

<p>If you press <code>F12</code> on <code>RegisterServices()</code> to check its definition, you will see the generated code is like this:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> CodeGeneratorDemo.SourceGeneratorDemo.Core;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CodeGeneratorDemo.SourceGeneratorDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RegisterHelper</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterServices</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            DiContainerMocker.RegisterService&lt;IProductService, ProductService&gt;(<span class="keyword">new</span> ProductService());</span><br><span class="line">            DiContainerMocker.RegisterService&lt;IOrderService, OrderService&gt;(<span class="keyword">new</span> OrderService());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>That is exactly what we want.</p>
<p>The cool thing is if you remove or add the <code>AutoRegister</code> for the services, you will see the generated code will be updated immediately - no need to rebuild the project!</p>
<h3 id="How-to-debug-the-Source-Generators"><a href="#How-to-debug-the-Source-Generators" class="headerlink" title="How to debug the Source Generators"></a>How to debug the Source Generators</h3><p>Sometimes we need to debug the Source Generators in case we have any issues. If you set a breakpoint in the Source Generator, you will find it will not work. The solution is to attach the debugger in the <code>Initialize</code> method:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params">GeneratorInitializationContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DEBUG</span></span><br><span class="line">            <span class="keyword">if</span> (!Debugger.IsAttached)</span><br><span class="line">            &#123;</span><br><span class="line">                Debugger.Launch();</span><br><span class="line">            &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">            context.RegisterForSyntaxNotifications(() =&gt; <span class="keyword">new</span> MySyntaxReceiver());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>Then you can debug the Source Generator by setting the breakpoints.</p>
<h3 id="How-can-we-deal-with-the-complicated-template-code"><a href="#How-can-we-deal-with-the-complicated-template-code" class="headerlink" title="How can we deal with the complicated template code?"></a>How can we deal with the complicated template code?</h3><p>In these two examples, I demonstrated how to generate code using Source Generators. We use the raw strings in the <code>Execute</code> method - it seems ugly. The better way is to use a template engine. One possible option is <a href="https://github.com/scriban/scriban">Scriban</a> -  a fast, powerful, safe and lightweight scripting language and engine for .NET. So we can store the templates in separate files and make the solution tidy. I will not dive deep to the template syntax because it is out of the scope of this article. You can find more on its GitHub repo.</p>
<h3 id="Usage-scenarios"><a href="#Usage-scenarios" class="headerlink" title="Usage scenarios"></a>Usage scenarios</h3><p>Microsoft provides a Source Generators cookbook. You can find it on GitHub: <a href="https://github.com/dotnet/roslyn/blob/master/docs/features/source-generators.cookbook.md">https://github.com/dotnet/roslyn/blob/master/docs/features/source-generators.cookbook.md</a>. You will see the Source Generators can be applied in many scenarios, especially to replace Reflection, or when you develop the boilerplate codes. For example, some JSON serialization often use dynamic analysis, such as Reflection to examine the type in runtime. Source Generators can generate static serialization code in compile-time to save the cost. You can also access additional files, such as XML or JSON files to generate your code.</p>
<p>Find more examples on GitHub: <a href="https://github.com/dotnet/roslyn-sdk/tree/master/samples/CSharp/SourceGenerators">https://github.com/dotnet/roslyn-sdk/tree/master/samples/CSharp/SourceGenerators</a>.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this article, I walked you through four ways that we can use to generate code in our C# program. They may fit for different scenarios, so we need to compare each approach and choose the appropriate one. </p>
<table>
<thead>
<tr>
<th></th>
<th>Scenarios</th>
<th>Pros</th>
<th>Cons</th>
</tr>
</thead>
<tbody><tr>
<td>Code Snippets</td>
<td>To create code blocks in specific format, such as properties, methods, and classes, etc.</td>
<td>Save the time to type repeating code blocks.</td>
<td>Can only applied to specific format. Cannot be updated automatically.</td>
</tr>
<tr>
<td>Reflection</td>
<td>To get the metadata in runtime then interact with the classes, properties, methods, etc.</td>
<td>Powerful and flexible for many scenarios. Can reduce the coupling.</td>
<td>Expensive cost. Potential performance issue. More complex to maintain.</td>
</tr>
<tr>
<td>T4 Template</td>
<td>To generate some boilerplate code. But sometimes it can be refactored by design patterns.</td>
<td>Can read data from other files. Many available control blocks. Can generate static code without performance issue.</td>
<td>Terrible editor support. Easy to make mistakes in the template.</td>
</tr>
<tr>
<td>Source Generators</td>
<td>To replace some reflection code. Generates static code in compilation based on Roslyn.</td>
<td>No performance issues. Faster build.  IntelliSense support. Can produce diagnostics when unable to generate source code. Partial classes&#x2F;methods support.</td>
<td>Tooling needs improvements. A little bit hard to get started.</td>
</tr>
</tbody></table>
<p>The point is how we use Source Generators - the new features provided in .NET 5. It is still in preview so we may see more improvements from Microsoft soon. My expectation is the better integration with VS2019. Now the experience is not good enough because we must reopen VS repeatedly. Hope this article would help you save your time on C# development. Feel free to leave your comments if you have any ideas, please. Thanks.</p>
]]></content>
      <categories>
        <category>.NET Core</category>
      </categories>
      <tags>
        <tag>Visual Studio</tag>
        <tag>.NET</tag>
        <tag>C#</tag>
        <tag>.NETCore</tag>
        <tag>.NET5</tag>
      </tags>
  </entry>
  <entry>
    <title>How to refactor GildedRose-Refactoring-Kata with Simple Factory Pattern and Strategy Pattern</title>
    <url>/2020/04/12/gildedRose-refactoring-kata-with-simple-factory-pattern-and-strategy-pattern/</url>
    <content><![CDATA[<p>For some reason, I found an interesting project - <strong><a href="https://github.com/emilybache/GildedRose-Refactoring-Kata">GildedRose-Refactoring-Kata</a></strong> on GitHub. It provides a starting code for refactoring exercise in a bunch of programming languages. The principle is we should create enough unit tests that can cover all cases(especially for the edge cases), then start to refactor the code. Let us try to do some exercises.</p>
<span id="more"></span>

<p>The original project has a huge method which contains lots of <code>if else</code> blocks to update the Items properties. Regarding the refactoring, there is a limit based on the requirement - “do not alter the <code>Item</code> class or Items property”. That is kind of trap because my first thought is to use the simple factory pattern, which means we need to modify the <code>Item</code> class as an abstract class, then create respectively derived classes for different items. Anyway, let us see what we could do if we are allowed to modify the <code>Item</code> class.</p>
<h2 id="Simple-Factory-Pattern"><a href="#Simple-Factory-Pattern" class="headerlink" title="Simple Factory Pattern"></a>Simple Factory Pattern</h2><p>The Simple Factory Pattern might be one of the most widely used patterns. There is a <code>factory</code> object for creating some other objects so we do not need to use <code>new</code> keyword to frequently create different objects in our code. The objects created by the factory should have the same parent class but they perform different tasks according to their types. It is easy to use and it works for lots of scenarios. The “easiest” does not mean it is not good enough. We could find the balance between the delivery and the time-cost.</p>
<p>For this case, the <code>Item</code> class would be the base class. I can add an abstract method to calculate the <code>SellIn</code> and <code>Quality</code>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Item</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> SellIn &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Quality &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Item</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> sellIn, <span class="built_in">int</span> quality</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        SellIn = sellIn;</span><br><span class="line">        Quality = quality;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Update</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The <code>Item</code> class now is <code>abstract</code> so it cannot be instantiated directly. Now we can create derived classes to update these properties for different types. For simplicity, I will create a <strong>StandardItem</strong> type and an <strong>AgedBrie</strong> type as examples, as shown below:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StandardItem</span> : <span class="title">Item</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StandardItem</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> sellIn, <span class="built_in">int</span> quality</span>) </span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">name, sellIn, quality</span>)</span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        SellIn = SellIn - <span class="number">1</span>;</span><br><span class="line">        Quality = Quality - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (Quality &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Quality = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Quality &gt; <span class="number">50</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Quality = <span class="number">50</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AgedBrie</span> : <span class="title">Item</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AgedBrie</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> sellIn, <span class="built_in">int</span> quality</span>) </span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">name, sellIn, quality</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        SellIn = SellIn - <span class="number">1</span>;</span><br><span class="line">        Quality = Quality + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (Quality &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Quality = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Quality &gt; <span class="number">50</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Quality = <span class="number">50</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//The above validation can be refactored as well</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>But here we still see some duplicated code when retrieving the value of the <code>Quality</code>. So the better way is to move these validations to the <code>getter</code> method of the <code>Quality</code> property in the <code>Item</code> base class, or we could have a default implementation in the base class.</p>
<p>By creating these derived classes, we can extract the logic from the big <code>GildedRose</code> class to the derived classes. Next we need to have a factory to create them.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ItemFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Item <span class="title">CreateItem</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> sellIn, <span class="built_in">int</span> quality</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (name)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Aged Brie&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> AgedBrie(name, sellIn, quality);</span><br><span class="line">            ...</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> StandardItem(name, sellIn, quality);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The next step is to update the <code>Main</code> method in <code>Program</code> class:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">IList&lt;Item&gt; Items = <span class="keyword">new</span> List&lt;Item&gt;&#123;</span><br><span class="line">    <span class="comment">//Call the factory to create the derived classes:</span></span><br><span class="line">    ItemFactory.CreateItem(<span class="string">&quot;+5 Dexterity Vest&quot;</span>, <span class="number">10</span>, <span class="number">20</span>),</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>We use the factory to create the items. Now update the <code>UpdateQuality</code> method in the <code>GildedRose</code> class:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateQuality</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> Items)</span><br><span class="line">    &#123;</span><br><span class="line">        item.Update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Because each derived item has its own method to update the properties, so we can get the correct values.</p>
<p>But, what if we cannot modify the <code>Item</code> class?</p>
<p>One variation is using the interface to extend the behavior of the class. We do not need to add the <code>Update</code> method in the <code>Item</code> class. Instead, we can create a new interface which provides the <code>Update</code> method. So the derived classes could implement this interface to update its properties:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IUpdate</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">UpdateSellIn</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">UpdateQuality</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AgedBrie</span> : <span class="title">Item</span>, <span class="title">IUpdate</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>All the derived classes should implement the <code>IUpdate</code> interface. So the basic logic does not change much, just need to change the <code>UpdateQuality</code> method respectively:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateQuality</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> Items)</span><br><span class="line">    &#123;</span><br><span class="line">        ((IUpdate)item).UpdateSellIn();</span><br><span class="line">        ((IUpdate)item).UpdateQuality();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>For some C# interviews, one common question is “the differences between the abstract class and the interface”. Basically, the typical answer could be:</p>
<ul>
<li>The abstract class can have access specifier for functions but the interface cannot. In other words, you can use <code>private</code>, <code>public</code>, etc for the internal functions but in the interface, all functions are public by default.</li>
<li>The abstract class can have default implementations but the interface cannot.</li>
<li>The abstract class can have fields and constants but the interface cannot have fields.</li>
<li>The abstract class can have non-abstract methods but the interface cannot.</li>
<li>The abstract class can have the constructor but the interface cannot.</li>
<li>One class can only derive from one abstract class but it can implement multiple interfaces.</li>
<li>Both of them cannot be instantiated.</li>
<li>…</li>
</ul>
<blockquote>
<p>Note: Please keep in mind that <strong>“the interface cannot have implementation” is not correct today because the interface supports default implementations from C# 8.0!</strong> Also, there are more changes to the interface since C# 8.0: The interface in C# 8.0 can have <code>private</code>, <code>static</code>,  <code>protected</code>, <code>virtual</code> members. Maybe this interview question could be updated. FYI: <a href="https://devblogs.microsoft.com/dotnet/default-implementations-in-interfaces/">Default implementations in interfaces</a> and <a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/tutorials/default-interface-methods-versions">Tutorial: Update interfaces with default interface methods in C# 8.0</a></p>
</blockquote>
<p>So when should we use the abstract class or the interface? From my understanding, the answer is “it depends”. The abstract class is used to define the actual identity of the objects which have logical inheritance relations but the interface is more likely used to extend the behaviors of the objects. In the dependency injection mode, we mainly use interfaces.</p>
<p>That’s kind of digression. Let us return to the refactoring. To be honest, the variation of the factory pattern is not good enough - because it makes confusing regarding the <strong>object</strong> and the <strong>behavior</strong>. Actually we should make an abstraction of the method that is used to calculate the properties. But the item itself should be the same. Let us move on.</p>
<h2 id="Strategy-Pattern"><a href="#Strategy-Pattern" class="headerlink" title="Strategy Pattern"></a>Strategy Pattern</h2><p>There are categories of the design patterns:</p>
<ul>
<li>Creational Patterns - to create various objects</li>
<li>Structural Patterns - to assemble objects into larger structures</li>
<li>Behavioral Patterns - more focus on the algorithms and the assignment of responsibilities between objects.</li>
</ul>
<p>For this practice, we could use one of the Behavioral Patterns - Strategy Pattern to decouple the calculation logic and the objects. This pattern allows us to have multiple algorithms without changing the original <code>Item</code> class.</p>
<p>First, we need to define an interface that declares a method to execute a strategy:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    (<span class="built_in">int</span> sellIn, <span class="built_in">int</span> quality) Update(Item item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If we use C# 8.0, we can have the default implementation here, eg. to reset the value of <code>SellIn</code> and validate the value of <code>Quality</code>.</p>
<p>Then we will define the concrete strategies:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StandardStrategy</span> : <span class="title">IStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> (<span class="built_in">int</span> sellIn, <span class="built_in">int</span> quality) Update(Item item)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> quality = item.Quality - <span class="number">2</span>;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> (item.SellIn - <span class="number">1</span>, quality);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AgedBrieStrategy</span> : <span class="title">IStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> (<span class="built_in">int</span> sellIn, <span class="built_in">int</span> quality) Update(Item item)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> quality = item.Quality + <span class="number">1</span>;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> (item.SellIn - <span class="number">1</span>, quality);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then we need to create a <code>Context</code> class to define the interface of interest to clients:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StrategyContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IStrategy _strategy = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StrategyContext</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (name)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Aged Brie&quot;</span>:</span><br><span class="line">                _strategy = <span class="keyword">new</span> AgedBrieStrategy();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            ...</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                _strategy = <span class="keyword">new</span> StandardStrategy();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> (<span class="built_in">int</span> sellIn, <span class="built_in">int</span> quality) Update(Item item)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _strategy.Update(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Next we can apply the strategies in the <code>UpdateQuality</code> method in <code>GildedRose</code> class:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateQuality</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> Items)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">new</span> StrategyContext(item.Name);</span><br><span class="line">        <span class="keyword">var</span> result = context.Update(item);</span><br><span class="line">        item.SellIn = result.sellIn;</span><br><span class="line">        item.Quality = result.quality;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This time we did not change the <code>Item</code> class and the <code>Main</code> method in <code>Program</code> class. If you think the <code>new</code> keyword is not beautiful here, you can continue to use the Factory Pattern to decouple the logic used to create the correct strategy to another part. But now we have already decoupled the calculation behavior from the object itself to another class.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>My repo can be found here: <a href="https://github.com/yanxiaodi/GildedRose-Refactoring-Kata-Solutions">https://github.com/yanxiaodi/GildedRose-Refactoring-Kata-Solutions</a>. Because I did not create enough unit tests so there is no guarantee for the results. The demo is to show how to apply these design patterns, not the specific implementation. When we start to refactor the code, the most important thing is to create enough unit tests to make sure the refactoring would not break the current functions. The original project already has a unit test sample so we can add more tests to cover those edge cases. It is not easy to make 100% cover but it is worth to do.</p>
<p>Obviously, I do not think someone would write code like the original project. One thing I always think about is when we have a new requirement, how should we design it by using some complex design pattern or just <code>if else</code>?  In other words, sometimes the client might just ask you to implement the function as soon as possible because of the budget limit without any care regarding your underlying implements. Let us say we have two options: </p>
<ul>
<li>Developer A is a newbie who can complete the function in one hour but just using <code>if else</code>. However, it indeed works as expected.</li>
<li>Developer B is more experienced but needs more time to design the pattern so the time-cost would be 2 hours. But it would be easy to add more features in the future.</li>
</ul>
<p>How would you choose?</p>
]]></content>
      <categories>
        <category>Coding Practice</category>
      </categories>
      <tags>
        <tag>design pattern</tag>
        <tag>dotnetcore</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to my blog!</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> greeting = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">Console.WriteLine(greeting);</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>How to develop a VS Code Extension - Translator Helper</title>
    <url>/2020/02/23/how-to-develop-a-vs-code-extension-translator-helper/</url>
    <content><![CDATA[<p>In my last post, I introduced <a href="https://marketplace.visualstudio.com/items?itemName=XiaodiYan.translator-helper">Translator Helper</a> - a VS Code Extension that helps you translate documents to other languages. In this post, I will introduce how to develop it from scratch.</p>
<span id="more"></span>

<p>It is not very hard to develop a VS Code extension, but it is quite hard to develop a good one. Let us get started from a “Hello World”. You can find detailed documentation on VS Code site: <a href="https://code.visualstudio.com/api">https://code.visualstudio.com/api</a>.</p>
<p>First, we need to think about which category our extension is:</p>
<ul>
<li><a href="https://code.visualstudio.com/api/extension-capabilities/theming">Theming</a>: Change the look of VS Code with a color or icon theme</li>
<li><a href="https://code.visualstudio.com/api/extension-capabilities/extending-workbench">Extending the Workbench</a>: Add custom components &amp; views in the UI</li>
<li><a href="https://code.visualstudio.com/api/extension-guides/webview">Webview Guide</a>: Create a Webview to display a custom webpage built with HTML&#x2F;CSS&#x2F;JS</li>
<li><a href="https://code.visualstudio.com/api/language-extensions/overview">Language Extensions Overview</a>: Support a new programming language</li>
<li><a href="https://code.visualstudio.com/api/extension-guides/debugger-extension">Debugger Extension Guide</a>: Support debugging a specific runtime</li>
</ul>
<p>You should focus on different APIs for each category. For my case, I want to read and insert the text in the file, so it belongs to <strong>Extending the Workbench</strong>. Next I will introduce how to develop a VS Code extension like <strong>Translator Helper</strong>.</p>
<h2 id="Creating-your-first-VS-Code-Extension"><a href="#Creating-your-first-VS-Code-Extension" class="headerlink" title="Creating your first VS Code Extension"></a>Creating your first VS Code Extension</h2><p>You can find the tutorial here: <a href="https://code.visualstudio.com/api/get-started/your-first-extension">https://code.visualstudio.com/api/get-started/your-first-extension</a></p>
<p>First, make sure you have <code>Node.js</code> and <code>Git</code> installed on your machine. Use <code>npm</code> to install <code>Yeoman</code> and <code>VS Code Extension Generator</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g yo generator-code</span><br></pre></td></tr></table></figure>

<p>Then navigate to an empty folder, use the command below to create a new project:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yo code</span><br></pre></td></tr></table></figure>

<p>The CLI will ask you some questions to complete the project. The first question is like this:</p>
<img src="/2020/02/23/how-to-develop-a-vs-code-extension-translator-helper/image-20200109104137159.png" class="" title="Generator CLI" alt="Generator CLI">

<p>Here we need to select proper options based on my specified functionalities. For my extension, I use TypeScript because I love strong type. The output is shown below:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ? What type of extension do you want to create? New Extension (TypeScript)</span></span><br><span class="line"><span class="comment"># ? What&#x27;s the name of your extension? HelloWorld</span></span><br><span class="line"><span class="comment">### Press &lt;Enter&gt; to choose default for all options below ###</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ? What&#x27;s the identifier of your extension? helloworld</span></span><br><span class="line"><span class="comment"># ? What&#x27;s the description of your extension? LEAVE BLANK</span></span><br><span class="line"><span class="comment"># ? Initialize a git repository? Yes</span></span><br><span class="line"><span class="comment"># ? Which package manager to use? npm</span></span><br><span class="line"></span><br><span class="line">code ./helloworld</span><br></pre></td></tr></table></figure>

<p>So a new VS Code Extension named <code>helloworld</code> will be generated and opened by VS Code. You can just press <code>F5</code> to run the project and you will see a new VS Code window that has loaded this extension.</p>
<p>Press <code>F1</code> or <code>Ctrl+Shift+P</code>, then input <code>Hello World</code>, you will see there is a message box shown on the right bottom corner, which shows <code>Hello World</code>. That means the extension works.</p>
<p>The most important code is placed in the <code>extension.ts</code> file. Open the file and have a look:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The module &#x27;vscode&#x27; contains the VS Code extensibility API</span></span><br><span class="line"><span class="comment">// Import the module and reference it with the alias vscode in your code below</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> vscode <span class="keyword">from</span> <span class="string">&#x27;vscode&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this method is called when your extension is activated</span></span><br><span class="line"><span class="comment">// your extension is activated the very first time the command is executed</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">activate</span>(<span class="params">context: vscode.ExtensionContext</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use the console to output diagnostic information (console.log) and errors (console.error)</span></span><br><span class="line">    <span class="comment">// This line of code will only be executed once when your extension is activated</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Congratulations, your extension &quot;helloworld&quot; is now active!&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The command has been defined in the package.json file</span></span><br><span class="line">    <span class="comment">// Now provide the implementation of the command with registerCommand</span></span><br><span class="line">    <span class="comment">// The commandId parameter must match the command field in package.json</span></span><br><span class="line">    <span class="keyword">let</span> disposable = vscode.<span class="property">commands</span>.<span class="title function_">registerCommand</span>(<span class="string">&#x27;extension.helloWorld&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// The code you place here will be executed every time your command is executed</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Display a message box to the user</span></span><br><span class="line">        vscode.<span class="property">window</span>.<span class="title function_">showInformationMessage</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    context.<span class="property">subscriptions</span>.<span class="title function_">push</span>(disposable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this method is called when your extension is deactivated</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">deactivate</span>(<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>It is quite straight forward. In the <code>activate</code> method, it uses <code>vscode.commands.registerCommand()</code> method to register a command, then uses <code>vscode.window.showInformationMessage()</code> method to show the message box.</p>
<h2 id="Requirement-Analysis"><a href="#Requirement-Analysis" class="headerlink" title="Requirement Analysis"></a>Requirement Analysis</h2><p>My requirement is simple: the user can press Keyboard Shortcuts to translate the current paragraph to the specified target language, then insert the translated text after the current paragraph. Because I found that the paragraph is the best unit for translation. No need to translate the whole article because it might lose some key information and we also need to proofread the text. Let check out the supported APIs of VS Code.</p>
<p>You can find all the APIs here: <a href="https://code.visualstudio.com/api/references/vscode-api">https://code.visualstudio.com/api/references/vscode-api</a>. We need to interact with the current editor interface and implement the functionalities that allow us to automatically select and insert the text, etc. So I found an API named <code>TextEditor</code>: <a href="https://code.visualstudio.com/api/references/vscode-api#TextEditor">https://code.visualstudio.com/api/references/vscode-api#TextEditor</a>:</p>


<p>It seems that this object can help us operate the text in the editor.</p>
<p>So now we have got an idea: we will register the keyboard shortcuts and the commands, automatically select the current paragraph then send the text to the translation API, at last, insert the result after the current paragraph.</p>
<h2 id="Operating-The-Text"><a href="#Operating-The-Text" class="headerlink" title="Operating The Text"></a>Operating The Text</h2><p>I created a class called <code>DocService</code> to operate the text in the editor, such as selecting a paragraph, inserting a paragraph, etc. The code is shown below:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DocService</span> &#123;</span><br><span class="line">	<span class="attr">editor</span>: vscode.<span class="property">TextEditor</span> | <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">setCurrentEditor</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">editor</span> = vscode.<span class="property">window</span>.<span class="property">activeTextEditor</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">getParagraph</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">editor</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">			<span class="keyword">let</span> startLine = <span class="variable language_">this</span>.<span class="property">editor</span>.<span class="property">selection</span>.<span class="property">start</span>.<span class="property">line</span>;</span><br><span class="line">			<span class="keyword">let</span> endLine = <span class="variable language_">this</span>.<span class="property">editor</span>.<span class="property">selection</span>.<span class="property">end</span>.<span class="property">line</span>;</span><br><span class="line">			<span class="keyword">const</span> endCharacter = <span class="variable language_">this</span>.<span class="property">editor</span>.<span class="property">document</span>.<span class="title function_">lineAt</span>(endLine).<span class="property">text</span>.<span class="property">length</span>;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">editor</span>.<span class="property">selection</span> = <span class="keyword">new</span> vscode.<span class="title class_">Selection</span>(startLine, <span class="number">0</span>, startLine, endCharacter);</span><br><span class="line">			<span class="keyword">var</span> paragraph = <span class="variable language_">this</span>.<span class="property">editor</span>.<span class="property">selection</span>;</span><br><span class="line">			<span class="keyword">let</span> result = <span class="variable language_">this</span>.<span class="property">editor</span>.<span class="property">document</span>.<span class="title function_">getText</span>(paragraph);</span><br><span class="line">			<span class="keyword">if</span> (result !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> result;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">getSelectionText</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">editor</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">editor</span>.<span class="property">document</span>.<span class="title function_">getText</span>(<span class="variable language_">this</span>.<span class="property">editor</span>.<span class="property">selection</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">insertText</span>(<span class="attr">text</span>: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">editor</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">			<span class="keyword">let</span> end = <span class="variable language_">this</span>.<span class="property">editor</span>.<span class="property">selection</span>.<span class="property">end</span>;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">editor</span>.<span class="title function_">edit</span>(<span class="function"><span class="params">editBuilder</span> =&gt;</span> &#123;</span><br><span class="line">				editBuilder.<span class="title function_">insert</span>(end, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">				editBuilder.<span class="title function_">insert</span>(end, text);</span><br><span class="line">			&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">success</span> =&gt;</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (success &amp;&amp; <span class="variable language_">this</span>.<span class="property">editor</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">					<span class="keyword">let</span> end = <span class="variable language_">this</span>.<span class="property">editor</span>.<span class="property">selection</span>.<span class="property">end</span>;</span><br><span class="line">					<span class="variable language_">this</span>.<span class="property">editor</span>.<span class="property">selection</span> = <span class="keyword">new</span> vscode.<span class="title class_">Selection</span>(end, end);</span><br><span class="line">					<span class="keyword">let</span> startLine = <span class="variable language_">this</span>.<span class="property">editor</span>.<span class="property">selection</span>.<span class="property">start</span>.<span class="property">line</span>;</span><br><span class="line">					<span class="keyword">let</span> endLine = <span class="variable language_">this</span>.<span class="property">editor</span>.<span class="property">selection</span>.<span class="property">end</span>.<span class="property">line</span>;</span><br><span class="line">					<span class="keyword">const</span> endCharacter = <span class="variable language_">this</span>.<span class="property">editor</span>.<span class="property">document</span>.<span class="title function_">lineAt</span>(endLine).<span class="property">text</span>.<span class="property">length</span>;</span><br><span class="line">					<span class="variable language_">this</span>.<span class="property">editor</span>.<span class="property">selection</span> = <span class="keyword">new</span> vscode.<span class="title class_">Selection</span>(startLine, <span class="number">0</span>, startLine, endCharacter);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Calling-Google-Translation-API"><a href="#Calling-Google-Translation-API" class="headerlink" title="Calling Google Translation API"></a>Calling Google Translation API</h2><p>We use Google Translate API to translate the text. It is just a simple HTTP request. For simplicity, we can use an npm package named <code>@vitalets/google-translate-api</code> to do it. The code is like this:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GoogleTranslationService</span> <span class="keyword">implements</span> <span class="title class_">ITranslatorService</span> &#123;</span><br><span class="line">	<span class="keyword">async</span> <span class="title function_">translate</span>(<span class="attr">text</span>: <span class="built_in">string</span>, <span class="attr">source</span>: <span class="built_in">string</span>, <span class="attr">target</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">		<span class="keyword">const</span> service = googleTranslate;</span><br><span class="line">		<span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">service</span>(text, &#123; <span class="attr">from</span>: source, <span class="attr">to</span>: target &#125;);</span><br><span class="line">		<span class="keyword">return</span> result.<span class="property">text</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Implementing-The-Core-Function"><a href="#Implementing-The-Core-Function" class="headerlink" title="Implementing The Core Function"></a>Implementing The Core Function</h2><p>Now we can combine these code snippets together. Create the function by following the “hello world” sample:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> translateInsert = vscode.<span class="property">commands</span>.<span class="title function_">registerCommand</span>(<span class="string">&#x27;translatorHelper.translateInsert&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">	<span class="comment">// The code you place here will be executed every time your command is executed</span></span><br><span class="line">	docService.<span class="title function_">setCurrentEditor</span>();</span><br><span class="line">	<span class="keyword">const</span> text = docService.<span class="title function_">getParagraph</span>();</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (text.<span class="title function_">trim</span>() !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">			<span class="keyword">let</span> result = <span class="keyword">await</span> servie.<span class="title function_">translate</span>(text, source, target);</span><br><span class="line">			docService.<span class="title function_">insertText</span>(result);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">		vscode.<span class="property">window</span>.<span class="title function_">showErrorMessage</span>(<span class="string">`Error occurs. <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>It is easy to understand. We call <code>getParagraph()</code> method in <code>DocService</code> class to automatically get the text of the current paragraph, send the orignial text to Google Translate API then insert the returned text after the current paragraph.</p>
<h2 id="Configurations-Contribution-Points"><a href="#Configurations-Contribution-Points" class="headerlink" title="Configurations &amp; Contribution Points"></a>Configurations &amp; Contribution Points</h2><p>It will not work if you just register the commands in the code. We also need to update <code>package.json</code> to configure the new commands. There is an important concept called <a href="https://code.visualstudio.com/api/references/contribution-points"><strong>Contribution Points</strong></a> in VS Code extension development. You can find the documentation here: <a href="https://code.visualstudio.com/api/references/contribution-points">https://code.visualstudio.com/api/references/contribution-points</a><strong>. Contribution Points</strong> are a set of configurations in the <code>package.json</code> file, which is used to declare some properties of the extension, such as short cuts, commands and settings, etc. Here is an example:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;activationEvents&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;onCommand:translatorHelper.translateInsert&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p>The code above shows that it registers an event which will be invoked by the command named<code>translatorHelper.translateInsert </code> . Another example is shown below:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;contributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;translatorHelper.translateInsert&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Translate &amp; Insert&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;keybindings&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;translatorHelper.translateInsert&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alt+t&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;when&quot;</span><span class="punctuation">:</span> <span class="string">&quot;editorTextFocus&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>I added a command named <code>translatorHelper.translateInsert</code>, which is exact same with the one in the last code snippet. Also, I added a <code>keybindings</code>, so that when the user presses <code>Alt+T</code>, the command will be invoked.</p>
<ul>
<li><code>contributes.commands</code>: <a href="https://code.visualstudio.com/api/references/contribution-points#contributes.commands">https://code.visualstudio.com/api/references/contribution-points#contributes.commands</a></li>
<li><code>contributes.keybindings</code>: <a href="https://code.visualstudio.com/api/references/contribution-points#contributes.keybindings">https://code.visualstudio.com/api/references/contribution-points#contributes.keybindings</a></li>
</ul>
<h2 id="Extension-Configuration"><a href="#Extension-Configuration" class="headerlink" title="Extension Configuration"></a>Extension Configuration</h2><p>We should provide users with the capability to set up the translate languages. The API we need to use for this purpose is <code>contributes.configuration</code>. VS Code provides a unified API to manage the configurations for all the extensions in one place. To enable configurations for my extension, I need to add the below code to the <code>contributes</code> section in <code>package.json</code> :</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;configuration&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Translator Helper&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;translatorHelper.api&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;google&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;enum&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;google&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;google-cn&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;enumDescriptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;Google Translation API.&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;Google Translation API for Chinese users.&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Specify the api to translate the text.&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;translatorHelper.sourceLanguage&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;en&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The source language to be translated.&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;translatorHelper.targetLanguage&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh-CN&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The target language.&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>The configuration could be text, enum or other types. You can also set the default value and add descriptions, etc. After that, you can see the configuration options in the dropdownlist on the configuration page. The detailed API is here: <a href="https://code.visualstudio.com/api/references/contribution-points#contributes.configuration">https://code.visualstudio.com/api/references/contribution-points#contributes.configuration</a>.</p>
<p>For my case, I can read the configurations by the below code:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> config = vscode.<span class="property">workspace</span>.<span class="title function_">getConfiguration</span>(<span class="string">&quot;translatorHelper&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> api = config.<span class="property">api</span>;</span><br><span class="line"><span class="keyword">const</span> source = config.<span class="property">sourceLanguage</span>;</span><br><span class="line"><span class="keyword">const</span> target = config.<span class="property">targetLanguage</span>;</span><br></pre></td></tr></table></figure>

<p>Now the basic functionalities of the translator extension are ready to go!</p>
<h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>Testing is very important in the software development process, especially in the DevOps process. Good testing helps us improve the quality of the software. We can follow the instruction to create tests for the VS Code extension: <a href="https://code.visualstudio.com/api/working-with-extensions/testing-extension">https://code.visualstudio.com/api/working-with-extensions/testing-extension</a>.</p>
<p>The default project template has a full test case integrated already, which is in the <code>src/test</code> folder. We can easily update the test cases. I added a default markdown file named <code>test.md</code> in the <code>src/test/suite</code> folder, which contains a “Hello World”. When the test runs, VS Code will load this file automatically and execute the command to translate it. Some code snippets are shown below:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&quot;Should get the correct translation then insert it.&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">	<span class="keyword">const</span> uri = vscode.<span class="property">Uri</span>.<span class="title function_">file</span>(</span><br><span class="line">		path.<span class="title function_">join</span>(__dirname + testFileLocation)</span><br><span class="line">	);</span><br><span class="line">	<span class="keyword">const</span> <span class="variable language_">document</span> = <span class="keyword">await</span> vscode.<span class="property">workspace</span>.<span class="title function_">openTextDocument</span>(uri);</span><br><span class="line">	<span class="keyword">const</span> editor = <span class="keyword">await</span> vscode.<span class="property">window</span>.<span class="title function_">showTextDocument</span>(<span class="variable language_">document</span>);</span><br><span class="line">	<span class="comment">// Make sure the file is fully loaded before interacting with it.</span></span><br><span class="line">	<span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">200</span>);</span><br><span class="line">	vscode.<span class="property">commands</span>.<span class="title function_">executeCommand</span>(<span class="string">&#x27;extension.translateInsert&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">		assert.<span class="title function_">equal</span>(editor.<span class="property">document</span>.<span class="title function_">getText</span>(editor.<span class="property">selection</span>).<span class="title function_">indexOf</span>(<span class="string">&#x27;你好&#x27;</span>) &gt; -<span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>This piece of code will automatically load the text file and call <code>&#39;extension.translateInsert&#39;</code> command, then compare the translated text with expected text. If it contains the expected text, that means the extension works as expected.</p>
<h2 id="Bundling"><a href="#Bundling" class="headerlink" title="Bundling"></a>Bundling</h2><p>You might be aware that the VS Code extension is similar to the front-end app which contains JavaScript&#x2F;TypeScript. For apps developed by JavaScript or TypeScript, loading lots of small files is slower than loading one big file. So usually, we need to use some bundlers to bundle the code and reduce the size of the app. There are quite a few different bundlers available, such as rollup.js, webpack, etc. For our case, we use webpack as the bundler. That is also the recommended way of VS Code: <a href="https://code.visualstudio.com/api/working-with-extensions/bundling-extension">https://code.visualstudio.com/api/working-with-extensions/bundling-extension</a></p>
<p>Install webpack by typing this command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i --save-dev webpack webpack-cli</span><br></pre></td></tr></table></figure>

<p>Then install <code>ts-loader</code> to add supports to TypeScript for webpack:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i --save-dev ts-loader</span><br></pre></td></tr></table></figure>

<p>After that, a <code>webpack.config.js</code> will be added to the project. In addition, we need to update the <code>package.json</code> file to use webpack for bundling：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vscode:prepublish&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --mode production&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --mode development&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --mode development --watch&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test-compile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc -p ./&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;compile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc -p ./&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;watch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc -watch -p ./&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pretest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run compile&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node ./out/test/runTest.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vsce publish --yarn&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>If you have experience with front-end development, you may find that is easy to config.</p>
<h2 id="Publishing"><a href="#Publishing" class="headerlink" title="Publishing"></a>Publishing</h2><p>It is time to publish our extension. Before doing it, we need to install <code>vsce</code> which is a command-line tool for packaging, publishing and managing VS code extensions. Run this command to install it:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g vsce</span><br></pre></td></tr></table></figure>

<p>We also need to register an account in Marketplace to get the Access Token. Here is the instruction for publishing：<a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension">https://code.visualstudio.com/api/working-with-extensions/publishing-extension</a></p>
<p>I do not want to copy &amp; paste the documents here so you can find detailed steps in the document above. Just keep in mind that if you do not create a Publisher, you will not be able to use the command to publish the extension.</p>
<h2 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI&#x2F;CD"></a>CI&#x2F;CD</h2><p>It is tedious to publish the extension manually for each update. The best way is to integrate CI&#x2F;CD by Azure DevOps. Here is the documentation to describe how to build a Pipeline：<a href="https://code.visualstudio.com/api/working-with-extensions/continuous-integration">https://code.visualstudio.com/api/working-with-extensions/continuous-integration</a>.</p>
<p>Note that we need to use Access Token to publish the extension, but this token is sensitive information so we need to create a variable to store the token in the Pipeline, then use is in YAML file.</p>
<img src="/2020/02/23/how-to-develop-a-vs-code-extension-translator-helper/image-20200109114205110.png" class="" title="Variables in Pipeline" alt="Variables in Pipeline">

<p>The code of the YAML file is shown below:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">trigger:</span></span><br><span class="line">  <span class="attr">branches:</span></span><br><span class="line">    <span class="attr">include:</span> [<span class="string">&#x27;master&#x27;</span>]</span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="attr">include:</span> [<span class="string">&#x27;*&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">strategy:</span></span><br><span class="line">  <span class="attr">matrix:</span></span><br><span class="line">    <span class="attr">linux:</span></span><br><span class="line">      <span class="attr">imageName:</span> <span class="string">&#x27;ubuntu-16.04&#x27;</span></span><br><span class="line">    <span class="attr">mac:</span></span><br><span class="line">      <span class="attr">imageName:</span> <span class="string">&#x27;macos-10.13&#x27;</span></span><br><span class="line">    <span class="attr">windows:</span></span><br><span class="line">      <span class="attr">imageName:</span> <span class="string">&#x27;vs2017-win2016&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">vmImage:</span> <span class="string">$(imageName)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">NodeTool@0</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">versionSpec:</span> <span class="string">&#x27;8.x&#x27;</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Install Node.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">bash:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    /usr/bin/Xvfb :99 -screen 0 1024x768x24 &gt; /dev/null 2&gt;&amp;1 &amp;</span></span><br><span class="line"><span class="string">    echo &quot;&gt;&gt;&gt; Started xvfb&quot;</span></span><br><span class="line"><span class="string"></span>  <span class="attr">displayName:</span> <span class="string">Start</span> <span class="string">xvfb</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">and(succeeded(),</span> <span class="string">eq(variables[&#x27;Agent.OS&#x27;],</span> <span class="string">&#x27;Linux&#x27;</span><span class="string">))</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">bash:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    echo &quot;&gt;&gt;&gt; Compile vscode-test&quot;</span></span><br><span class="line"><span class="string">    yarn &amp;&amp; yarn compile</span></span><br><span class="line"><span class="string">    echo &quot;&gt;&gt;&gt; Compiled vscode-test&quot;</span></span><br><span class="line"><span class="string">    cd sample</span></span><br><span class="line"><span class="string">    echo &quot;&gt;&gt;&gt; Run sample integration test&quot;</span></span><br><span class="line"><span class="string">    yarn &amp;&amp; yarn compile &amp;&amp; yarn test</span></span><br><span class="line"><span class="string"></span>  <span class="attr">displayName:</span> <span class="string">Run</span> <span class="string">Tests</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">DISPLAY:</span> <span class="string">&#x27;:99.0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">bash:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    echo &quot;&gt;&gt;&gt; Publish&quot;</span></span><br><span class="line"><span class="string">    yarn deploy -p $(VSCODE_MARKETPLACE_TOKEN)</span></span><br><span class="line"><span class="string"></span>  <span class="attr">displayName:</span> <span class="string">Publish</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">and(succeeded(),</span> <span class="string">eq(variables[&#x27;Agent.OS&#x27;],</span> <span class="string">&#x27;Linux&#x27;</span><span class="string">))</span></span><br></pre></td></tr></table></figure>

<p>It uses <code>$(VSCODE_MARKETPLACE_TOKEN)</code> to retrieve the Access Token. In the trigger section, we set up the trigger to specify the trigger branch and the conditions. So that every time I commit a Pull Request, the Pipeline will be automatically triggered then publish the extension to the Marketplace.</p>
<h2 id="Icon-README"><a href="#Icon-README" class="headerlink" title="Icon &amp; README"></a>Icon &amp; README</h2><p>Another important thing is the manifest information of the extension, including the icon and README, etc. To make the icon, I recommend using <a href="https://icons8.com/lunacy">Lunacy</a>, which you can download from Windows 10 Store for free. This tool has a bunch of beautiful free icons. Also, you can download the extension icon packs that include more than 100,000 icons.</p>
<img src="/2020/02/23/how-to-develop-a-vs-code-extension-translator-helper/image-20200109114538882.png" class="" title="Lunacy" alt="Lunacy">

<p>Place the icon file in the project folder, and config it in the <code>package.json</code> file:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images/icon.png&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>In addition, you need to define the attributes of the extension, such as id, display name, description, version, publisher, repo link, VS Code version, etc. You can also add some badges to show the status like build status, current version, downloads, reviews. etc. For more details, please read this documentation: <a href="https://code.visualstudio.com/api/references/extension-manifest">https://code.visualstudio.com/api/references/extension-manifest</a></p>
<p>The README file is shown on the extension page in Marketplace. You better make a couple of GIF files to show what the extension can do. There are lots of tools to make GIF files. I use <a href="https://www.techsmith.com/store/snagit">SNAGIT</a>, which is a good software to capture your screens.</p>
<img src="/2020/02/23/how-to-develop-a-vs-code-extension-translator-helper/image-20200218230646676.png" class="" title="SNAGIT" alt="SNAGIT">

<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>This is a very simple VS Code extension - you might find that the core method is just less than 50 lines. But it definitely improves my work efficiency. What I learned from it is that when you cannot find a good tool, why not make if yourself? The progress is fun! The project is open-sourced on GitHub: <a href="https://github.com/yanxiaodi/vscode-translator-helper">https://github.com/yanxiaodi/vscode-translator-helper</a>. All feedback and advice are welcomed.</p>
<p>Happy Coding!</p>
]]></content>
      <categories>
        <category>My Projects</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>vscode extension</tag>
        <tag>translate</tag>
        <tag>open source</tag>
      </tags>
  </entry>
  <entry>
    <title>How to generate a WebAPI client for your ASP.NET Core 8.0 WebAPI: A Step-by-Step Guide with Swashbuckle and NSwag</title>
    <url>/2024/02/15/how-to-generate-a-webapi-client-for-your-aspnetcore-webapi-with-swashbuckle-and-nswag/</url>
    <content><![CDATA[<p>ASP.NET Core WebAPIs are a great way to expose your business logic to the world. But how do you consume them? In this article, I’ll show you how to generate a WebAPI client for your ASP.NET Core WebAPI with <strong>Swashbuckle</strong> and <strong>NSwag</strong>.</p>
<span id="more"></span>

<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>A good API is a well-documented API. But even with the best documentation, it can be hard to consume an API. Developers have to write a lot of boilerplate code to consume an API, including making HTTP requests, serializing and deserializing JSON, and handling errors. This can be time-consuming and error-prone.</p>
<p>It is important to provide a great developer experience. One way to do this is to provide a client library that developers can use to consume your API. ASP.NET Core WebAPI template already provides a way to show the API documentation using <strong>Swashbuckle</strong>. But it doesn’t provide a way to generate a client library. In this article, I’ll show you how to generate a WebAPI client for your ASP.NET Core WebAPI with <strong>Swashbuckle</strong> and <strong>NSwag</strong>, so that you can provide the client library to your consumers.</p>
<p><a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore">Swashbuckle</a> is a library that automatically generates API documentation from your ASP.NET Core WebAPI. The default template for ASP.NET Core WebAPI includes Swashbuckle.</p>
<p><a href="https://github.com/RicoSuter/NSwag">NSwag</a> is similar to Swashbuckle. It does not only generate API documentation but also can generate client code for your API. It supports C# and TypeScript.</p>
<h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>Before we start, make sure you have the following installed:</p>
<ul>
<li><a href="https://dotnet.microsoft.com/download/dotnet-core/8.0">.NET Core 8.0</a></li>
<li><a href="https://code.visualstudio.com/">Visual Studio Code</a> or <a href="https://visualstudio.microsoft.com/vs/">Visual Studio 2022</a></li>
</ul>
<p>You can download the source code for this article from <a href="https://github.com/yanxiaodi/MyCodeSamples/tree/master/WebApiClientDemo">GitHub</a>.</p>
<h2 id="Creating-an-ASP-NET-Core-WebAPI"><a href="#Creating-an-ASP-NET-Core-WebAPI" class="headerlink" title="Creating an ASP.NET Core WebAPI"></a>Creating an ASP.NET Core WebAPI</h2><p>First, let’s create an ASP.NET Core WebAPI. Use VS 2022 to create a new project. Choose <strong>ASP.NET Core Web API</strong> template and click <strong>Create</strong>. Check the <strong>Enable OpenAPI support</strong> option to include <strong>Swashbuckle</strong>. Name the project <code>WebApiClientDemo</code>.</p>
<p>The default WeatherForecast controller is good enough for our demo.</p>
<p>Check the <code>Program.cs</code> file, and you should see the following code:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">builder.Services.AddSwaggerGen();</span><br><span class="line"><span class="comment">// Omitted</span></span><br><span class="line"><span class="keyword">if</span> (app.Environment.IsDevelopment())</span><br><span class="line">&#123;</span><br><span class="line">    app.UseSwagger();</span><br><span class="line">    app.UseSwaggerUI();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Run the application and navigate to <code>https://localhost:&lt;your port number&gt;/swagger/index.html</code>. You should see the Swagger UI showing the API documentation.</p>
<h2 id="Configuring-the-OpenAPI-specification"><a href="#Configuring-the-OpenAPI-specification" class="headerlink" title="Configuring the OpenAPI specification"></a>Configuring the OpenAPI specification</h2><p>We can add more information to the OpenAPI specification. So, developers can have a better understanding of the API. We can add the title, description, and contact information to the OpenAPI specification. We can also include the XML comments from the controllers in the OpenAPI document.</p>
<ol>
<li><p>Update the <code>AddSwaggerGen()</code> method in the <code>Program.cs</code> file as follows:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">builder.Services.AddSwaggerGen(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.SwaggerDoc(<span class="string">&quot;v1&quot;</span>, <span class="keyword">new</span> OpenApiInfo</span><br><span class="line">    &#123;</span><br><span class="line">        Version = <span class="string">&quot;v1&quot;</span>,</span><br><span class="line">        Title = <span class="string">&quot;My Web API&quot;</span>,</span><br><span class="line">        Description = <span class="string">&quot;An ASP.NET Core Web API&quot;</span>,</span><br><span class="line">        Contact = <span class="keyword">new</span> OpenApiContact</span><br><span class="line">        &#123;</span><br><span class="line">            Name = <span class="string">&quot;My Team&quot;</span>,</span><br><span class="line">            Url = <span class="keyword">new</span> Uri(<span class="string">&quot;https://myteam.com&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Feel free to update the <code>OpenApiInfo</code> object with your own information.</p>
</li>
<li><p>By default, the OpenAPI specification doesn’t contain the comments from the controllers. You can add the following code to the <code>WebApiDemo.csproj</code> file to include the comments from the controllers in the OpenAPI document:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">GenerateDocumentationFile</span>&gt;</span>true<span class="tag">&lt;/<span class="name">GenerateDocumentationFile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">NoWarn</span>&gt;</span>$(NoWarn);1591<span class="tag">&lt;/<span class="name">NoWarn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>This code tells the compiler to generate an XML documentation file and to suppress the warning 1591, which is the warning for missing XML comments (<code>CS1591: Missing XML comment for publicly visible type or member</code>).</p>
</li>
<li><p>Then, add the following code to the <code>AddSwaggerGen()</code> method:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlFilename = <span class="string">$&quot;<span class="subst">&#123;Assembly.GetExecutingAssembly().GetName().Name&#125;</span>.xml&quot;</span>;</span><br><span class="line">options.IncludeXmlComments(Path.Combine(AppContext.BaseDirectory, xmlFilename));</span><br></pre></td></tr></table></figure>

<p>The preceding code tells Swashbuckle to include the XML comments in the OpenAPI document. So that you can see the comments in the Swagger UI. Add some comments to the WeatherForecast controller and the action methods.</p>
</li>
</ol>
<p>So far, we have configured Swashbuckle to generate the OpenAPI specification with more information and include the XML comments from the controllers. When you run the application and navigate to <code>https://localhost:&lt;your port number&gt;/swagger/index.html</code>, you should see the updated Swagger UI with more information.</p>


<p>You can see the title, description, and contact information in the Swagger UI. You can also see a link such as <code>https://localhost:7194/swagger/v1/swagger.json</code>. This is the URL to the OpenAPI specification.</p>
<h2 id="Generating-an-OpenAPI-specification-file-with-Swashbuckle"><a href="#Generating-an-OpenAPI-specification-file-with-Swashbuckle" class="headerlink" title="Generating an OpenAPI specification file with Swashbuckle"></a>Generating an OpenAPI specification file with Swashbuckle</h2><p>Although we can see the OpenAPI specification in the Swagger UI, we need to generate a JSON file for NSwag to consume. Either Swashbuckle or NSwag can generate the OpenAPI specification file. However, Swashbuckle supports header parameters, while NSwag has some limitations. So, we’ll use Swashbuckle to generate the OpenAPI specification file, and then use NSwag to generate the client code.</p>
<ol>
<li><p>Swashbuckkle provides a CLI tool to generate the OpenAPI specification file. You can use the following command to install the Swashbuckle CLI tool:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dotnet tool install <span class="literal">-g</span> Swashbuckle.AspNetCore.Cli</span><br></pre></td></tr></table></figure>
</li>
<li><p>Then, you can run the following command to generate the OpenAPI specification file:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">swagger tofile <span class="literal">--output</span> swagger<span class="literal">-api</span>.json bin\Debug\net8.<span class="number">0</span>\WebApiClientDemo.dll v1</span><br></pre></td></tr></table></figure>

<p>The preceding command has the following parameters:</p>
<ul>
<li>The <code>swagger tofile</code> command is used to generate the OpenAPI specification file.</li>
<li>The <code>--output</code> option is used to specify the output file.</li>
<li>The <code>bin\Debug\net8.0\WebApiClientDemo.dll</code> is the relative path to the Web API project.</li>
<li>The <code>v1</code> option is the name of the OpenAPI document, which is defined in the <code>AddSwaggerGen()</code> method.</li>
</ul>
<p>If the command is successful, you should see the <code>swagger-api.json</code> file in the project folder.</p>
</li>
</ol>
<p>If you get an error like <code>Unhandled exception. System.IO.FileNotFoundException: Could not load file or assembly &#39;Swashbuckle.AspNetCore.Swagger, Version=...&#39;</code>, check the version of the Swashbuckle.AspNetCore package in the project. Make sure the version of the Swashbuckle CLI tool matches the version of the Swashbuckle.AspNetCore package. For example, in the sample project, the version of the Swashbuckle.AspNetCore package is 6.5.0, so the version of the Swashbuckle CLI tool should be 6.5.0. You can use the following command to install a specific version of the Swashbuckle CLI tool:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dotnet tool install <span class="literal">-g</span> Swashbuckle.AspNetCore.Cli <span class="literal">--version</span> <span class="number">6.5</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>Also, please make sure the path to the assembly is correct.</p>
<p>Of course, we don’t want to run the Swashbuckle CLI tool manually every time we update the WebAPI. We can add a post-build event to the WebAPI project to generate the OpenAPI specification file automatically.</p>
<ol>
<li><p>To use the Swashbuckle CLI tool in the build process, run the following command to add a <code>dotnet-tools.json</code> file to the project:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dotnet new tool<span class="literal">-manifest</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Then, you can run the following code to add the Swashbuckle CLI tool to the project:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dotnet tool install Swashbuckle.AspNetCore.Cli</span><br></pre></td></tr></table></figure>
</li>
<li><p>The preceding command will update the  <code>dotnet-tools.json</code> file and add the Swashbuckle CLI tool to the project. You can find the <code>dotnet-tools.json</code> file in the project folder, as follows:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isRoot&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;swashbuckle.aspnetcore.cli&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6.5.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;swagger&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Next, update the <code>.csproj</code> file to include the <code>swagger tofile</code> command in the build process. Add the following code to the <code>.csproj</code> file:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">SolutionDirectory</span> <span class="attr">Condition</span>=<span class="string">&quot; &#x27;$(SolutionDirectory)&#x27; == &#x27;&#x27; &quot;</span>&gt;</span>$(MSBuildThisFileDirectory)..\<span class="tag">&lt;/<span class="name">SolutionDirectory</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ApiAssembly</span>&gt;</span>$(SolutionDirectory)WebApiClientDemo\bin\$(Configuration)\net8.0\WebApiClientDemo.dll<span class="tag">&lt;/<span class="name">ApiAssembly</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>The preceding code defines the <code>SolutionDirectory</code> and <code>ApiAssembly</code> properties. The <code>ApiAssembly</code> property points to the Web API project. We will use it later. Please update the path to the Web API project if it is different from the sample project.</p>
</li>
<li><p>Then, add the following code to the <code>.csproj</code> file:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Target</span> <span class="attr">Name</span>=<span class="string">&quot;BuildSwaggerFile&quot;</span> <span class="attr">AfterTargets</span>=<span class="string">&quot;Build&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Exec</span> <span class="attr">EnvironmentVariables</span>=<span class="string">&quot;ASPNETCORE_ENVIRONMENT=Development&quot;</span> <span class="attr">Command</span>=<span class="string">&quot;dotnet tool restore&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Exec</span> <span class="attr">EnvironmentVariables</span>=<span class="string">&quot;ASPNETCORE_ENVIRONMENT=Development&quot;</span> <span class="attr">Command</span>=<span class="string">&quot;dotnet tool run swagger tofile --output $(ProjectDir)openapi.json $(ApiAssembly) v1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Target</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>The preceding code defines the <code>BuildSwaggerFile</code> target, which is executed after the <code>Build</code> target. There are two <code>Exec</code> tasks in the <code>BuildSwaggerFile</code> target:</p>
<ul>
<li>The first <code>Exec</code> task restores the Swashbuckle CLI tool. It is useful when you use the pipeline to build the project.</li>
<li>The second <code>Exec</code> task runs the <code>swagger tofile</code> command to generate the OpenAPI specification file. The <code>ApiAssembly</code> property is used to specify the Web API project.</li>
</ul>
</li>
</ol>
<p>Right-click the project and select <code>Rebuild</code>. If the build is successful, you should see the <code>openapi.json</code> file in the project folder.</p>
<h2 id="Creating-a-WebAPI-client-project"><a href="#Creating-a-WebAPI-client-project" class="headerlink" title="Creating a WebAPI client project"></a>Creating a WebAPI client project</h2><p>Next, let’s create a WebAPI client project. We can publish the client library to NuGet or distribute it as a package later.</p>
<ol>
<li><p>Create a new project in the same solution. Choose <strong>Class Library</strong> template and click <strong>Next</strong>. Name the project <code>WebApiClientDemo.Client</code>.</p>
</li>
<li><p>Delete the <code>Class1.cs</code> file in the <code>WebApiClientDemo.Client</code> project.</p>
</li>
<li><p>Add the reference to the <code>WebApiClientDemo</code> project, so, when we build the client project, the WebAPI project will be built first to ensure the OpenAPI specification file is up to date.</p>
</li>
<li><p>Add the following code to the <code>WebApiClientDemo.Client.csproj</code> file:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PackageId</span>&gt;</span>WebApiClientDemo.Client<span class="tag">&lt;/<span class="name">PackageId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">RepositoryUrl</span>&gt;</span>https://github.com/yanxiaodi/MyCodeSamples<span class="tag">&lt;/<span class="name">RepositoryUrl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">VersionPrefix</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">VersionPrefix</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PackageTags</span>&gt;</span>WebApiClient,Client<span class="tag">&lt;/<span class="name">PackageTags</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>The preceding code defines the <code>PackageId</code>, <code>RepositoryUrl</code>, <code>VersionPrefix</code>, and <code>PackageTags</code> properties. These properties are used to generate the NuGet package. You can find more information about the properties in the <a href="https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets?WT.mc_id=DT-MVP-5001643">NuGet documentation</a>. Update the properties with your own information.</p>
</li>
</ol>
<h2 id="Generating-a-WebAPI-client-with-NSwag"><a href="#Generating-a-WebAPI-client-with-NSwag" class="headerlink" title="Generating a WebAPI client with NSwag"></a>Generating a WebAPI client with NSwag</h2><p>Now that we have the OpenAPI specification file and a client project. Next, let’s use NSwag to generate the WebAPI client.</p>
<ol>
<li><p>Create an interface named <code>IWebApiClient</code> in the <code>WebApiClientDemo.Client</code> project. Add the following code to the <code>IWebApiClient.cs</code> file:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WebApiClientDemo.Client</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IWebApiClient</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This interface will be used to define the REST API client library. All client classes will implement this interface.</p>
</li>
<li><p>Install the <code>NSwag.MSBuild</code> package in the <code>WebApiClientDemo.Client</code> project. The <code>NSwag.MSBuild</code> package provides the MSBuild tasks to generate the REST API client library. Run the following command to install the package:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dotnet add package NSwag.MSBuild</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create a <code>nswag.json</code> file in the <code>MyWebApiDemo.WebApiClient</code> project and add the following code:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;runtime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Net80&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;documentGenerator&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fromDocument&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../WebApiClientDemo/openapi.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;newLineBehavior&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Auto&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;codeGenerators&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;openApiToCSharpClient&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;generateClientClasses&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;generateClientInterfaces&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;clientBaseInterface&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IWebApiClient&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;generateDtoTypes&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;injectHttpClient&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;disposeHttpClient&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;generateExceptionClasses&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;exceptionClass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SwaggerException&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;wrapDtoExceptions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;useHttpClientCreationMethod&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;httpClientType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;System.Net.Http.HttpClient&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;useHttpRequestMessageCreationMethod&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;useBaseUrl&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;generateBaseUrlProperty&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;generateSyncMethods&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;exposeJsonSerializerSettings&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;clientClassAccessModifier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typeAccessModifier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;generateContractsOutput&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parameterDateTimeFormat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;s&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;generateUpdateJsonSerializerSettingsMethod&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serializeTypeInformation&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;queryNullValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;className&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;controller&#125;Client&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;operationGenerationMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MultipleClientsFromOperationId&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;generateOptionalParameters&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;generateJsonMethods&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parameterArrayType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;System.Collections.Generic.IEnumerable&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parameterDictionaryType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;System.Collections.Generic.IDictionary&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;responseArrayType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;System.Collections.ObjectModel.ObservableCollection&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;responseDictionaryType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;System.Collections.Generic.Dictionary&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;wrapResponses&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;generateResponseClasses&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;responseClass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SwaggerResponse&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;namespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;WebApiClientDemo.Client&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;requiredPropertiesMustBeDefined&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;dateType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;System.DateTime&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;dateTimeType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;System.DateTime&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;timeType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;System.TimeSpan&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;timeSpanType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;System.TimeSpan&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;arrayType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;System.Collections.ObjectModel.ObservableCollection&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;dictionaryType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;System.Collections.Generic.Dictionary&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;arrayBaseType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;System.Collections.ObjectModel.ObservableCollection&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;dictionaryBaseType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;System.Collections.Generic.Dictionary&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;classStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Inpc&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;generateDefaultValues&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;generateDataAnnotations&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;excludedTypeNames&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;handleReferences&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;generateImmutableArrayProperties&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;generateImmutableDictionaryProperties&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;WebApiClient.cs&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>The preceding code defines the <code>nswag.json</code> file, which is used to generate the REST API client library. There are some important properties in the <code>nswag.json</code> file:</p>
<ul>
<li><code>runtime</code>: The target runtime for the client library.</li>
<li><code>documentGenerator</code>: The document generator configuration. The <code>fromDocument</code> property specifies the <code>url</code> property of the OpenAPI specification. It can use a relative path to the OpenAPI specification file.</li>
<li><code>generateClientClasses</code>: Whether to generate the client classes.</li>
<li><code>generateClientInterfaces</code>: Whether to generate the client interfaces.</li>
<li><code>clientBaseInterface</code>: The base interface for the client classes. In this case, we use the <code>IWebApiClient</code> interface.</li>
<li><code>className</code>: The class name for the client classes. The <code>&#123;controller&#125;</code> placeholder is used to specify the controller name.</li>
<li><code>namespace</code>: The namespace for the client classes.</li>
<li><code>output</code>: The output file for the client library.</li>
</ul>
<p>Update the <code>nswag.json</code> file with your own information. To learn more about the <code>nswag.json</code> file, you can refer to the <a href="https://github.com/RicoSuter/NSwag/wiki/NSwag-Configuration-Document">NSwag configuration documentation</a>.</p>
</li>
<li><p>Add the following code to the <code>WebApiClientDemo.Client.csproj</code> file:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Target</span> <span class="attr">Name</span>=<span class="string">&quot;NSwag&quot;</span> <span class="attr">AfterTargets</span>=<span class="string">&quot;Build&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">Exec</span> <span class="attr">WorkingDirectory</span>=<span class="string">&quot;$(ProjectDir)&quot;</span> <span class="attr">EnvironmentVariables</span>=<span class="string">&quot;ASPNETCORE_ENVIRONMENT=Development&quot;</span> <span class="attr">Command</span>=<span class="string">&quot;$(NSwagExe_Net80) run /input:nswag.json&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Target</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>The preceding code executes the <code>nswag.json</code> file to generate the REST API client library. The command is <code>nswag run /input:nswag.json</code>. To learn more about the NSwag commands, you can refer to the <a href="https://github.com/RicoSuter/NSwag/wiki/CommandLine">NSwag command-line documentation</a>.</p>
</li>
<li><p>Right-click the <code>WebApiClientDemo.Client</code> project and select <code>Rebuild</code>. If the build is successful, you should see the <code>WebApiClient.cs</code> file in the <code>WebApiClientDemo.Client</code> project. This file contains the REST API client library.</p>
</li>
</ol>
<h2 id="Use-System-Text-Json-instead-of-Newtonsoft-Json"><a href="#Use-System-Text-Json-instead-of-Newtonsoft-Json" class="headerlink" title="Use System.Text.Json instead of Newtonsoft.Json"></a>Use System.Text.Json instead of Newtonsoft.Json</h2><p>By default, NSwag uses <code>Newtonsoft.Json</code> to serialize and deserialize JSON data. If you want to use <code>System.Text.Json</code> instead of <code>Newtonsoft.Json</code>, you can add the following code to the <code>nswag.json</code> file:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;codeGenerators&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;openApiToCSharpClient&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;jsonLibrary&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SystemTextJson&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;jsonSerializerSettingsTransformationMethod&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>The <code>jsonLibrary</code> property is used to specify the JSON library. The <code>jsonSerializerSettingsTransformationMethod</code> property is used to specify the method to transform the JSON serializer settings. If you don’t need to transform the JSON serializer settings, you can set it to <code>null</code>.</p>
<h2 id="Customizing-the-method-names"><a href="#Customizing-the-method-names" class="headerlink" title="Customizing the method names"></a>Customizing the method names</h2><p>Check the generated <code>WebApiClient.cs</code> file, and you can find the following code:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">System.Threading.Tasks.Task&lt;System.Collections.ObjectModel.ObservableCollection&lt;WeatherForecast&gt;&gt; GetWeatherForecastAsync();</span><br></pre></td></tr></table></figure>

<p>How does NSwag know the method name is <code>GetWeatherForecastAsync</code>?</p>
<p>In the <code>nswag.json</code> file, you can find the following configuration:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;operationGenerationMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MultipleClientsFromOperationId&quot;</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>The <code>operationGenerationMode</code> property is used to specify the operation generation mode. The <code>MultipleClientsFromOperationId</code> mode generates the client classes based on the operation ID. This means that the method names in the client classes are based on the operation ID. Check the OpenAPI specification file, and you can find the following code:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;/WeatherForecast&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;get&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;WeatherForecast&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;summary&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Get the weather forecast&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;operationId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;WeatherForecast&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>The <code>operationId</code> property is used to specify the operation ID. In this case, the operation ID is <code>WeatherForecast</code>. Where is it from?</p>
<p>Open the <code>WeatherForecastController.cs</code> file, and you can find the following code:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">HttpGet(Name = <span class="string">&quot;GetWeatherForecast&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;WeatherForecast&gt; <span class="title">Get</span>()</span></span><br></pre></td></tr></table></figure>

<p>The <code>Name</code> property of the <code>HttpGet</code> attribute is used to specify the operation ID. So, the method name in the client class is <code>GetWeatherForecastAsync</code>.</p>
<p>In the sample project, you can find a controller named <code>ProductsController</code>. The actions in this controller don’t have the <code>Name</code> property. So what will happen?</p>
<p>If we don’t specify the <code>Name</code> property for the action methods, the OpenAPI specification file will not contain the <code>operationId</code> property. NSwag will use the HTTP methods instead. So you will see the following methods:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">System.Threading.Tasks.<span class="function">Task&lt;<span class="built_in">string</span>&gt; <span class="title">ProductsGETAsync</span>(<span class="params"><span class="built_in">int</span> id</span>)</span>;</span><br><span class="line">System.Threading.Tasks.<span class="function">Task <span class="title">ProductsPOSTAsync</span>(<span class="params"><span class="built_in">string</span> body</span>)</span>;</span><br><span class="line">System.Threading.Tasks.<span class="function">Task <span class="title">ProductsPUTAsync</span>(<span class="params"><span class="built_in">int</span> id, <span class="built_in">string</span> body</span>)</span>;</span><br><span class="line">System.Threading.Tasks.<span class="function">Task <span class="title">ProductsDELETEAsync</span>(<span class="params"><span class="built_in">int</span> id</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>This looks a little bit weird. To solve this issue, you can add the <code>Name</code> property to the action methods to specify the operation ID. However, if you have many action methods, it can be tedious. You can configure the operation IDs for action methods in the <code>Program.cs</code> file. Add the following code to the <code>AddSwaggerGen()</code> method:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">options.CustomOperationIds(e =&gt; <span class="string">$&quot;<span class="subst">&#123;e.ActionDescriptor.RouteValues[<span class="string">&quot;controller&quot;</span>]&#125;</span>_<span class="subst">&#123;e.ActionDescriptor.RouteValues[<span class="string">&quot;action&quot;</span>]&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>The preceding will use the controller name and action name as the operation ID. Generate the OpenAPI specification file again, and you will see the endpoints now have the operation IDs, such as <code>Products_GetProduct</code>, <code>Products_CreateProduct</code>, <code>Products_UpdateProduct</code>, and <code>Products_DeleteProduct</code>, etc. The generated client classes will have the method names based on the operation IDs:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">System.Threading.Tasks.<span class="function">Task&lt;<span class="built_in">string</span>&gt; <span class="title">GetProductAsync</span>(<span class="params"><span class="built_in">int</span> id</span>)</span>;</span><br><span class="line">System.Threading.Tasks.<span class="function">Task <span class="title">CreateProductAsync</span>(<span class="params"><span class="built_in">string</span> body</span>)</span>;</span><br><span class="line">System.Threading.Tasks.<span class="function">Task <span class="title">UpdateProductAsync</span>(<span class="params"><span class="built_in">int</span> id, <span class="built_in">string</span> body</span>)</span>;</span><br><span class="line">System.Threading.Tasks.<span class="function">Task <span class="title">DeleteProductAsync</span>(<span class="params"><span class="built_in">int</span> id</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>Now it looks better.</p>
<h2 id="Providing-an-extension-method-to-register-the-REST-API-client-library"><a href="#Providing-an-extension-method-to-register-the-REST-API-client-library" class="headerlink" title="Providing an extension method to register the REST API client library"></a>Providing an extension method to register the REST API client library</h2><p>Next, we can provide an extension method to register the REST API client library in other projects.</p>
<ol>
<li><p>Create a <code>WebApiClientOptions</code> class to store the base URL of the REST API in the <code>WebApiClientDemo.Client</code> project. Add the following code to the <code>WebApiClientOptions.cs</code> file:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WebApiClientDemo.Client</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WebApiClientOptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? BaseUrl &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can add more configurations if you need.</p>
</li>
<li><p>Create a <code>WebApiClientExtensions.cs</code> class and add the following code:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WebApiClientDemo.Client</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">WebApiClientExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> BaseUrlNullOrEmptyErrorMessage = <span class="string">&quot;Base Url can&#x27;t be null or empty.&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IServiceCollection <span class="title">AddWebApiClients</span>(<span class="params"><span class="keyword">this</span> IServiceCollection services, WebApiClientOptions options</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (services == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(services));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (options == <span class="literal">null</span> || <span class="built_in">string</span>.IsNullOrWhiteSpace(options.BaseUrl))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(options), BaseUrlNullOrEmptyErrorMessage);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        services.AddHttpClient&lt;IWeatherForecastClient, WeatherForecastClient&gt;(client =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            client.BaseAddress = <span class="keyword">new</span> Uri(options.BaseUrl);</span><br><span class="line">        &#125;);</span><br><span class="line">        services.AddHttpClient&lt;IProductsClient, ProductsClient&gt;(client =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            client.BaseAddress = <span class="keyword">new</span> Uri(options.BaseUrl);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> services;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The preceding code provides an extension method to register the REST API client library. If your web API has more controllers, you need to register them in the <code>AddWebApiClients</code> method.</p>
</li>
</ol>
<p>Next, you can publish this project as a NuGet package and share it with other teams. As the API client code is generated in the build process, you can easily update the client library when the WebAPI is updated in your CI&#x2F;CD pipeline. The other teams can install the package and register the API client library using the extension method in their projects. This can save a lot of time and reduce the chance of errors.</p>
<p>If you want to publish this project as a NuGet package, you can refer to the <a href="https://learn.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-the-dotnet-cli?WT.mc_id=DT-MVP-5001643">Publishing a package</a> documentation, or check my article <a href="https://yanxiaodi.medium.com/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo-fb58be4e9be8">Using Azure Pipelines to publish the NuGet package from GitHub repo</a>.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this article, I showed you how to generate a WebAPI client for your ASP.NET Core WebAPI with Swashbuckle and NSwag. We used Swashbuckle to generate the OpenAPI specification file and NSwag to generate the REST API client library. We also provided an extension method to register the REST API client library in other projects. NSwag provides a GUI tool to generate the client library, but it is not suitable for the CI&#x2F;CD pipeline. By using the Swashbuckle CLI tool and the NSwag CLI tool, we can generate the client library in the build process. This can speed up the development process and reduce the chance of errors.</p>
<h2 id="Further-Reading"><a href="#Further-Reading" class="headerlink" title="Further Reading"></a>Further Reading</h2><ul>
<li><a href="https://learn.microsoft.com/en-us/aspnet/core/tutorials/getting-started-with-swashbuckle?WT.mc_id=DT-MVP-5001643">Get started with Swashbuckle and ASP.NET Core</a></li>
<li><a href="https://learn.microsoft.com/en-us/aspnet/core/tutorials/getting-started-with-nswag?WT.mc_id=DT-MVP-5001643">Get started with NSwag and ASP.NET Core</a></li>
<li><a href="https://learn.microsoft.com/en-us/visualstudio/msbuild/tutorial-rest-api-client-msbuild?WT.mc_id=DT-MVP-5001643">Tutorial: Generate a REST API client</a></li>
<li><a href="https://github.com/RicoSuter/NSwag/wiki/NSwag.MSBuild">NSwag.MSBuild</a></li>
</ul>
]]></content>
      <categories>
        <category>.NET Core</category>
      </categories>
      <tags>
        <tag>.NETCore</tag>
        <tag>ASP.NETCore</tag>
      </tags>
  </entry>
  <entry>
    <title>Implementing a simple messenger component for WPF, UWP and Xamarin</title>
    <url>/2019/11/20/implement-a-simple-messenger-component-for-wpf-uwp-and-xamarin/</url>
    <content><![CDATA[<p>The original requirement is that I need to develop a WPF application which implements the socket sender&#x2F;receiver. First, I created a basic WPF application with MVVM pattern. Then I made a single project to do all the stuff related to socket communication. Next I have to integrate the socket library into the ViewModel project to operate socket connections.</p>
<p>Obviously, we can use <code>event</code> for this purpose. For example, we could have a class named <code>SocketServer</code> that has an event to receive socket packages, then subscribe to it in the ViewModel layer. But that means we have to create the instance of the <code>SocketServer</code>class, which couples the ViewModel layer with the socket project. I hope to create a mediator to decouple them. So the publisher and subscriber do not need to know each other.</p>
<span id="more"></span>

<p>When I use <strong>MvvmCross</strong> as the MVVM Framework, I found that MvvmCross provides a plugin named <strong>Messenger</strong> to communicate between ViewModels. But it has dependencies on some MvvmCross libraries, which means if I want to use this plugin in other projects, I have to reference MvvmCross. It is not ideal for my current scenario because actually, the socket project has no requirements to reference MvvmCross. So I made a project that focuses on sub-pub pattern and removed the dependencies to MvvmCross. Now I can reuse it in any WPF, UWP and Xamarin projects. The project is available here:  <a href="https://github.com/yanxiaodi/CoreMessenger">https://github.com/yanxiaodi/CoreMessenger</a>. Let us dive into it for more details.</p>
<img src="/2019/11/20/implement-a-simple-messenger-component-for-wpf-uwp-and-xamarin/image-20191120115517898.png" class="" title="Sub-Pub pattern" alt="Sub-Pub pattern">

<h2 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h2><p><code>Message</code> is an abstract class to represent a message in this system:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Message</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> Sender &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Message</span>(<span class="params"><span class="built_in">object</span> sender</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Sender = sender ?? <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(sender));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>We should create instances of different messages derived from this abstract class. It has an argument called <code>sender</code>, so the subscriber is able to get the instance of the sender. But it is not mandatory.</p>
<h2 id="Subscriptions"><a href="#Subscriptions" class="headerlink" title="Subscriptions"></a>Subscriptions</h2><p><code>BaseSubscription</code> is the base class for subscriptions. The code looks like this:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">BaseSubscription</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Guid Id &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> SubscriptionPriority Priority &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Tag &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Task&lt;<span class="built_in">bool</span>&gt; <span class="title">Invoke</span>(<span class="params"><span class="built_in">object</span> message</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">BaseSubscription</span>(<span class="params">SubscriptionPriority priority, <span class="built_in">string</span> tag</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Id = Guid.NewGuid();</span><br><span class="line">        Priority = priority;</span><br><span class="line">        Tag = tag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>It has an <code>Id</code> property and a <code>tag</code> property so you could put some tags to differentiate or group the instances of subscriptions. The <code>Priority</code> property is an enum type which is used to indicate the priority of the subscription so the subscriptions will be invoked by the expected order.</p>
<p>There are two types of <code>Subscription</code>s. One is <code>StrongSubscription</code>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StrongSubscription</span>&lt;<span class="title">TMessage</span>&gt; : <span class="title">BaseSubscription</span> <span class="keyword">where</span> <span class="title">TMessage</span> : <span class="title">Message</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Action&lt;TMessage&gt; _action;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StrongSubscription</span>(<span class="params">Action&lt;TMessage&gt; action,</span></span></span><br><span class="line"><span class="params"><span class="function">        SubscriptionPriority priority, <span class="built_in">string</span> tag</span>): <span class="title">base</span>(<span class="params">priority, tag</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _action = action;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task&lt;<span class="built_in">bool</span>&gt; <span class="title">Invoke</span>(<span class="params"><span class="built_in">object</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> typedMessage = message <span class="keyword">as</span> TMessage;</span><br><span class="line">        <span class="keyword">if</span> (typedMessage == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$&quot;Unexpected message <span class="subst">&#123;message.ToString()&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">await</span> Task.Run(() =&gt; _action?.Invoke(typedMessage));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>It inherits <code>BaseSubscription</code> and overrides the <code>Invoke()</code> method. Basically, it has a field named <code>_action</code> which is defined when you create the instance. When we publish the message, the subscription will call <code>Invoke()</code> method to execute the action. We use <code>Task</code> to wrap the action so we could leverage the benefit of asynchronous operations.</p>
<p>Here is another type of <code>Subscription</code> named <code>WeakSubscription</code>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeakSubscription</span>&lt;<span class="title">TMessage</span>&gt; : <span class="title">BaseSubscription</span> <span class="keyword">where</span> <span class="title">TMessage</span> : <span class="title">Message</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> WeakReference&lt;Action&lt;TMessage&gt;&gt; _weakReference;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeakSubscription</span>(<span class="params">Action&lt;TMessage&gt; action,</span></span></span><br><span class="line"><span class="params"><span class="function">        SubscriptionPriority priority, <span class="built_in">string</span> tag</span>) : <span class="title">base</span>(<span class="params">priority, tag</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _weakReference = <span class="keyword">new</span> WeakReference&lt;Action&lt;TMessage&gt;&gt;(action);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task&lt;<span class="built_in">bool</span>&gt; <span class="title">Invoke</span>(<span class="params"><span class="built_in">object</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> typedMessage = message <span class="keyword">as</span> TMessage;</span><br><span class="line">        <span class="keyword">if</span> (typedMessage == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$&quot;Unexpected message <span class="subst">&#123;message.ToString()&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Action&lt;TMessage&gt; action;</span><br><span class="line">        <span class="keyword">if</span> (!_weakReference.TryGetTarget(<span class="keyword">out</span> action))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">await</span> Task.Run(() =&gt; action?.Invoke(typedMessage));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The difference here is that the action is stored in a <code>WeakReference</code> field. You could learn more here:  <a href="https://docs.microsoft.com/en-us/dotnet/api/system.weakreference-1?view=netstandard-2.0&WT.mc_id=DT-MVP-5001643">WeakReference<T> Class</a> . It is used to represent a typed weak reference, which references an object while still allowing that object to be reclaimed by Garbage Collection. Before we use it, we need to check if the target has been collected by GC by using <code>TryGetTarget(T)</code> method. If this method returns false, that means the reference has been collected by GC.</p>
<p>If you use <code>StrongSubscription</code>, the Messenger will keep the strong reference to the callback method and  Garbage Collection will not destroy the subscription. In this case, you need to unsubscribe the subscription explicitly to avoid memory leaking. Otherwise, you could use <code>WeakSubscription</code> to remove the subscription when objects go out of scope.</p>
<h2 id="MessengerHub"><a href="#MessengerHub" class="headerlink" title="MessengerHub"></a>MessengerHub</h2><p><code>MessengerHub</code> is a singleton instance in the whole application domain. We don’t need to use Dependency Injection to create the instance because its purpose is explicit and we only have this one instance. Here is an easy way to implement the singleton pattern:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MessengerHub</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Lazy&lt;MessengerHub&gt; lazy = <span class="keyword">new</span> Lazy&lt;MessengerHub&gt;(() =&gt; <span class="keyword">new</span> MessengerHub());</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">MessengerHub</span>()</span> &#123; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> MessengerHub Instance</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> lazy.Value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>MessengerHub</code> maintain a Dictionary to keep the instances of the subscriptions, as shown below:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> ConcurrentDictionary&lt;Type, ConcurrentDictionary&lt;Guid, BaseSubscription&gt;&gt; _subscriptions =</span><br><span class="line">            <span class="keyword">new</span> ConcurrentDictionary&lt;Type, ConcurrentDictionary&lt;Guid, BaseSubscription&gt;&gt;();</span><br></pre></td></tr></table></figure>

<p>The key of the dictionary is the Type of the <code>Message</code> and the value is a Dictionary that contains a set of subscriptions for this specific <code>Message</code>. Obviously, one type could have multiple subscriptions.</p>
<h3 id="Subscribe"><a href="#Subscribe" class="headerlink" title="Subscribe"></a>Subscribe</h3><p><code>MessageHub</code> exposes several important methods to subscribe&#x2F;unsubscribe&#x2F;publish messages.</p>
<p>The <code>Subscribe()</code> method is shown below:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SubscriptionToken <span class="title">Subscribe</span>&lt;<span class="title">TMessage</span>&gt;(<span class="params">Action&lt;TMessage&gt; action,</span></span></span><br><span class="line"><span class="params"><span class="function">    ReferenceType referenceType = ReferenceType.Weak,</span></span></span><br><span class="line"><span class="params"><span class="function">    SubscriptionPriority priority = SubscriptionPriority.Normal, <span class="built_in">string</span> tag = <span class="literal">null</span></span>) <span class="keyword">where</span> TMessage : Message</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (action == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(action));</span><br><span class="line">    &#125;</span><br><span class="line">    BaseSubscription subscription = BuildSubscription(action, referenceType, priority, tag);</span><br><span class="line">    <span class="keyword">return</span> SubscribeInternal(action, subscription);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> SubscriptionToken <span class="title">SubscribeInternal</span>&lt;<span class="title">TMessage</span>&gt;(<span class="params">Action&lt;TMessage&gt; action, BaseSubscription subscription</span>)</span></span><br><span class="line"><span class="function">    <span class="keyword">where</span> TMessage : Message</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!_subscriptions.TryGetValue(<span class="keyword">typeof</span>(TMessage), <span class="keyword">out</span> <span class="keyword">var</span> messageSubscriptions))</span><br><span class="line">    &#123;</span><br><span class="line">        messageSubscriptions = <span class="keyword">new</span> ConcurrentDictionary&lt;Guid, BaseSubscription&gt;();</span><br><span class="line">        _subscriptions[<span class="keyword">typeof</span>(TMessage)] = messageSubscriptions;</span><br><span class="line">    &#125;</span><br><span class="line">    messageSubscriptions[subscription.Id] = subscription;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SubscriptionToken(subscription.Id, <span class="keyword">async</span> () =&gt; <span class="keyword">await</span> UnsubscribeInternal&lt;TMessage&gt;(subscription.Id), action);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>When we subscribe to the message, we create an instance of the <code>Subscription</code> and add it to the dictionary. It might be a strong reference or weak reference - depending on your choice. Then it will create a <code>SubscriptionToken</code>, which is a class that implements <code>IDisposable</code> interface to manage the subscriptions:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">SubscriptionToken</span> : <span class="title">IDisposable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Guid Id &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Action _disposeMe;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">object</span> _dependentObject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SubscriptionToken</span>(<span class="params">Guid id, Action disposeMe, <span class="built_in">object</span> dependentObject</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Id = id;</span><br><span class="line">        _disposeMe = disposeMe;</span><br><span class="line">        _dependentObject = dependentObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Dispose(<span class="literal">true</span>);</span><br><span class="line">        GC.SuppressFinalize(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"><span class="built_in">bool</span> isDisposing</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (isDisposing)</span><br><span class="line">        &#123;</span><br><span class="line">            _disposeMe();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>When we create the instance of <code>SubscriptionToken</code>, actually we pass a method to dispose itself - so when <code>Dispose</code> method is invoked, it will unsubscribe the subscription first.</p>
<h3 id="Unsubscribe"><a href="#Unsubscribe" class="headerlink" title="Unsubscribe"></a>Unsubscribe</h3><p>The method to unsubscribe the message is shown below:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Unsubscribe</span>&lt;<span class="title">TMessage</span>&gt;(<span class="params">SubscriptionToken subscriptionToken</span>) <span class="keyword">where</span> TMessage : Message</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> UnsubscribeInternal&lt;TMessage&gt;(subscriptionToken.Id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">UnsubscribeInternal</span>&lt;<span class="title">TMessage</span>&gt;(<span class="params">Guid subscriptionId</span>) <span class="keyword">where</span> TMessage : Message</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_subscriptions.TryGetValue(<span class="keyword">typeof</span>(TMessage), <span class="keyword">out</span> <span class="keyword">var</span> messageSubscriptions))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (messageSubscriptions.ContainsKey(subscriptionId))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> result = messageSubscriptions.TryRemove(subscriptionId, <span class="keyword">out</span> BaseSubscription <span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>It is quite straightforward. When we unsubscribe the message, the subscription will be removed from the dictionary.</p>
<h3 id="Publish"><a href="#Publish" class="headerlink" title="Publish"></a>Publish</h3><p>Well, we have subscribed the message and created instances of subscriptions that are stored in the dictionary. We can publish messages now. The method to publish messages are shown as below:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Publish</span>&lt;<span class="title">TMessage</span>&gt;(<span class="params">TMessage message</span>) <span class="keyword">where</span> TMessage : Message</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (message == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(message));</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;BaseSubscription&gt; toPublish = <span class="literal">null</span>;</span><br><span class="line">    Type messageType = message.GetType();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_subscriptions.TryGetValue(messageType, <span class="keyword">out</span> <span class="keyword">var</span> messageSubscriptions))</span><br><span class="line">    &#123;</span><br><span class="line">        toPublish = messageSubscriptions.Values.OrderByDescending(x =&gt; x.Priority).ToList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (toPublish == <span class="literal">null</span> || toPublish.Count == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;Guid&gt; deadSubscriptionIds = <span class="keyword">new</span> List&lt;Guid&gt;();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> subscription <span class="keyword">in</span> toPublish)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Execute the action for this message.</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> subscription.Invoke(message);</span><br><span class="line">        <span class="keyword">if</span> (!result)</span><br><span class="line">        &#123;</span><br><span class="line">            deadSubscriptionIds.Add(subscription.Id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deadSubscriptionIds.Any())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> PurgeDeadSubscriptions(messageType, deadSubscriptionIds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure>

<p>When we publish a message, <code>MessageHub</code> will query the dictionary to retrieve the subscriptions for this message, then execute the actions in a loop.</p>
<p>Another thing we need to note is that because some subscriptions might be weak references so we need to check the result of the execution. If it failed, we need to remove it from the subscriptions.</p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>Install from NuGet:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PM&gt; Install-Package FunCoding.CoreMessenger</span><br></pre></td></tr></table></figure>

<p>Use <code>MessengerHub.Instance</code> as the singleton pattern in your whole app domain. It provides these methods:</p>
<ul>
<li>Publish:</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Publish</span>&lt;<span class="title">TMessage</span>&gt;(<span class="params">TMessage message</span>)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Subscribe:</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SubscriptionToken <span class="title">Subscribe</span>&lt;<span class="title">TMessage</span>&gt;(<span class="params">Action&lt;TMessage&gt; action, ReferenceType referenceType = ReferenceType.Weak, SubscriptionPriority priority = SubscriptionPriority.Normal, <span class="built_in">string</span> tag = <span class="literal">null</span></span>)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Unsubscribe:</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Unsubscribe</span>&lt;<span class="title">TMessage</span>&gt;(<span class="params">SubscriptionToken subscriptionToken</span>)</span></span><br></pre></td></tr></table></figure>

<h3 id="Creating-the-Message-class"><a href="#Creating-the-Message-class" class="headerlink" title="Creating the Message class"></a>Creating the <code>Message</code> class</h3><p>First, define a Message class inherited from <code>Message</code> between different components, like this:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestMessage</span> : <span class="title">Message</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ExtraContent &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestMessage</span>(<span class="params"><span class="built_in">object</span> sender, <span class="built_in">string</span> content</span>) : <span class="title">base</span>(<span class="params">sender</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ExtraContent = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then create an instance of the <code>Message</code> in your component A, as shown below:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="keyword">new</span> TestMessage(<span class="keyword">this</span>, <span class="string">&quot;Test Content&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Subscription"><a href="#Subscription" class="headerlink" title="Subscription"></a>Subscription</h3><p>Define a <code>SubscriptionToken</code> instance to store the subscription. Subscribe the <code>Message</code> in your component B, like this:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeViewModel</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> SubscriptionToken _subscriptionTokenForTestMessage;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HomeViewModel</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _subscriptionTokenForTestMessage = </span><br><span class="line">                MessengerHub.Instance.Subscribe&lt;TestMessage&gt;(OnTestMessageReceived,</span><br><span class="line">                ReferenceType.Weak, SubscriptionPriority.Normal);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTestMessageReceived</span>(<span class="params">TestMessage message</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DEBUG</span></span><br><span class="line">            System.Diagnostics.Debug.WriteLine(<span class="string">$&quot;Received messages of type <span class="subst">&#123;message.GetType().ToString()&#125;</span>. Content: <span class="subst">&#123;message.Content&#125;</span>&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Publishing-the-Message"><a href="#Publishing-the-Message" class="headerlink" title="Publishing the Message"></a>Publishing the <code>Message</code></h3><p>Publish the <code>Message</code> in your component A:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">PublishMessage</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> MessengerHub.Instance.Publish(<span class="keyword">new</span> TestMessage(<span class="keyword">this</span>, <span class="string">$&quot;Hello World!&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>All done!</p>
<h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><p>The full signature of the <code>Subscribe</code> method is:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SubscriptionToken <span class="title">Subscribe</span>&lt;<span class="title">TMessage</span>&gt;(<span class="params">Action&lt;TMessage&gt; action,</span></span></span><br><span class="line"><span class="params"><span class="function">            ReferenceType referenceType = ReferenceType.Weak,</span></span></span><br><span class="line"><span class="params"><span class="function">            SubscriptionPriority priority = SubscriptionPriority.Normal, <span class="built_in">string</span> tag = <span class="literal">null</span></span>) <span class="keyword">where</span> TMessage : Message</span></span><br></pre></td></tr></table></figure>

<p>You can specify these parameters:</p>
<ul>
<li><code>ReferenceType</code>. The default value is <code>ReferenceType.Weak</code> so you do not need to worry about the memory leaking. Once the <code>SubscriptionToken</code> instance goes out of the scope, GC can collect it automatically(But not sure when). If you need to keep a strong reference, specify the parameter as <code>ReferenceType.Strong</code> so that GC cannot collect it.</li>
<li><code>SubscriptionPriority</code>. The default value is <code>SubscriptionPriority.Normal</code>. Sometimes it is required to control the execution orders of the subscriptions for one <code>Message</code>. In this case, specify different priorities for the subscriptions to control the execution orders. Notice that this parameter is not for different <code>Message</code>s.</li>
<li><code>Tag</code>. It is optional to inspect the current status for subscriptions.</li>
</ul>
<h3 id="Unsubscribe-1"><a href="#Unsubscribe-1" class="headerlink" title="Unsubscribe"></a>Unsubscribe</h3><p>You can use these methods to unsubscribe the subscription:</p>
<ul>
<li><p>Use <code>Unsubscribe</code> method, as shown below:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> MessengerHub.Instance.Unsubscribe&lt;TestMessage&gt;(_subscriptionTokenForTestMessage);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Use <code>Dispose</code> method of the <code>SubscriptionToken</code>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">_subscriptionTokenForTestMessage.Dispose();</span><br></pre></td></tr></table></figure></li>
</ul>
<p>In many scenarios, you will not call these methods directly. If you are using the strong subscription type, it might cause memory leaking issue. So <code>ReferenceType.Weak</code> is recommended. Be aware that if the token is not stored in the context, it might be collected by GC immediately. For example:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MayNotEverReceiveAMessage</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> token = MessengerHub.Instance.Subscribe&lt;TestMessage&gt;((message) =&gt; &#123;</span><br><span class="line">        <span class="comment">// Do something here</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// token goes out of scope now</span></span><br><span class="line">    <span class="comment">// - so will be garbage collected *at some point*</span></span><br><span class="line">    <span class="comment">// - so the action may never get called</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Differences-with-MvvmCross-Messenger"><a href="#Differences-with-MvvmCross-Messenger" class="headerlink" title="Differences with MvvmCross.Messenger"></a>Differences with MvvmCross.Messenger</h2><p>If you are using <code>MvvmCross</code> to develop your application, please use <code>MvvmCross.Messenger</code> directly. I extracted some main methods and removed dependencies to <code>MvvmCross</code> components so it can be used in any WPF, UWP and Xamarin projects without <code>MvvmCross</code>. Also, the <code>Publish</code> method is always running in the background to avoid blocking the UI. But you should be aware of when you need to return to UI thread - especially when you need to interact with the UI controls. Another difference is that no need to use DI to create the instance of <code>MessageHub</code> which is a singleton instance in all the app domain. It is useful if the solution contains multiple components that need to communicate with each other. DI would make it more complicated.</p>
<h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><ul>
<li><a href="https://www.mvvmcross.com/">MvvmCross</a></li>
<li><a href="https://github.com/jonathanpeppers/XPlatUtils">XPlatUtils</a></li>
</ul>
]]></content>
      <categories>
        <category>My Projects</category>
      </categories>
      <tags>
        <tag>design pattern</tag>
        <tag>WPF</tag>
        <tag>UWP</tag>
        <tag>Xamarin</tag>
        <tag>sub-pub</tag>
      </tags>
  </entry>
  <entry>
    <title>Implementing a Non-CopyPaste EditText control with Xamarin.Android</title>
    <url>/2020/08/09/implementing-a-non-copy-paste-editText-control-with-Xamarin-Android/</url>
    <content><![CDATA[<p>Recently, I am using Xamarin to develop a mobile app for Android. In the app, there is a page that asks the user to input phone numbers twice to make sure the number has been typed correctly. The user is not allowed to copy&#x2F;paste. So I need to implement a custom control that can disable copy&#x2F;paste features.</p>
<span id="more"></span>
<p>Even we can use C# to develop Android with Xamarin, we have to gain enough native development skills to complete this goal. I also understand for a new Xamarin developer, it would be tricky to find a solution related to native functionalities. So I want to show you how I use some tools (<strong>Google</strong> and <strong>StackOverflow</strong>, etc) to find the answer then make it. Here is a simple note to record what I have done for this control and hope it would be useful for you.</p>
<h2 id="Creating-a-custom-control"><a href="#Creating-a-custom-control" class="headerlink" title="Creating a custom control"></a>Creating a custom control</h2><p>The first step obviously is to create a new custom control that inherits from the default <code>EditText</code> control. So I created a new class called <code>NonCopyPasteEditText</code> in the <code>UserControls</code> folder. It is just a simple class as shown below:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyApp.Droid.UserControls</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">NonCopyPasteEditText</span> : <span class="title">EditText</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">NonCopyPasteEditText</span>(<span class="params">IntPtr javaReference, JniHandleOwnership transfer</span>) : <span class="title">base</span>(<span class="params">javaReference, transfer</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">NonCopyPasteEditText</span>(<span class="params">Context context</span>) : <span class="title">base</span>(<span class="params">context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">NonCopyPasteEditText</span>(<span class="params">Context context, IAttributeSet attrs</span>) : <span class="title">base</span>(<span class="params">context, attrs</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Disabling-the-selection-action"><a href="#Disabling-the-selection-action" class="headerlink" title="Disabling the selection action"></a>Disabling the selection action</h2><p>The next step is to do something that can prevent copy&#x2F;paste. But how? So I google <em>android disable copy paste</em> then click the first link <a href="https://stackoverflow.com/questions/6275299/how-to-disable-copy-paste-from-to-edittext">How to disable copy&#x2F;paste from&#x2F;to EditText - Stack Overflow</a>. That is great. The accepted answer looks like what I need. It shows we need to use <code>setCustomSelectionActionModeCallback</code> method to prevent the action mode for actions (Select All, Cut, Copy and Paste actions). If we disable the selection context menu, the user cannot copy&#x2F;paste. Then please do not forget to vote the answer because it is helpful. 👍</p>
<p>Ok. So let us figure out what it is. So I google <em>setCustomSelectionActionModeCallback</em> then I see the Android documentation here: <a href="https://developer.android.com/reference/android/widget/TextView#setCustomSelectionActionModeCallback(android.view.ActionMode.Callback)">https://developer.android.com/reference/android/widget/TextView#setCustomSelectionActionModeCallback(android.view.ActionMode.Callback)</a>.</p>
<blockquote>
<p>Returning false from <code>ActionMode.Callback.onCreateActionMode(ActionMode, android.view.Menu)</code> will prevent the action mode from being started.</p>
</blockquote>
<p>It is what we want. We can follow the same pattern for our Xamarin app. Because Xamarin runtime is a wrapper for the native APIs so we can find the corresponding APIs in Xamarin. But please keep in mind that they may have different naming styles.</p>
<p>I found the link from Xamarin.Android docs: <a href="https://docs.microsoft.com/en-us/dotnet/api/android.widget.textview.customselectionactionmodecallback?view=xamarin-android-sdk-9">TextView.CustomSelectionActionModeCallback Property</a>. Unfortunately, it does not provide much information we need. But it supports <em>get</em> and <em>set</em> so we can just assign a new value.</p>
<p>To create a new <code>CustomSelectionActionModeCallback</code>, we need to create a class that inherits the interface <code>ActionMode.Callback</code>. But I could not find this interface in Xamarin. Instead, I found a class called <code>ActionMode.Callback2</code>. Actually it is an abstract class that implements this interface. FYI: <a href="https://developer.android.com/reference/android/view/ActionMode.Callback2">ActionMode.Callback2</a>.</p>
<p>Let us create a new callback as shown below:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NonCopyPasteCustomSelectionActionModeCallback</span> : <span class="title">ActionMode.Callback2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">OnActionItemClicked</span>(<span class="params">ActionMode mode, IMenuItem item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">OnCreateActionMode</span>(<span class="params">ActionMode mode, IMenu menu</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnDestroyActionMode</span>(<span class="params">ActionMode mode</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">OnPrepareActionMode</span>(<span class="params">ActionMode mode, IMenu menu</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Next we can assign this callback to our custom control:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NonCopyPasteEditText</span>(<span class="params">Context context, IAttributeSet attrs</span>) : <span class="title">base</span>(<span class="params">context, attrs</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">      CustomSelectionActionModeCallback = <span class="keyword">new</span> NonCopyPasteCustomSelectionActionModeCallback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Cool! It works! When the user long-presses the text in the <code>EditText</code>, no context menu appears. So the task is done?</p>
<p>Unfortunately, No.</p>
<h2 id="Handling-the-Android-IME"><a href="#Handling-the-Android-IME" class="headerlink" title="Handling the Android IME"></a>Handling the Android IME</h2><p>We forgot a thing that is most of Android IMEs provide the function to edit the text, including <em>Select All</em>, <em>Select</em>, <em>Copy</em> and <em>Paste</em>, etc. The user can use the IME to do copy&#x2F;paste, as shown below:</p>
<img src="/2020/08/09/implementing-a-non-copy-paste-editText-control-with-Xamarin-Android/image-20200809092822654.png" class="" title="Text Edit and Clipboard Manager on Samsung phones" alt="Text Edit and Clipboard Manager on Samsung phones">

<p>So even we can disable the long-press action for the <code>EditText</code>, the user can still use IME to copy&#x2F;paste.</p>
<p>My next idea is to find a way to clear the clipboard. Although it is hard to disable <em>copy</em> of IME, we can clear the clipboard when the user clicks the <code>EditText</code> for pasting.</p>
<p>I google <em>android clear clipboard programmatically</em> then I found Android has a <code>ClipBoardManager</code> to manage the clipboard. I also find the corresponding class in Xamarin.Android. FYI: <a href="https://docs.microsoft.com/en-us/dotnet/api/android.content.clipboardmanager?view=xamarin-android-sdk-9">ClipboardManager Class</a></p>
<p>So we can use this class to clear the clipboard when the user clicks the next <code>EditText</code> - then there is nothing to be pasted!</p>
<p>I felt very happy and wrote the below code quickly:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NonCopyPasteEditText</span>(<span class="params">Context context, IAttributeSet attrs</span>) : <span class="title">base</span>(<span class="params">context, attrs</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">     CustomSelectionActionModeCallback = <span class="keyword">new</span> NonCopyPasteCustomSelectionActionModeCallback();</span><br><span class="line">     FocusChange += NonCopyPasteEditText_FocusChange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">NonCopyPasteEditText_FocusChange</span>(<span class="params"><span class="built_in">object</span> sender, FocusChangeEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">if</span> (e.HasFocus)</span><br><span class="line">     &#123;</span><br><span class="line">           ClipboardManager clipboard = (ClipboardManager)Application.Context.GetSystemService(Context.ClipboardService);</span><br><span class="line">           clipboard.ClearPrimaryClip();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>It looks good! And it does work on my Huawei phone (Android 10)! So the task is done?</p>
<p>Unfortunately, No, either.</p>
<h2 id="Handling-the-Samsung-private-APIs"><a href="#Handling-the-Samsung-private-APIs" class="headerlink" title="Handling the Samsung private APIs"></a>Handling the Samsung private APIs</h2><p>Android is open-source platform so many manufactures can modify the original Android code to improve the user experience. (or making it worse, who knows!) For example, you may find the system setting menus of phones from different manufactures are not the same even they have the same Android version. So the challenge is not only to handle the Android APIs for various SDK versions, but also to deal with the various private APIs added by manufactures.</p>
<p>For example, Samsung phones have a clipboard manager. It can store clipboard history and you can manage them in the IME. Unfortunately, the <code>ClipboardManager</code> in the above section does not work for Samsung phones. When I call <code>clipboard.ClearPrimaryClip()</code> method, nothing happens. The copied text is still there.</p>
<p>Let us change to another approach. The goal is to disable copy&#x2F;paste - more specifically, we hope the user cannot copy the text in the first <code>EditText</code> then paste it to the second <code>EditText</code>. In other words, if the user <em>can</em> copy the text, we should make sure the user <em>cannot</em> paste it. So we can detect the user’s intent by checking the text-changed event. If the changed text is more than one letter, we would know the user wants to paste - then we can do something.</p>
<p>Here is the updated code to add <code>TextChanged</code> event handler:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NonCopyPasteEditText</span>(<span class="params">Context context, IAttributeSet attrs</span>) : <span class="title">base</span>(<span class="params">context, attrs</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">     CustomSelectionActionModeCallback = <span class="keyword">new</span> NonCopyPasteCustomSelectionActionModeCallback();</span><br><span class="line">     FocusChange += NonCopyPasteEditText_FocusChange;</span><br><span class="line">     TextChanged += NonCopyPasteEditText_TextChanged;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">NonCopyPasteEditText_TextChanged</span>(<span class="params"><span class="built_in">object</span> sender, Android.Text.TextChangedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.AfterCount - e.BeforeCount &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">         Text = <span class="string">$&quot;<span class="subst">&#123;Text.Substring(<span class="number">0</span>, e.Start)&#125;</span><span class="subst">&#123;Text.Substring(e.Start + e.AfterCount)&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>When the user clicks the second <code>EditText</code> to paste, we will check the changed text. If the text is longer than one letter, we will restore the previous text. We do not need to worry about one-letter scenario because if we do not have this condition the user cannot type anything to the <code>EditText</code>. Also, I do not think anyone would copy&#x2F;paste one letter one time, 8-)</p>
<h2 id="Clean-up"><a href="#Clean-up" class="headerlink" title="Clean up"></a>Clean up</h2><p>It looks working so far. But we still have an issue actually. Because we need to set the initial value when loading this page for the existing phone number of the first <code>EditText</code>. It will also invoke the <code>TextChanged</code> event when we set its value so we will get an empty <code>EditText</code>. I need to use a flag to indicate if the control has been initialized:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> _isLoaded = <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">NonCopyPasteEditText_TextChanged</span>(<span class="params"><span class="built_in">object</span> sender, Android.Text.TextChangedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!_isLoaded)</span><br><span class="line">    &#123;</span><br><span class="line">        _isLoaded = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (e.AfterCount - e.BeforeCount &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Text = <span class="string">$&quot;<span class="subst">&#123;Text.Substring(<span class="number">0</span>, e.Start)&#125;</span><span class="subst">&#123;Text.Substring(e.Start + e.AfterCount)&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Now this feature will not impact the data-binding to set the initial value.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>This article is pretty trivial, and I just hope to show how we start to solve a problem we may not be familiar with. Xamarin provides us with fully wrapped implementations for native APIs but we still need to dive deep into that. Hope this article would be helpful for your Xamarin development. Thanks.</p>
]]></content>
      <categories>
        <category>Xamarin</category>
      </categories>
      <tags>
        <tag>.NET</tag>
        <tag>Xamarin</tag>
      </tags>
  </entry>
  <entry>
    <title>Increase The Version Number In Azure DevOps</title>
    <url>/2022/03/03/increase-the-version-number-in-azure-devOps/</url>
    <content><![CDATA[<p>Azure DevOps Pipelines is one of my favorite components in Azure DevOps. In this article, I will show you how to customize the version number in the YAML file for .NET applications. Why? Because I have seen some developers set up the build version number as a parameter in Azure DevOps UI, so they have to update the parameter whenever they need to build a new version. The better way is to manage the version number as code, so the pipeline will read the configuration from the code then automatically update it. I’ll show you how to make it in .NET 6 applications. First, let’s look at what the semantic versioning is.</p>
<span id="more"></span>

<h2 id="What-is-Semantic-Versioning"><a href="#What-is-Semantic-Versioning" class="headerlink" title="What is Semantic Versioning"></a>What is Semantic Versioning</h2><p>Semantic Versioning is widely used to indicate the version numbers of the software. You can find it here: <a href="https://semver.org/">https://semver.org/</a>.</p>
<p>Based on the Semantic Versioning, a version number contains these parts:</p>
<ol>
<li>MAJOR version when you make incompatible API changes,</li>
<li>MINOR version when you add functionality in a backwards compatible manner, and</li>
<li>PATCH version when you make backwards compatible bug fixes.</li>
</ol>
<p>So a normal version number may look like this: <code>1.2.3</code>. It can also contain additional labels for pre-release build, such as <code>1.2.3-alpha</code>. Moreover, it can contain build metadata. For example, it can contain an additional part which shows the build time (or build number), like <code>1.0.0+20130313144700</code>.</p>
<p>Semantic Versioning is a specification, not a rule you must follow. Basically, you can define your own format to indicate the versions. In this article, I will specify the major version, the minor version and the patch version manually, and generate another revision version by the Azure DevOps Pipelines. Every time when the pipeline runs, it will increase the revision version. You can easily modify the YAML files to create your own version number format. You can apply the same approach in any kind of .NET Core Web&#x2F;WPF applications as well. Let’s get started!</p>
<h2 id="Create-a-NET-6-Web-API-project"><a href="#Create-a-NET-6-Web-API-project" class="headerlink" title="Create a .NET 6 Web API project"></a>Create a .NET 6 Web API project</h2><h3 id="Create-a-new-project"><a href="#Create-a-new-project" class="headerlink" title="Create a new project"></a>Create a new project</h3><p>You might know how to create a new .NET 6 Web API project. We just use the default .NET 6 Web API template. Select ASP.NET Core Web API template.</p>
<p>Type the project name and select the location, then click <strong>Next</strong>.</p>
<img src="/2022/03/03/increase-the-version-number-in-azure-devOps/image-20220123202732474.png" class="">

<p>Click <strong>Create</strong>, you will have a new .NET 6 Web API project.</p>
<h3 id="Add-the-model-and-controller"><a href="#Add-the-model-and-controller" class="headerlink" title="Add the model and controller"></a>Add the model and controller</h3><p>We will use a model to represent the application information. Create a <strong>Models</strong> folder and add a new <code>AppInfo</code> class with the following code:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">BuildVersionDemo.Models</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AppInfo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="string">&quot;BuildVersionDemo&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Version &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then Add a controller named <code>AppInfoController</code> in the <strong>Controllers</strong> folder:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">BuildVersionDemo.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AppInfoController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">HttpGet(Name = <span class="string">&quot;GetAppInfo&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> AppInfo <span class="title">Get</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AppInfo()</span><br><span class="line">            &#123;</span><br><span class="line">                Version = Assembly.GetEntryAssembly()?.GetName().Version?.ToString() ?? <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In the above code, we use <code>Assembly.GetEntryAssembly()?.GetName().Version?.ToString()</code> to get the version number of the project. If the field is null, it will return a default version <code>1.0.0</code>.</p>
<p>Run <code>dotnet run</code> to start the project and navigate to <code>http://localhost:xxxx/api/AppInfo</code>, you will see the output as below:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BuildVersionDemo&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0.0&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>Ok everything is ready for the next step. Let’s look at how to set up the version number.</p>
<h2 id="Set-up-the-version-number-with-dotnet-CLI"><a href="#Set-up-the-version-number-with-dotnet-CLI" class="headerlink" title="Set up the version number with dotnet CLI"></a>Set up the version number with dotnet CLI</h2><p>dotnet CLI provides the <code>dotnet build</code> command to build the project and its dependencies. It can receive a parameter <code>-p</code> to specify the version of the application, as shown below:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet build -p:Version=1.0.1.1</span><br></pre></td></tr></table></figure>

<p>The command will build the project and set the version as 1.0.1.1. Find more information here: <a href="https://docs.microsoft.com/dotnet/core/tools/dotnet-build?WT.mc_id=DT-MVP-5001643">dotnet build</a>.</p>
<p>You can run this command in the working folder and you will see dotnet CLI successfully builds the project. Now let’s navigate to the <strong>bin&#x2F;Debug&#x2F;net6.0</strong> folder, then right-click <strong>BuildVersionDemo.dll</strong> file and select <strong>Properties</strong>. In <strong>Details</strong> tab, you can see the Production version shows <code>1.0.1.1</code>:</p>
<img src="/2022/03/03/increase-the-version-number-in-azure-devOps/image-20220123203910656.png" class="" title="VersionNumber" alt="VersionNumber">

<p>To test it, navigate to the <strong>bin&#x2F;Debug&#x2F;net6.0</strong> folder, then run the command below:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet BuildVersionDemo.dll</span><br></pre></td></tr></table></figure>

<p>Navigate to <code>http://localhost:5000/api/AppInfo</code> and you will see the version number has been updated:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BuildVersionDemo&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.1.1&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>When we make the release, we will need to use <code>dotnet publish</code> command. For more information, check <a href="https://docs.microsoft.com/dotnet/core/tools/dotnet-publish?WT.mc_id=DT-MVP-5001643">dotnet publish</a>. Similarly, we can pass <code>-p</code> parameter as well:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet publish --os win --self-contained <span class="literal">true</span> --configuration Release -p:Version=1.0.1.2</span><br></pre></td></tr></table></figure>

<p>You can find the release files in <strong>bin&#x2F;Release&#x2F;net6.0&#x2F;win-x64&#x2F;publish</strong> folder.</p>
<p>Please note that the <code>--os</code> parameter is available since .NET 6. If you use .NET Core 3.1, you can specify <code>--runtime</code> instead.</p>
<p>So that’s how we set up the version number manually. In the next section, we will check how to build the project in Azure DevOps Pipelines.</p>
<h2 id="Add-a-project-in-Azure-DevOps-Pipelines"><a href="#Add-a-project-in-Azure-DevOps-Pipelines" class="headerlink" title="Add a project in Azure DevOps Pipelines"></a>Add a project in Azure DevOps Pipelines</h2><p>You will need to store your project in Azure DevOps Repos or GitHub repos. Once you complete that, you can continue the next step. I have uploaded my code to this GitHub repo so you can fork it or download the files then upload to your repo: <a href="https://github.com/yanxiaodi/MyCodeSamples/tree/main/BuildVersionDemo">https://github.com/yanxiaodi/MyCodeSamples/tree/main/BuildVersionDemo</a>.</p>
<p>Let’s create a new project in Azure DevOps Pipelines. Log in <a href="https://dev.azure.com/">https://dev.azure.com/</a> then create the <strong>New project</strong> button:</p>
<img src="/2022/03/03/increase-the-version-number-in-azure-devOps/image-20220123212131686.png" class="" title="Create New Project" alt="Create New Project">

<h3 id="Create-your-first-build-pipeline"><a href="#Create-your-first-build-pipeline" class="headerlink" title="Create your first build pipeline"></a>Create your first build pipeline</h3><p>Go to <strong>Pipelines</strong> then create a new pipeline. You will need to select the position of your repo then select the project. I use GitHub repo so it needs authorization:</p>
<img src="/2022/03/03/increase-the-version-number-in-azure-devOps/image-20220123212553988.png" class="" title="authorization" alt="authorization">

<p>It may take a couple of minutes. When the authorization is done, you can choose the pipeline template. For our .NET 6 Web API project, we can select <strong>ASP.NET</strong> template.</p>
<p>Azure DevOps Pipelines will analyze your project and automatically generate a default pipeline for the project. It might vary based on your project. Update the YAML file as below:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">trigger:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">vmImage:</span> <span class="string">&#x27;windows-latest&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">project:</span> <span class="string">&#x27;**/BuildVersionDemo.csproj&#x27;</span></span><br><span class="line">  <span class="attr">buildOS:</span> <span class="string">&#x27;win-x64&#x27;</span></span><br><span class="line">  <span class="attr">buildConfiguration:</span> <span class="string">&#x27;Release&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">UseDotNet@2</span></span><br><span class="line">    <span class="attr">displayName:</span> <span class="string">&#x27;Use .NET 6 sdk&#x27;</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">packageType:</span> <span class="string">sdk</span></span><br><span class="line">      <span class="attr">version:</span> <span class="number">6.0</span><span class="number">.101</span></span><br><span class="line">      <span class="attr">installationPath:</span> <span class="string">$(Agent.ToolsDirectory)/dotnet</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">    <span class="attr">displayName:</span> <span class="string">&#x27;Build&#x27;</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&#x27;build&#x27;</span></span><br><span class="line">      <span class="attr">projects:</span> <span class="string">&#x27;$(project)&#x27;</span></span><br><span class="line">      <span class="attr">arguments:</span> <span class="string">&#x27;-o $(buildOS) --configuration $(BuildConfiguration)&#x27;</span></span><br></pre></td></tr></table></figure>

<p>We defined the branch which can trigger the build, and the build agent system - you may choose Windows or Linux. If you want to use other build agents, check it here: <a href="https://docs.microsoft.com/azure/devops/pipelines/agents/hosted?view=azure-devops&WT.mc_id=DT-MVP-5001643">Microsoft-hosted agents</a>. In the variables section, we have some variables for the <code>project</code> path, <code>buildOS</code> and <code>buildConfiguration</code>. For <code>buildOS</code> field, you may need to build it for other systems, find the code here: <a href="https://docs.microsoft.com/en-us/dotnet/core/rid-catalog?WT.mc_id=DT-MVP-5001643">Runtime Identifier</a>.</p>
<p>The first task is to install the latest .NET 6 SDK. When I write this article, the Azure DevOps pipelines hosted agents have been updated and now contain .NET 5.x SDK&#x2F;Runtime along with the older .NET Core version which are currently LTS. But our project is on .NET 6, so we need to install the .NET 6 SDK first. Otherwise you would see an error:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error NETSDK1045: The current .NET SDK does not support targeting .NET 6.0.  Either target .NET 5.0 or lower, or use a version of the .NET SDK that supports .NET 6.0.</span><br></pre></td></tr></table></figure>

<p>You may need to change the .NET 6 SDK version when you make it. Or you can have <code>6.0.x</code> here.</p>
<p>The next task is to build the project. In the arguments configuration, we will specify the build OS, or you can use <code>--runtime</code> parameter instead. Basically this task is to make sure the project can build successfully.</p>
<p>Save the pipeline and run it then see if it works.</p>
<h3 id="Define-a-version-variable"><a href="#Define-a-version-variable" class="headerlink" title="Define a version variable"></a>Define a version variable</h3><p>We will need to add another task to publish the project to Artifactory. In this step, we will specify the release version number, then we can release it to an Azure WebApp in the future.</p>
<p>I will show you how to define the version number in different ways and you can choose what you prefer.</p>
<p>This publish task is where we need to define the <code>version</code> variable. The basic way is to define it in the YAML file.</p>
<h4 id="Define-a-variable-in-YAML-file"><a href="#Define-a-variable-in-YAML-file" class="headerlink" title="Define a variable in YAML file"></a>Define a variable in YAML file</h4><p>Add a <code>version</code> variable in the <code>variables</code> section of the YAML file:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;1.1.0&#x27;</span></span><br></pre></td></tr></table></figure>

<p>We will use it later.</p>
<h4 id="Define-a-variable-in-Classic-UI"><a href="#Define-a-variable-in-Classic-UI" class="headerlink" title="Define a variable in Classic UI"></a>Define a variable in Classic UI</h4><p>The alternative way to set up a variable is the Classic UI. Click the <strong>Variables</strong> button on the right top corner in the edit page.</p>
<img src="/2022/03/03/increase-the-version-number-in-azure-devOps/image-20220123224036034.png" class="">

<img src="/2022/03/03/increase-the-version-number-in-azure-devOps/image-20220123224130035.png" class="">

<p>You can find more information here: <a href="https://docs.microsoft.com/azure/devops/pipelines/get-started/yaml-pipeline-editor?view=azure-devops&WT.mc_id=DT-MVP-5001643#manage-pipeline-variables">Manage pipeline variables</a>.</p>
<h4 id="Define-a-variable-in-variable-groups"><a href="#Define-a-variable-in-variable-groups" class="headerlink" title="Define a variable in variable groups"></a>Define a variable in variable groups</h4><p>Another way is to define it in <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups?view=azure-devops&WT.mc_id=DT-MVP-5001643">variable groups</a>. But normally variable groups are used to make variables available across multiple pipelines so it is not really for this case. You can find my another article for using variable groups to inject configurations to different environments: <a href="https://faun.pub/using-azure-devops-pipelines-to-inject-configurations-when-deploying-asp-net-fc34e77a4a70">Using Azure DevOps Pipelines to inject configurations when deploying ASP.NET Core App to Linux host</a>.</p>
<p>You can use either way. Defining variables in the YAML file is recommended because this allows you to track changes to the variable in your version control system.</p>
<h3 id="Add-a-publish-task"><a href="#Add-a-publish-task" class="headerlink" title="Add a publish task"></a>Add a publish task</h3><p>Add a task in the YAML file pipeline:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Publish&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;publish&#x27;</span></span><br><span class="line">    <span class="attr">projects:</span> <span class="string">&#x27;$&#123;project&#125;&#x27;</span></span><br><span class="line">    <span class="attr">arguments:</span> <span class="string">&#x27;-o $(buildOS) --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(version)&#x27;</span></span><br></pre></td></tr></table></figure>

<p>In this task, we specify the output folder as <code>$(Build.ArtifactStagingDirectory)</code>, which is a pre-defined variable in Azure DevOps. You can find more available variables here: <a href="https://docs.microsoft.com/azure/devops/pipelines/build/variables?view=azure-devops&WT.mc_id=DT-MVP-5001643">Use predefined variables</a>. We also use <code>$(version)</code> to refer the <code>version</code> variable. This is called <strong>Macro syntax variable</strong>, and you can only use it for <code>stages</code>, <code>jobs</code>, and <code>steps</code>. They are not available in <code>resource</code> or <code>trigger</code>. For more information, please check <a href="https://docs.microsoft.com/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml,batch&WT.mc_id=DT-MVP-5001643#understand-variable-syntax">Understand variable syntax</a>.</p>
<p>Next we will need to publish the build artifacts. Add a task as below:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">PublishBuildArtifacts@1</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Publish Artifacts&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">PathtoPublish:</span> <span class="string">&#x27;$(Build.ArtifactStagingDirectory)&#x27;</span></span><br><span class="line">    <span class="attr">ArtifactName:</span> <span class="string">&#x27;drop&#x27;</span></span><br><span class="line">    <span class="attr">publishLocation:</span> <span class="string">&#x27;Container&#x27;</span></span><br></pre></td></tr></table></figure>

<p>If you already created the <code>version</code> variable, you can click <strong>Save and run</strong> button to run the pipeline.</p>
<p>The full YAML file is shown as below:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">trigger:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">vmImage:</span> <span class="string">&#x27;windows-latest&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">project:</span> <span class="string">&#x27;**/BuildVersionDemo.csproj&#x27;</span></span><br><span class="line">  <span class="attr">buildOS:</span> <span class="string">&#x27;win-x64&#x27;</span></span><br><span class="line">  <span class="attr">buildConfiguration:</span> <span class="string">&#x27;Release&#x27;</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">&#x27;1.1.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">UseDotNet@2</span></span><br><span class="line">    <span class="attr">displayName:</span> <span class="string">&#x27;Use .NET 6 sdk&#x27;</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">packageType:</span> <span class="string">sdk</span></span><br><span class="line">      <span class="attr">version:</span> <span class="number">6.0</span><span class="number">.101</span></span><br><span class="line">      <span class="attr">installationPath:</span> <span class="string">$(Agent.ToolsDirectory)/dotnet</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">    <span class="attr">displayName:</span> <span class="string">&#x27;Build&#x27;</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&#x27;build&#x27;</span></span><br><span class="line">      <span class="attr">projects:</span> <span class="string">&#x27;$(project)&#x27;</span></span><br><span class="line">      <span class="attr">arguments:</span> <span class="string">&#x27;-o $(buildOS) --configuration $(BuildConfiguration)&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">    <span class="attr">displayName:</span> <span class="string">&#x27;Publish&#x27;</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&#x27;publish&#x27;</span></span><br><span class="line">      <span class="attr">projects:</span> <span class="string">&#x27;$&#123;project&#125;&#x27;</span></span><br><span class="line">      <span class="attr">arguments:</span> <span class="string">&#x27;-o $(buildOS) --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(version)&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">PublishBuildArtifacts@1</span></span><br><span class="line">    <span class="attr">displayName:</span> <span class="string">&#x27;Publish Artifacts&#x27;</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">PathtoPublish:</span> <span class="string">&#x27;$(Build.ArtifactStagingDirectory)&#x27;</span></span><br><span class="line">      <span class="attr">ArtifactName:</span> <span class="string">&#x27;drop&#x27;</span></span><br><span class="line">      <span class="attr">publishLocation:</span> <span class="string">&#x27;Container&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="Check-the-artifacts"><a href="#Check-the-artifacts" class="headerlink" title="Check the artifacts"></a>Check the artifacts</h3><p>Once the pipeline runs successfully, you can download the artifacts here:</p>
<img src="/2022/03/03/increase-the-version-number-in-azure-devOps/image-20220123233413757.png" class="" title="artifacts" alt="artifacts">

<p>Check the properties of the dll files and see if the version number is correct.</p>
<h2 id="Extract-the-version-number-into-a-separate-YAML-file"><a href="#Extract-the-version-number-into-a-separate-YAML-file" class="headerlink" title="Extract the version number into a separate YAML file"></a>Extract the version number into a separate YAML file</h2><p>It works well so far. But the next question is - what should we do if we want to update the version number?</p>
<p>When we defined the <code>version</code> variable, it is actually stored in the same pipeline YAML file. If we want to update the version number for the next build, we must edit the pipeline definition directly (or enter the edit page of the pipeline if you use the classic UI), then update the value. It is not ideal to maintain it because we don’t want to change the pipelines often.</p>
<p>In this section, I will show you how to achieve <strong>version number as code</strong>.</p>
<p>To do this, we should not define the version variable in the build pipeline YAML file. Instead, we will need to create a separate file to store the version number, then read it in the build pipeline YAML file. When we want to update the version number, we just need to update the version number file, and no need to touch the build pipeline YAML file anymore. In the version number file, we will follow the semantic versioning - define the major, minor and patch numbers only, and the pipeline will generate the last revision number automatically.</p>
<h4 id="Create-a-separate-file-for-version-number"><a href="#Create-a-separate-file-for-version-number" class="headerlink" title="Create a separate file for version number"></a>Create a separate file for version number</h4><p>Next, let’s create a new file called <strong>app-variables.yml</strong> file in the root folder. Now your root folder should have two YAML files: <strong>azure-pipelines.yml</strong>, which is created by Azure DevOps; and <strong>app-variables.yml</strong>.</p>
<p>Edit the <strong>app-variables.yml</strong> file as below:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">versionMajorMinorPatch:</span> <span class="number">1.2</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>

<h4 id="Read-the-variable-and-use-it-in-the-pipeline"><a href="#Read-the-variable-and-use-it-in-the-pipeline" class="headerlink" title="Read the variable and use it in the pipeline"></a>Read the variable and use it in the pipeline</h4><p>Next we need to read this variable in the original pipeline YAML file. Update the file as the following code:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">trigger:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">vmImage:</span> <span class="string">&#x27;windows-latest&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">project</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&#x27;**/BuildVersionDemo.csproj&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">buildOS</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&#x27;win-x64&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">buildConfiguration</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&#x27;Release&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">template:</span> <span class="string">app-version.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="comment">###</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">    <span class="attr">displayName:</span> <span class="string">&#x27;Publish&#x27;</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&#x27;publish&#x27;</span></span><br><span class="line">      <span class="attr">projects:</span> <span class="string">&#x27;$&#123;project&#125;&#x27;</span></span><br><span class="line">      <span class="attr">arguments:</span> <span class="string">&#x27;-o $(buildOS) --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$<span class="template-variable">&#123;&#123;variables.versionMajorMinorPatch&#125;&#125;</span>&#x27;</span></span><br><span class="line"><span class="comment">###</span></span><br></pre></td></tr></table></figure>

<p>Note that the change for the variables. We added a <code>template</code> field to refer the <strong>app-version.yml</strong> file, and use <code>$&#123;&#123;variables.versionMajorMinorPatch&#125;&#125;</code> to read the value defined in the template. This is a <strong>template expression</strong>, which is different with <strong>macro syntax</strong> we mentioned before. For more explanation, please check <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml,batch&WT.mc_id=DT-MVP-5001643#runtime-expression-syntax">Runtime expression syntax</a> and <a href="https://docs.microsoft.com/azure/devops/pipelines/process/templates?view=azure-devops&WT.mc_id=DT-MVP-5001643#variable-reuse">Variable reuse</a>.</p>
<p>Ok now you should be able to build the project again and see if the published files have been updated to the new version number you defined in the separate YAML file. Next time if you need to change the version number, then just update the <strong>app-version.yml</strong> only, and no need to touch the <strong>azure-pipelines.yml</strong> file anymore.</p>
<h2 id="Increase-the-revision-number"><a href="#Increase-the-revision-number" class="headerlink" title="Increase the revision number"></a>Increase the revision number</h2><p>The next step is to automatically increase the revision number by the pipeline. So we can see different revision number based on the build number for each build&#x2F;release. For example, when the version is 1.1.0, every time the pipeline runs, it will increase a revision number in sequence, e.g. 1.1.0.0, 1.1.0.1… and so on.</p>
<p>We can use expressions to calculate the revision number. Update the YAML file as below:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">trigger:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">vmImage:</span> <span class="string">&#x27;windows-latest&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">project</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&#x27;**/BuildVersionDemo.csproj&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">buildOS</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&#x27;win-x64&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">buildConfiguration</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&#x27;Release&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">template:</span> <span class="string">app-version.yml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">versionRevision</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">$[counter($&#123;&#123;variables.versionMajorMinorPatch&#125;&#125;,</span> <span class="number">0</span><span class="string">)]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="comment">###</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">    <span class="attr">displayName:</span> <span class="string">&#x27;Publish&#x27;</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&#x27;publish&#x27;</span></span><br><span class="line">      <span class="attr">projects:</span> <span class="string">&#x27;$&#123;project&#125;&#x27;</span></span><br><span class="line">      <span class="attr">arguments:</span> <span class="string">&#x27;-o $(buildOS) --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$<span class="template-variable">&#123;&#123;variables.versionMajorMinorPatch&#125;&#125;</span>.$(versionRevision)&#x27;</span></span><br><span class="line"><span class="comment">###</span></span><br></pre></td></tr></table></figure>

<p>We added a new variable called <code>versionRevision</code> with the value <code>$[counter($&#123;&#123;variables.versionMajorMinorPatch&#125;&#125;, 0)]</code>. It uses <code>counter</code> function to evaluate a number that is incremented with each run of a pipeline. There are two parameters for this function: <code>prefix</code> and <code>seed</code>. For this case, the value of <code>versionRevision</code> will be 0 in the first run of the pipeline. If the value of <code>versionMajorMinorPatch</code> does not change, in the second run it will be 1. For more information about <code>counter</code> function, check <a href="https://docs.microsoft.com/azure/devops/pipelines/process/expressions?view=azure-devops&WT.mc_id=DT-MVP-5001643#counter">Expressions - counter</a>.</p>
<p>If you edit the <strong>app-version.yml</strong> file and update the value of <code>versionMajorMinorPatch</code> to be a new value, then in the next run of the pipeline, the value of <code>versionRevision</code> will be 0. Subsequent runs will increment the counter to 1, 2, 3, …</p>
<p>Let’s change the version as 1.2.1 in the <strong>app-version.yml</strong> file and push it. You will see the build log as below:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\hostedtoolcache\windows\dotnet\dotnet.exe publish D:\a\1\s\BuildVersionDemo\BuildVersionDemo.csproj -o win-x64 --configuration Release --output D:\a\1\a\BuildVersionDemo /p:Version=1.2.1.0</span><br></pre></td></tr></table></figure>

<p>Now let’s run the pipeline again. You will see the revision number will increase to 1 so the version would be 1.2.1.1.</p>
<img src="/2022/03/03/increase-the-version-number-in-azure-devOps/image-20220124160055283.png" class="" title="New Version Number" alt="New Version Number">

<p>If you change the version as 1.2.2 in the <strong>app-version.yml</strong> file and push it, you will see the counter will be reset to 0, which is exact what we want.</p>
<p>The benefit of this way is we have the version number in a separate file, which can be managed by the source control system. So you don’t have to edit the version number in Azure DevOps UI or in the pipeline file, which is less risky. Also the pipeline can automatically increase the revision number based on the main version number. That is how we manage <strong>version number as code</strong>.</p>
<p>The full YAML file is shown below. You can easily customize it for your requirements.</p>
<p><strong>app-version.yml</strong>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">versionMajorMinorPatch:</span> <span class="number">1.2</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>

<p><strong>azure-pipelines.yml</strong>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ASP.NET</span></span><br><span class="line"><span class="comment"># Build and test ASP.NET projects.</span></span><br><span class="line"><span class="comment"># Add steps that publish symbols, save build artifacts, deploy, and more:</span></span><br><span class="line"><span class="comment"># https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4</span></span><br><span class="line"></span><br><span class="line"><span class="attr">trigger:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">vmImage:</span> <span class="string">&#x27;windows-latest&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">project</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&#x27;**/BuildVersionDemo.csproj&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">buildOS</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&#x27;win-x64&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">buildConfiguration</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&#x27;Release&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">template:</span> <span class="string">app-version.yml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">versionRevision</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">$[counter($&#123;&#123;variables.versionMajorMinorPatch&#125;&#125;,</span> <span class="number">0</span><span class="string">)]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">UseDotNet@2</span></span><br><span class="line">    <span class="attr">displayName:</span> <span class="string">&#x27;Use .NET 6 sdk&#x27;</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">packageType:</span> <span class="string">sdk</span></span><br><span class="line">      <span class="attr">version:</span> <span class="number">6.0</span><span class="number">.101</span></span><br><span class="line">      <span class="attr">installationPath:</span> <span class="string">$(Agent.ToolsDirectory)/dotnet</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">    <span class="attr">displayName:</span> <span class="string">&#x27;Build&#x27;</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&#x27;build&#x27;</span></span><br><span class="line">      <span class="attr">projects:</span> <span class="string">&#x27;$(project)&#x27;</span></span><br><span class="line">      <span class="attr">arguments:</span> <span class="string">&#x27;-o $(buildOS) --configuration $(BuildConfiguration)&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">    <span class="attr">displayName:</span> <span class="string">&#x27;Publish&#x27;</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&#x27;publish&#x27;</span></span><br><span class="line">      <span class="attr">projects:</span> <span class="string">&#x27;$&#123;project&#125;&#x27;</span></span><br><span class="line">      <span class="attr">arguments:</span> <span class="string">&#x27;-o $(buildOS) --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$<span class="template-variable">&#123;&#123;variables.versionMajorMinorPatch&#125;&#125;</span>.$(versionRevision)&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">PublishBuildArtifacts@1</span></span><br><span class="line">    <span class="attr">displayName:</span> <span class="string">&#x27;Publish Artifacts&#x27;</span></span><br><span class="line">    <span class="attr">inputs:</span></span><br><span class="line">      <span class="attr">PathtoPublish:</span> <span class="string">&#x27;$(Build.ArtifactStagingDirectory)&#x27;</span></span><br><span class="line">      <span class="attr">ArtifactName:</span> <span class="string">&#x27;drop&#x27;</span></span><br><span class="line">      <span class="attr">publishLocation:</span> <span class="string">&#x27;Container&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="An-alternative-approach"><a href="#An-alternative-approach" class="headerlink" title="An alternative approach"></a>An alternative approach</h2><p>Sometime you may have more complex requirements for these variables. You can use scripts to generate output variables and pass them to the next job&#x2F;task. Find more information about Azure DevOps Pipelines variables: <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/set-variables-scripts?view=azure-devops&WT.mc_id=DT-MVP-5001643">Set variables in scripts</a>.</p>
<p>Here is another example to read version numbers and pass it to the next job:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ASP.NET</span></span><br><span class="line"><span class="comment"># Build and test ASP.NET projects.</span></span><br><span class="line"><span class="comment"># Add steps that publish symbols, save build artifacts, deploy, and more:</span></span><br><span class="line"><span class="comment"># https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4</span></span><br><span class="line"></span><br><span class="line"><span class="attr">trigger:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job:</span> <span class="string">ReadVariables</span></span><br><span class="line">    <span class="attr">pool:</span></span><br><span class="line">      <span class="attr">vmImage:</span> <span class="string">&#x27;windows-latest&#x27;</span></span><br><span class="line">    <span class="attr">variables:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">template:</span> <span class="string">app-version.yml</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">powershell:</span> <span class="string">echo</span> <span class="string">&quot;##vso[task.setvariable variable=versionMajorMinorPatch;isOutput=true]$<span class="template-variable">&#123;&#123;variables.versionMajorMinorPatch&#125;&#125;</span>&quot;</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">setvarStep</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">script:</span> <span class="string">echo</span> <span class="string">$(setvarStep.versionMajorMinorPatch)</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">echovar</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job:</span> <span class="string">BuildAndPublish</span></span><br><span class="line">    <span class="attr">dependsOn:</span> <span class="string">ReadVariables</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">pool:</span></span><br><span class="line">      <span class="attr">vmImage:</span> <span class="string">&#x27;windows-latest&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">variables:</span></span><br><span class="line">      <span class="attr">project:</span> <span class="string">&#x27;**/BuildVersionDemo.csproj&#x27;</span></span><br><span class="line">      <span class="attr">buildOS:</span> <span class="string">&#x27;win-x64&#x27;</span></span><br><span class="line">      <span class="attr">buildConfiguration:</span> <span class="string">&#x27;Release&#x27;</span></span><br><span class="line">      <span class="attr">versionMajorMinorPatch:</span> <span class="string">$[dependencies.ReadVariables.outputs[&#x27;setvarStep.versionMajorMinorPatch&#x27;]]</span></span><br><span class="line">      <span class="attr">versionRevision:</span> <span class="string">$[counter(variables[&#x27;versionMajorMinorPatch&#x27;],</span> <span class="number">0</span><span class="string">)]</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">UseDotNet@2</span></span><br><span class="line">        <span class="attr">displayName:</span> <span class="string">&#x27;Use .NET 6 sdk&#x27;</span></span><br><span class="line">        <span class="attr">inputs:</span></span><br><span class="line">          <span class="attr">packageType:</span> <span class="string">sdk</span></span><br><span class="line">          <span class="attr">version:</span> <span class="number">6.0</span><span class="number">.101</span></span><br><span class="line">          <span class="attr">installationPath:</span> <span class="string">$(Agent.ToolsDirectory)/dotnet</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">        <span class="attr">displayName:</span> <span class="string">&#x27;Build&#x27;</span></span><br><span class="line">        <span class="attr">inputs:</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">&#x27;build&#x27;</span></span><br><span class="line">          <span class="attr">projects:</span> <span class="string">&#x27;$(project)&#x27;</span></span><br><span class="line">          <span class="attr">arguments:</span> <span class="string">&#x27;-o $(buildOS) --configuration $(BuildConfiguration)&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">        <span class="attr">displayName:</span> <span class="string">&#x27;Publish&#x27;</span></span><br><span class="line">        <span class="attr">inputs:</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">&#x27;publish&#x27;</span></span><br><span class="line">          <span class="attr">projects:</span> <span class="string">&#x27;$&#123;project&#125;&#x27;</span></span><br><span class="line">          <span class="attr">arguments:</span> <span class="string">&#x27;-o $(buildOS) --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(versionMajorMinorPatch).$(versionRevision)&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">PublishBuildArtifacts@1</span></span><br><span class="line">        <span class="attr">displayName:</span> <span class="string">&#x27;Publish Artifacts&#x27;</span></span><br><span class="line">        <span class="attr">inputs:</span></span><br><span class="line">          <span class="attr">PathtoPublish:</span> <span class="string">&#x27;$(Build.ArtifactStagingDirectory)&#x27;</span></span><br><span class="line">          <span class="attr">ArtifactName:</span> <span class="string">&#x27;drop&#x27;</span></span><br><span class="line">          <span class="attr">publishLocation:</span> <span class="string">&#x27;Container&#x27;</span></span><br></pre></td></tr></table></figure>

<p>This pipeline adds another job to read the variables then sets the variables in the scripts. It allows you to have more capabilities to control these variables, or you want to do something that isn’t supported by the default tasks. You need to use <code>task.setvariable</code> command in the scripts. For more information, see <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/set-variables-scripts?view=azure-devops&WT.mc_id=DT-MVP-5001643">Set variables in scripts</a>.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>This article won’t cover the release&#x2F;deployment. You can create a new release pipeline for your application. Because when we publish the artifact, the correct version number has been applied so once your Web API is ready, the client can get the correct version number through the endpoint. You can find a bunch of resources from Microsoft Doc: <a href="https://docs.microsoft.com/azure/devops/pipelines/?view=azure-devops&WT.mc_id=DT-MVP-5001643">Azure Pipelines</a>.</p>
<p>In this article, we learned how to have a separate file to store the version numbers. You can have any other variables in this file and include it in the main pipeline YAML file. You can also read the variable directly or have a script for more complex tasks. With this way, the version number is easily maintained in a separate file so we can manage it as code.</p>
<p>Some important documents are already listed in the article. Hope this is helpful for your Azure DevOps journey.</p>
<p>Thanks for reading!</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Auzre</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Mapping the same model to multiple tables with EntityFramework.Core</title>
    <url>/2020/04/02/mapping-the-model-to-multiple-tables-with-entityFramework-core/</url>
    <content><![CDATA[<p>With EntityFramework Core, we can use attributes or Fluent API to config the model mappings. One day I just got a scenario that needs a new mapping style. There is a system that generates lots of data every day and it needs to store the data per table per day. For example, the database looks like:</p>
<span id="more"></span>

<img src="/2020/04/02/mapping-the-model-to-multiple-tables-with-entityFramework-core/image-20200327134733340.png" class="" title="Database" alt="Database">

<p>All the tables have the same structure. So how could we change the mapping to avoid creating lots of models?</p>
<p>In this article, I will show you how to change the mapping to handle this situation. You can also use this method to extend more usages.</p>
<h2 id="Creating-the-NET-Core-3-1-project"><a href="#Creating-the-NET-Core-3-1-project" class="headerlink" title="Creating the .NET Core 3.1 project"></a>Creating the .NET Core 3.1 project</h2><p>Now we can use .NET Core 3.1 which is an LTS version of .NET Core. So that you can easily upgrade it to .NET 5 in the future.</p>
<p>I suppose you already have the latest .NET Core SDK installed on your machine. If not, you can download it from <a href="https://dotnet.microsoft.com/download">https://dotnet.microsoft.com/download</a>. Then you can use dotnet CLI to create projects. For this sample, I will use .NET Core 3.1. </p>
<p>Let create a new .NET Core Console project named <code>DynamicModelDemo</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet new console --name DynamicModelDemo</span><br></pre></td></tr></table></figure>

<p>We can create a solution by using this command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet new sln --name DynamicModelDemo</span><br></pre></td></tr></table></figure>

<p>Then add the project to the solution:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet sln add <span class="string">&quot;DynamicModelDemo/DynamicModelDemo.csproj&quot;</span></span><br></pre></td></tr></table></figure>

<p>Now you can open the solution by Visual Studio.</p>
<h2 id="Creating-the-model"><a href="#Creating-the-model" class="headerlink" title="Creating the model"></a>Creating the model</h2><p>The model is very simple. Add a new class file named <code>ConfigurableEntity.cs</code> in the project that has the code below:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DynamicModelDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConfigurableEntity</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Content &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> DateTime CreateDateTime &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>We will use <code>CreateDateTime</code> to identify which table the model should be mapped to.</p>
<h2 id="Adding-EntityFramework-Core"><a href="#Adding-EntityFramework-Core" class="headerlink" title="Adding EntityFramework Core"></a>Adding EntityFramework Core</h2><p>Navigate to the project folder then use the command below to add the EF.Core package:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package Microsoft.EntityFrameworkCore.SqlSever</span><br><span class="line">dotnet add package Microsoft.EntityFrameworkCore.Design</span><br></pre></td></tr></table></figure>

<p>If you have not installed ef tool for dotnet core, run the command below to install it:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet tool install --global dotnet-ef</span><br></pre></td></tr></table></figure>

<p>So that you can use the dotnet ef tool to create migrations or update the database by applying the migrations.</p>
<h2 id="Creating-the-DbContext"><a href="#Creating-the-DbContext" class="headerlink" title="Creating the DbContext"></a>Creating the DbContext</h2><p>Add a new class file named <code>DynamicContext.cs</code> to the project. The content is shown below:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">using Microsoft.EntityFrameworkCore;</span><br><span class="line">using Microsoft.EntityFrameworkCore.Infrastructure;</span><br><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace DynamicModelDemo</span><br><span class="line">&#123;</span><br><span class="line">    public class DynamicContext : DbContext</span><br><span class="line">    &#123;</span><br><span class="line">        public DbSet&lt;ConfigurableEntity&gt; Entities &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#region OnConfiguring</span></span><br><span class="line">        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)</span><br><span class="line">            =&gt; optionsBuilder</span><br><span class="line">                .UseSqlServer(<span class="string">&quot;Server=(localdb)\\mssqllocaldb;Database=DynamicContext;Trusted_Connection=True;&quot;</span>);</span><br><span class="line">        <span class="comment">#endregion</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#region OnModelCreating</span></span><br><span class="line">        protected override void OnModelCreating(ModelBuilder modelBuilder)</span><br><span class="line">        &#123;</span><br><span class="line">            modelBuilder.Entity&lt;ConfigurableEntity&gt;(b =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                b.HasKey(p =&gt; p.Id);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#endregion</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>For now, it is the basic configuration for EF.Core. It uses the default mapping which means the model will be mapped to a table named <code>Entities</code>. So what we should do if we want to map the models to different tables based on its <code>CreateDateTime</code> property?</p>
<p>You might know we can use <code>ToTable()</code> method to change the table name, but how can we change the table name in <code>OnModelCreating</code> method? When EF builds the model, it only runs <code>OnModelCreating</code> once.</p>
<p>For this scenario, we need to change the default mapping by using <code>IModelCacheKeyFactory</code>, which allow us to hook into the model caching mechanism so EF is able to create different models based on its property.</p>
<h2 id="What-is-IModelCacheKeyFactory"><a href="#What-is-IModelCacheKeyFactory" class="headerlink" title="What is IModelCacheKeyFactory?"></a>What is <code>IModelCacheKeyFactory</code>?</h2><p>Here is the introduction from the Microsoft Docs:</p>
<blockquote>
<p>EF uses <code>IModelCacheKeyFactory</code> to generate cache keys for models. </p>
</blockquote>
<p>By default, EF assumes that for any given context type, the model will be the same. But for our scenario, the model would be different because it is mapped to different tables. So we need to replace the <code>IModelCacheKeyFactory</code> service with our implementation which compares the cache keys to map the model to the correct table.</p>
<p>Please note that this interface is typically used by database provider and other extensions, not used in application code. But for our goal, it is a feasible approach.</p>
<h2 id="Creating-an-implementation-of-IModelCacheKeyFactory"><a href="#Creating-an-implementation-of-IModelCacheKeyFactory" class="headerlink" title="Creating an implementation of IModelCacheKeyFactory"></a>Creating an implementation of <code>IModelCacheKeyFactory</code></h2><p>We need to use the <code>CreateDateTime</code> to difference the tables. Add a property in the <code>DynamicContext</code> class:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> DateTime CreateDateTime &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure>

<p>Add a new class file named <code>DynamicModelCacheKeyFactory.cs</code> in the project. The code is shown below:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore.Infrastructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DynamicModelDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DynamicModelCacheKeyFactory</span> : <span class="title">IModelCacheKeyFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Create</span>(<span class="params">DbContext context</span>)</span></span><br><span class="line">            =&gt; context <span class="keyword">is</span> DynamicContext dynamicContext</span><br><span class="line">                ? (context.GetType(), dynamicContext.CreateDateTime)</span><br><span class="line">                : (<span class="built_in">object</span>)context.GetType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This implementation takes the <code>CreateDateTime</code> property into account when producing a model cache key.</p>
<h2 id="Applying-the-new-IModelCacheKeyFactory"><a href="#Applying-the-new-IModelCacheKeyFactory" class="headerlink" title="Applying the new IModelCacheKeyFactory"></a>Applying the new <code>IModelCacheKeyFactory</code></h2><p>Next, we can register the new <code>IModelCacheKeyFactory</code> in the context:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> OnConfiguring</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnConfiguring</span>(<span class="params">DbContextOptionsBuilder optionsBuilder</span>)</span></span><br><span class="line">    =&gt; optionsBuilder</span><br><span class="line">        .UseSqlServer(<span class="string">&quot;Server=(localdb)\\mssqllocaldb;Database=DynamicContext;Trusted_Connection=True;&quot;</span>)</span><br><span class="line">        .ReplaceService&lt;IModelCacheKeyFactory, DynamicModelCacheKeyFactory&gt;();</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure>

<p>So that we can map the table names respectively in <code>OnModelCreating</code> method:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> OnModelCreating</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">ModelBuilder modelBuilder</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    modelBuilder.Entity&lt;ConfigurableEntity&gt;(b =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        b.ToTable(CreateDateTime.ToString(<span class="string">&quot;yyyyMMdd&quot;</span>));</span><br><span class="line">        b.HasKey(p =&gt; p.Id);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure>

<p>The <code>CreateDateTime</code> comes from the property of <code>DynamicContext</code>.</p>
<p>We can specify the &#96;&#96;CreateDateTime<code>property when creating</code>DynamicContext&#96;:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> context = <span class="keyword">new</span> DynamicContext &#123; CreateDateTime = datetime &#125;;</span><br></pre></td></tr></table></figure>

<p>If <code>datetime</code> is “27&#x2F;03&#x2F;2020”, the model of <code>context</code> would be mapped to the table named “20200327”.</p>
<h2 id="Creating-the-database"><a href="#Creating-the-database" class="headerlink" title="Creating the database"></a>Creating the database</h2><p>Before we validate our code, we need to create the database first. However, EF migration is not the best solution for this situation as the system will generate more tables as time goes by. We just use it to create some sample tables to validate the mapping. Actually the system should have another way to dynamically generates the tables every day.</p>
<p>Run the below command to create the first migration:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet ef migrations add InitialCreate</span><br></pre></td></tr></table></figure>

<p>You would see there are two files generated in the <code>Migrations</code> folder. Open the <code>xxx_InitialCreate.cs</code> file and update the <code>Up</code> method by the following code:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Up</span>(<span class="params">MigrationBuilder migrationBuilder</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> index = i;</span><br><span class="line">        migrationBuilder.CreateTable(</span><br><span class="line">            name: DateTime.Now.AddDays(-index).ToString(<span class="string">&quot;yyyyMMdd&quot;</span>),</span><br><span class="line">            columns: table =&gt; <span class="keyword">new</span></span><br><span class="line">            &#123;</span><br><span class="line">                Id = table.Column&lt;<span class="built_in">int</span>&gt;(nullable: <span class="literal">false</span>)</span><br><span class="line">                    .Annotation(<span class="string">&quot;SqlServer:Identity&quot;</span>, <span class="string">&quot;1, 1&quot;</span>),</span><br><span class="line">                Title = table.Column&lt;<span class="built_in">string</span>&gt;(nullable: <span class="literal">true</span>),</span><br><span class="line">                Content = table.Column&lt;<span class="built_in">string</span>&gt;(nullable: <span class="literal">true</span>),</span><br><span class="line">                CreateDateTime = table.Column&lt;DateTime&gt;(nullable: <span class="literal">false</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            constraints: table =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                table.PrimaryKey(<span class="string">$&quot;PK_<span class="subst">&#123;DateTime.Now.AddDays(-index):yyyyMMdd&#125;</span>&quot;</span>, x =&gt; x.Id);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The change is to make sure we could have enough tables in the database for testing. Please note that we should not use this in production.</p>
<p>Next we can use this command to create and update the database:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet ef database update</span><br></pre></td></tr></table></figure>

<p>You would see it generates some tables for the last 30 days in the database.</p>
<h2 id="Validating-the-mapping"><a href="#Validating-the-mapping" class="headerlink" title="Validating the mapping"></a>Validating the mapping</h2><p>Now it is the time to validate the new mapping. Update the <code>Main</code> method in <code>Program.cs</code> by the following code:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DateTime datetime1 = DateTime.Now;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> context = <span class="keyword">new</span> DynamicContext &#123; CreateDateTime = datetime1 &#125;)</span><br><span class="line">    &#123;</span><br><span class="line">        context.Entities.Add(<span class="keyword">new</span> ConfigurableEntity &#123; Title = <span class="string">&quot;Great News One&quot;</span>, Content = <span class="string">$&quot;Hello World! I am the news of <span class="subst">&#123;datetime1&#125;</span>&quot;</span>, CreateDateTime = datetime1 &#125;);</span><br><span class="line">        context.SaveChanges();</span><br><span class="line">    &#125;</span><br><span class="line">    DateTime datetime2 = DateTime.Now.AddDays(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> context = <span class="keyword">new</span> DynamicContext &#123; CreateDateTime = datetime2 &#125;)</span><br><span class="line">    &#123;</span><br><span class="line">        context.Entities.Add(<span class="keyword">new</span> ConfigurableEntity &#123; Title = <span class="string">&quot;Great News Two&quot;</span>, Content = <span class="string">$&quot;Hello World! I am the news of <span class="subst">&#123;datetime2&#125;</span>&quot;</span>, CreateDateTime = datetime2 &#125;);</span><br><span class="line">        context.SaveChanges();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> context = <span class="keyword">new</span> DynamicContext &#123; CreateDateTime = datetime1 &#125;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> entity = context.Entities.Single();</span><br><span class="line">        <span class="comment">// Writes news of today</span></span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;entity.Title&#125;</span> <span class="subst">&#123;entity.Content&#125;</span> <span class="subst">&#123;entity.CreateDateTime&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> context = <span class="keyword">new</span> DynamicContext &#123; CreateDateTime = datetime2 &#125;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> entity = context.Entities.Single();</span><br><span class="line">        <span class="comment">// Writes news of yesterday</span></span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;entity.Title&#125;</span> <span class="subst">&#123;entity.Content&#125;</span> <span class="subst">&#123;entity.CreateDateTime&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You would see the output like this:</p>
<img src="/2020/04/02/mapping-the-model-to-multiple-tables-with-entityFramework-core/image-20200327165529334.png" class="" title="Output" alt="Output">

<p>All done! Now we can use the same <code>DbContext</code> to represent different models by passing the <code>CreateDateTime</code> property.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>This demo is to demonstrate how to use <code>IModelCacheKeyFactory</code> to change the default model mapping. Please note that you still need to implement the method to generate the tables respectively. The hosted service is one way to do it. For more information, please visit <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-3.1&tabs=visual-studio">Background tasks in ASP.NET Core</a>.</p>
]]></content>
      <categories>
        <category>.NET Core</category>
      </categories>
      <tags>
        <tag>.NET</tag>
        <tag>.NETCore</tag>
        <tag>ASP.NETCore</tag>
        <tag>EntityFramework.Core</tag>
        <tag>EF.Core</tag>
        <tag>EF</tag>
      </tags>
  </entry>
  <entry>
    <title>My tips for .NET code-review</title>
    <url>/2020/10/19/my-tips-for-dot-net-code-review/</url>
    <content><![CDATA[<p>Code-review is important in our daily development. Some developers may spend lots of time on learning new features of the languages, DDD, distributed system or some fancy stuff but the first thing we should keep in mind is we need to write the robust, maintainable code. Here are some tips from my recent code-review and I hope it would be helpful for you.</p>
<span id="more"></span>

<h2 id="NullReferenceException-series"><a href="#NullReferenceException-series" class="headerlink" title="NullReferenceException series"></a>NullReferenceException series</h2><p>The <code>NullReferenceException</code> is really annoying. The best way to avoid it is to check if the variable is null before you use it. Here are some potential issues. I also include other exceptions such as <code>ArgumentNullException</code> here.</p>
<h3 id="Always-initialize-the-collection-when-you-declare-it"><a href="#Always-initialize-the-collection-when-you-declare-it" class="headerlink" title="Always initialize the collection when you declare it"></a>Always initialize the collection when you declare it</h3><p>One common error is sometimes we declared a collection but did not initialize it before using it. Like this:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">List&lt;Person&gt; persons;</span><br><span class="line"><span class="comment">// Some logics</span></span><br><span class="line"><span class="comment">// If you use persons directly you may got a null object</span></span><br></pre></td></tr></table></figure>

<p>So the better way is to always initialize the collection when we declare it:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">List&lt;Person&gt; persons = <span class="keyword">new</span> List&lt;Persons&gt;();</span><br><span class="line"><span class="comment">// Then you can do something as usual</span></span><br></pre></td></tr></table></figure>

<p>Especially if we have a property which has its own private field:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// It is good to initialize the private field when we declare it.</span></span><br><span class="line"><span class="keyword">private</span> ObservableCollection&lt;Person&gt; _personList = <span class="keyword">new</span> ObservableCollection&lt;Person&gt;();</span><br><span class="line"><span class="keyword">public</span> ObservableCollection&lt;Person&gt; PersonList</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">get</span> =&gt; _personList;</span><br><span class="line">     <span class="keyword">set</span> =&gt; SetProperty(<span class="keyword">ref</span> _personList, <span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="DO-NOT-return-null-values-from-methods-returning-collections"><a href="#DO-NOT-return-null-values-from-methods-returning-collections" class="headerlink" title="DO NOT return null values from methods returning collections"></a>DO NOT return null values from methods returning collections</h3><p>Another tip is if we have a method that returns a collection, do not return <code>null</code>. Instead, if there are no satisfied elements, we should return an empty collection.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">List</span>&lt;<span class="title">Person</span>&gt; <span class="title">GetPersons</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// Some logic to retrieve the objects. If not found, then return an empty collection. DO NOT return null.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> List&lt;Person&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FirstOrDefault-or-First"><a href="#FirstOrDefault-or-First" class="headerlink" title="FirstOrDefault() or First()?"></a><code>FirstOrDefault()</code> or <code>First()</code>?</h3><p>LINQ has some similar methods like <code>First()</code> and <code>FirstOrDefault()</code>. The key difference is the behavior for the empty collection. If the collection is empty or there is no element that satisfies the condition, then <code>First()</code> will throw <code>InvalidOperationException</code>. For this case, <code>FirstOrDefault()</code> is safe because it can return a default value for an empty collection or no element satisfies the condition. But we should be truly clear if the default value is null - that is another reason which would cause <code>NullReferenceException</code> - <strong>The default value for reference and nullable types is <code>null</code></strong>. So it would be better if we do like this:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> firstPerson = persons.FirstOrDefault(x =&gt; x.Age &gt; <span class="number">18</span>);</span><br><span class="line"><span class="comment">// Check if the variable is null</span></span><br><span class="line"><span class="keyword">if</span> (firstPerson != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Do something to the firstPerson</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Similarly, <code>Single()</code> and <code>SingleOrDefault()</code> also have the different results. <code>Single()</code> throws <code>InvalidOperationException</code> for these scenarios:</p>
<ul>
<li>The source collection is empty</li>
<li>No element satisfies the condition</li>
<li><strong>More than one element</strong> satisfies the condition</li>
</ul>
<p>For <code>SingleOrDefault()</code>, it also returns a default value if the collection is empty or no satisfied element is found. We should check if the return value is null before using it.</p>
<p>Another way to handle the empty collections is to use <code>DefaultIfEmpty()</code> extension method, as shown below:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">List&lt;<span class="built_in">int</span>&gt; numbers = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123; &#125;;</span><br><span class="line"><span class="comment">// Setting the default value to 1 by using DefaultIfEmpty() in the query.</span></span><br><span class="line"><span class="built_in">int</span> firstNumber = numbers.DefaultIfEmpty(<span class="number">1</span>).First();</span><br><span class="line"><span class="comment">// Now the firstNumber is 1, not 0.</span></span><br></pre></td></tr></table></figure>

<p>FYI: <a href="https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.first?view=netcore-3.1&WT.mc_id=DT-MVP-5001643">Enumerable.First</a> <a href="https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.firstordefault?view=netcore-3.1&WT.mc_id=DT-MVP-5001643">Enumerable.FirstOrDefault</a>, <a href="https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.single?view=netcore-3.1&WT.mc_id=DT-MVP-5001643">Enumerable.Single</a>, <a href="https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.singleordefault?view=netcore-3.1&WT.mc_id=DT-MVP-5001643">Enumerable.SingleOrDefault</a></p>
<h3 id="Checking-if-the-key-exists-in-the-dictionary"><a href="#Checking-if-the-key-exists-in-the-dictionary" class="headerlink" title="Checking if the key exists in the dictionary"></a>Checking if the key exists in the dictionary</h3><p>One probable reason of <code>NullReferenceException</code> is related to the dictionary. I have seen it quite a few times in code-review. Unless we are 100% sure we know the key exists in the dictionary, (eg, the dictionary is hard-coded.) we should always check it first. Because sometimes the dictionary comes from the APIs, or it has other dependencies. We cannot guarantee the key we want exists in the dictionary. So try to use this way:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> persons = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, Person&gt; = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, Person&gt;();</span><br><span class="line"><span class="comment">// Add some values</span></span><br><span class="line"><span class="keyword">if</span> (persons.ContainsKey(<span class="string">&quot;Jack&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> person = persons[<span class="string">&quot;Jack&quot;</span>];</span><br><span class="line">    <span class="comment">// Do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If we do not check the key, we may get a <code>KeyNotFoundException</code>. FYI: <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.item?view=netcore-3.1&WT.mc_id=DT-MVP-5001643">Dictionary&lt;TKey,TValue&gt;.Item[TKey]</a>, <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2.containskey?view=netcore-3.1&WT.mc_id=DT-MVP-5001643">Dictionary&lt;TKey,TValue&gt;.ContainsKey(TKey)</a></p>
<p>Also, when you add a key&#x2F;value pair to a dictionary, you should check if the key already exists in the dictionary.</p>
<h3 id="as-or-is"><a href="#as-or-is" class="headerlink" title="as or is?"></a><code>as</code> or <code>is</code>?</h3><p>When we cast the object type, we may use <code>as</code>, for example:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetValueImpl</span>(<span class="params"><span class="built_in">object</span> target, SomeStatus <span class="keyword">value</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> ctrl = target <span class="keyword">as</span> ControlA;</span><br><span class="line">    ctrl.Status = newValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The <code>as</code> operator explicitly converts the result of an expression to a given reference or nullable value type. It will not throw exceptions even if the conversion is not possible, but it will return <code>null</code> for this case. So usually, it is safer than the <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#cast-expression?WT.mc_id=DT-MVP-5001643">cast expression</a>, but we still need to check if the result is <code>null</code>. </p>
<p>The <code>is</code> operator checks if the runtime type of an expression result is compatible with a given type. So it is safer to use the following code:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (target <span class="keyword">is</span> ControlA)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> ctrl = target <span class="keyword">as</span> ControlA;</span><br><span class="line">    ctrl.Status = newValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>From C# 7, we can use <code>is</code> to check and convert the type at the same time:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (target <span class="keyword">is</span> ControlA ctrl)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//You can use ctrl variable directly now because the result is already assigned to it</span></span><br><span class="line">    ctrl.Status = newValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FYI: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast?WT.mc_id=DT-MVP-5001643">Type-testing operators and cast expression</a></p>
<h3 id="Check-the-instance-which-comes-from-the-DI-container-for-deep-sleep-mode-on-mobile"><a href="#Check-the-instance-which-comes-from-the-DI-container-for-deep-sleep-mode-on-mobile" class="headerlink" title="Check the instance which comes from the DI container for deep-sleep mode on mobile"></a>Check the instance which comes from the DI container for deep-sleep mode on mobile</h3><p>This issue may happen on mobile devices. If we use Dependency Injection for the mobile app, usually we just get the service instance from the DI container. But on mobile devices there are too many tricky scenarios we need to deal with, eg. deep-sleep mode, background tasks and push notifications, etc. For example, if the user clicks the notification to execute some actions, the DI container might have not been initialized. In other words, the lifecycle of the app may not be the way we expect. I have met some issues related to it but I do not want to expand too much here because it is rarely happening for other applications.</p>
<h3 id="Any-better-ways-to-replace-if-statement-for-null-checking"><a href="#Any-better-ways-to-replace-if-statement-for-null-checking" class="headerlink" title="Any better ways to replace if statement for null checking?"></a>Any better ways to replace <code>if</code> statement for null checking?</h3><p>Yes. You can use the null-conditional operator to simplify it. Just use <code>?</code> to short-circuit the expression. For example:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">A?.B?.Do(C)</span><br></pre></td></tr></table></figure>

<p>If <code>A</code> is null, the rest of the chain does not execute. If <code>B</code> is null, <code>Do(C)</code> does not execute.</p>
<p>Similarly, you can use <code>?[]</code> for element access. eg. <code>A?.B?[C]</code>. It is safe even <code>B</code> is null.</p>
<p>It is also a good choice to invoke a delegate&#x2F;Action&#x2F;Func. For example:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Counter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> EventHandler ThresholdReached;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnThresholdReached</span>(<span class="params">EventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Use ? to avoid null reference exception</span></span><br><span class="line">        ThresholdReached?.Invoke(<span class="keyword">this</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>By the way, you can use the null-coalescing operator <code>??</code> to return the value of its left-hand operand if it is not <code>null</code>; otherwise, it returns the value of right-hand operand. For example, if we need to assign a value to a variable:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (variable <span class="keyword">is</span> <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    variable = expression;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The below code is available in C# 8.0:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">variable ??= expression;</span><br></pre></td></tr></table></figure>

<p>FYI: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/member-access-operators?WT.mc_id=DT-MVP-5001643">Member access operators and expressions</a></p>
<p><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-coalescing-operator?WT.mc_id=DT-MVP-5001643">null-coalescing-operator</a></p>
<h3 id="Using-TryParse-not-Parse"><a href="#Using-TryParse-not-Parse" class="headerlink" title="Using TryParse(), not Parse()"></a>Using <code>TryParse()</code>, not <code>Parse()</code></h3><p>I think most of .NET developers already know that.</p>
<h2 id="Task-Async-Await"><a href="#Task-Async-Await" class="headerlink" title="Task&#x2F;Async&#x2F;Await"></a>Task&#x2F;Async&#x2F;Await</h2><p>There are a vast number of posts&#x2F;questions&#x2F;blogs you can find in StackOverflow, GitHub or someone’s blogs regarding <code>Task</code>, <code>async</code> and <code>await</code>. I do read a lot articles, but I will not add any new contents and I just would like to highlight some best practices in asynchronous programming. </p>
<h3 id="Avoid-async-void-method-unless-you-use-it-for-an-event-handler"><a href="#Avoid-async-void-method-unless-you-use-it-for-an-event-handler" class="headerlink" title="Avoid async void method unless you use it for an event handler"></a>Avoid <code>async void</code> method unless you use it for an event handler</h3><p>Return <code>Task</code> or <code>Task&lt;T&gt;</code> if it is possible for the <code>async</code> method. If you return a <code>void</code> method, the complier will not complain but it is not good because any exceptions will be eaten so you cannot catch it properly.</p>
<p>One special scenario is to make an <code>async</code> event handler. Usually the event handler does not return any type, and it just returns <code>void</code>. But please make sure you already handle the possible exceptions in the event handler. For all the other cases, do not use <code>async void</code> method.</p>
<h3 id="Avoid-mixing-async-and-sync-methods-together"><a href="#Avoid-mixing-async-and-sync-methods-together" class="headerlink" title="Avoid mixing async and sync methods together"></a>Avoid mixing <code>async</code> and <code>sync</code> methods together</h3><p>We should keep in mind that <strong>async all the way</strong>, which means we should not mix async and sync code for most of scenarios. More particular, <strong>never use <code>Task.Wait()</code> and <code>Task.Result</code> to block the async code</strong>. <code>Task.Wait()</code> is synchronous, potentially blocking the call. If I see <code>Task.Wait()</code> in code-review, definitely it is a strong signal to indicate the code may cause deadlocks. Also the bug caused by the deadlock is hard to track so please do not use it anymore.</p>
<h3 id="Return-Task-not-return-await"><a href="#Return-Task-not-return-await" class="headerlink" title="Return Task, not return await"></a>Return Task, not return await</h3><p>If you already have an async Task and you need to call it in another Task, just return the Task, instead of making it as async then await. For example:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">GetDataFromApiAsync</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Do some async jobs</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can do it like this </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">GetDataAsync</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> GetDataFromApiAsync();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// But this one is better</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">GetData</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Just return the task</span></span><br><span class="line">    <span class="keyword">return</span> GetDataFromApiAsync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Every time we declare a method as async, the compiler will create a state machine class to wrap the logic. So if you do not have other <code>await</code> in the method, please just return the task directly. It helps us not create additional resource to switch between different threads.</p>
<h3 id="What-if-we-have-to-block-the-async-code"><a href="#What-if-we-have-to-block-the-async-code" class="headerlink" title="What if we have to block the async code?"></a>What if we have to block the async code?</h3><p>For some reason we must convert an async code to synchronous, then you better use <code>Task.GetAwaiter().GetResult()</code>. It is the same with <code>Task.Wait()</code> if the task executes successfully, but the benefit is it can return a normal exception if the task gets any errors. But <code>Task.Wait()</code> wraps the exceptions in an <code>AggregateException</code> so it is extremely hard to diagnose the issue. </p>
<h3 id="Use-Task-WaitAll-to-run-multiple-tasks"><a href="#Use-Task-WaitAll-to-run-multiple-tasks" class="headerlink" title="Use Task.WaitAll() to run multiple tasks"></a>Use <code>Task.WaitAll()</code> to run multiple tasks</h3><p>If you have multiple tasks to be executed and they do not have dependencies with each other, you can use <code>await Task.WhenAll()</code> to run them in parallel. Similarly, you can use <code>await Task.WhenAny()</code> to wait for any task to complete then continue the next code.</p>
<h3 id="Use-ConfigureAwait-false-to-avoid-deadlock"><a href="#Use-ConfigureAwait-false-to-avoid-deadlock" class="headerlink" title="Use ConfigureAwait(false)  to avoid deadlock"></a>Use <code>ConfigureAwait(false)</code>  to avoid deadlock</h3><p>The <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.synchronizationcontext?view=netcore-3.1&WT.mc_id=DT-MVP-5001643">SynchronizationContext</a> class Provides the basic functionality for propagating a synchronization context in various synchronization models. Basically, using <code>ConfigureAwait(false)</code> can improve performance and avoid deadlocks. The general guidance is:</p>
<ul>
<li>Do not use <code>ConfigureAwait(false)</code> in the application-level code.</li>
<li>Use <code>ConfigureAwait(false)</code> in the general-purpose library code.</li>
</ul>
<p>In other words, if you are developing a Windows Form&#x2F;WPF&#x2F;ASP.NET Core application, usually you do not need to use it. But if you develop a library for the general purposes, it would be better if you use it because the library does not care about the environment so no need to keep on the same <code>SynchronizationContext</code>.</p>
<p>I highly recommend the below articles about Task&#x2F;async&#x2F;await:</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/archive/msdn-magazine/2013/march/async-await-best-practices-in-asynchronous-programming?WT.mc_id=DT-MVP-5001643">Async&#x2F;Await - Best Practices in Asynchronous Programming</a> - by Stephen Cleary</li>
<li><a href="https://blog.stephencleary.com/2012/02/async-and-await.html">Async and Await</a> by Stephen Cleary</li>
<li><a href="https://devblogs.microsoft.com/pfxteam/asyncawait-faq/?WT.mc_id=DT-MVP-5001643">Async&#x2F;Await FAQ</a> by Stephen Toub</li>
<li><a href="https://devblogs.microsoft.com/dotnet/configureawait-faq/?WT.mc_id=DT-MVP-5001643">ConfigureAwait FAQ</a> by Stephen Toub</li>
</ul>
<h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><p>All the applications may have exceptions. But a well-designed app can handle the exception and errors to prevent crashing. Some common issues are:</p>
<h3 id="Throw-exceptions-not-return-an-error-code"><a href="#Throw-exceptions-not-return-an-error-code" class="headerlink" title="Throw exceptions, not return an error code."></a>Throw exceptions, not return an error code.</h3><p>Exceptions are not scary. I have seen some codes that try to hide the exception then return error codes. That would not good because the caller may not check the return code. Exceptions ensure that failures can be handled properly.</p>
<h3 id="Use-standard-exception-types-when-you-can"><a href="#Use-standard-exception-types-when-you-can" class="headerlink" title="Use standard exception types when you can"></a>Use standard exception types when you can</h3><p>.NET framework already provides lots of exception types, eg. <code>ArgumentException</code>, <code>ArgumentNullException</code>, <code>InvalidOperationException</code> etc. Only introduce a new exception type when a predefined one does not apply.</p>
<h3 id="Provide-additional-properties-for-custom-exceptions"><a href="#Provide-additional-properties-for-custom-exceptions" class="headerlink" title="Provide additional properties for custom exceptions"></a>Provide additional properties for custom exceptions</h3><p>If you design a custom exception, please attach additional information to the exception, which is useful for diagnosis. For example, <code>ArgumentNullException</code> has the argument name property, and <code>FileNotFoundException</code> has a <code>FileName</code> property. The more information it has, the easier for debugging.</p>
<h3 id="Do-not-eat-the-exception-in-try-catch-block"><a href="#Do-not-eat-the-exception-in-try-catch-block" class="headerlink" title="Do not eat the exception in try-catch block"></a>Do not eat the exception in try-catch block</h3><p>I have seen the below code:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Log the exception</span></span><br><span class="line">    <span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This is not good because it will reset the stack trace. The correct way is:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Log the exception</span></span><br><span class="line">    <span class="keyword">throw</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Just use <code>throw</code> to keep the original stack trace. So the caller would know what happens. Also, you may see the below code:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">&quot;error occurs&quot;</span>, ex); <span class="comment">// This will wrap the original stack trace</span></span><br><span class="line">    <span class="comment">//or</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">&quot;error occurs&quot;</span>); <span class="comment">// This will replace the original stack trace</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>So please make sure you throw exceptions correctly. DO NOT eat them!</p>
<p>I recommend you to read the below articles:</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/dotnet/standard/exceptions/best-practices-for-exceptions?WT.mc_id=DT-MVP-5001643">Best practices for exceptions</a></li>
<li><a href="https://www.c-sharpcorner.com/UploadFile/a777ce/difference-between-throw-and-throw-ex-in-C-Sharp/">Difference Between Throw and Throw ex in C#</a></li>
</ul>
<h2 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h2><p>To be honest, the <code>HttpClient</code> class in .NET is not good enough because so many developers are looking for how to use it correctly every day. So here are some tips:</p>
<h3 id="DO-NOT-use-using-to-dispose-the-HttpClient-instance-explicitly"><a href="#DO-NOT-use-using-to-dispose-the-HttpClient-instance-explicitly" class="headerlink" title="DO NOT use using to dispose the HttpClient instance explicitly"></a>DO NOT use <code>using</code> to dispose the <code>HttpClient</code> instance explicitly</h3><p>I think lots of .NET developers already know that. It is a common error for some junior developers because <code>HttpClient</code> implements the <code>IDisposable</code> interface. Also, you might find the below code in some code samples from Microsoft official documents:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> httpClient = <span class="keyword">new</span> HttpClient())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>It is understandable because it is an <code>IDisposable</code> object and we should use <code>using</code> statement. But for this case, the above usage is totally wrong. Instead of creating a new instance for each request, we should share a single instance for the entire application. Because even you dispose the <code>HttpClient</code> instance, the underlying socket connection cannot be disposed immediately (generally, it will be hold for 240 seconds on Windows) so if you create new instances again and again, the available socket ports will be exhausted soon.</p>
<p>The correct way is to keep a singleton instance for <code>HttpClient</code>. You can use a static instance or use singleton pattern to maintain the <code>HttpClient</code> instance. But we still have another issue.</p>
<h3 id="HttpClient-does-not-respect-DNS-changes"><a href="#HttpClient-does-not-respect-DNS-changes" class="headerlink" title="HttpClient does not respect DNS changes"></a><code>HttpClient</code> does not respect DNS changes</h3><p>For most of scenarios, it is enough to maintain a singleton instance for all the requests. In .NET Framework 4.x , <code>HttpClient</code> does not respect the DNS changes. In other words, if the endpoint changes the DNS record(It could happen when we do the blue&#x2F;green deployment), the current <code>HttpClient</code> instance cannot detect that change so it will be stuck until the socket connection is closed. In the latest .NET Core, it has been improved. </p>
<p>FYI: <a href="http://byterot.blogspot.com/2016/07/singleton-httpclient-dns.html">Singleton HttpClient? Beware of this serious behaviour and how to fix it</a></p>
<p><a href="https://github.com/dotnet/runtime/issues/18348">Singleton HttpClient doesn’t respect DNS changes</a></p>
<h3 id="Specify-HttpHeaders-for-HttpClient-or-HttpRequestMessage"><a href="#Specify-HttpHeaders-for-HttpClient-or-HttpRequestMessage" class="headerlink" title="Specify HttpHeaders for HttpClient or HttpRequestMessage?"></a>Specify <code>HttpHeaders</code> for <code>HttpClient</code> or <code>HttpRequestMessage</code>?</h3><p>For some reason, we need to specify the <code>HttpHeaders</code>. We can do it through two ways:</p>
<ul>
<li>Use <code>HttpClient.DefaultRequestHeaders.Add()</code> to update the header of the <code>HttpClient</code> instance.</li>
<li>Use <code>HttpRequestMessage.Headers.Add()</code> to update the header for each request.</li>
</ul>
<p>The second way is better. Because usually we reuse the singleton <code>HttpClient</code> instance. Even <code>HttpClient</code> is thread-safe, if we frequently change the <code>DefaultRequestHeaders</code> collection, it may cause the below <code>InvalidOperationException</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Operations that change non-concurrent collections must have exclusive access. A concurrent update was performed on this collection and corrupted its state. The collection&#x27;s state is no longer correct.</span><br></pre></td></tr></table></figure>

<p>The reason is the <code>DefaultRequestHeaders</code> property of <code>HttpClient</code> is not thread-safe. It should not be modified while there are outstanding requests. FYI: <a href="https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient.defaultrequestheaders?view=netcore-3.1?WT.mc_id=DT-MVP-5001643">HttpClient.DefaultRequestHeaders</a></p>
<h3 id="Retry-the-request"><a href="#Retry-the-request" class="headerlink" title="Retry the request"></a>Retry the request</h3><p>The HTTP request may fail so usually we need to retry the failed requests by using <strong>Polly</strong>. So here is another exception you may see: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InvalidOperation exception: The request message was already sent. Cannot send the same request message multiple times.</span><br></pre></td></tr></table></figure>

<p>That is because Polly just retries the request but does not change it. However, if the <code>HttpClient</code> checks it sends the same request, it will throw the above exception. The solution is easy - just create a <code>clone()</code> method to create another copy of the request:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpRequestMessage <span class="title">Clone</span>(<span class="params"><span class="keyword">this</span> HttpRequestMessage req</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HttpRequestMessage clone = <span class="keyword">new</span> HttpRequestMessage(req.Method, req.RequestUri);</span><br><span class="line"></span><br><span class="line">    clone.Content = req.Content;</span><br><span class="line">    clone.Version = req.Version;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; prop <span class="keyword">in</span> req.Properties)</span><br><span class="line">    &#123;</span><br><span class="line">        clone.Properties.Add(prop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="built_in">string</span>, IEnumerable&lt;<span class="built_in">string</span>&gt;&gt; header <span class="keyword">in</span> req.Headers)</span><br><span class="line">    &#123;</span><br><span class="line">        clone.Headers.TryAddWithoutValidation(header.Key, header.Value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FYI: <a href="https://github.com/App-vNext/Polly/issues/313">How Polly prevents InvalidOperation exception SendAsync</a></p>
<p>In .NET Core 2.1, Microsoft provides <code>HttpClientFactory</code> to try to solve some issues. It is better but one thing I do not like is it is tightly coupled with Microsoft DI. Here is an interesting thread on GitHub: <a href="https://github.com/dotnet/extensions/issues/1345">Using HttpClientFactory without dependency injection</a>.</p>
<h2 id="Collections-List"><a href="#Collections-List" class="headerlink" title="Collections&#x2F;List"></a>Collections&#x2F;List</h2><p>There are too many topics regarding <code>Collections</code>&#x2F;<code>List</code> in .NET. But I just want to emphasize the below tips here:</p>
<h3 id="Always-initialize-the-collection-when-you-declare-it-1"><a href="#Always-initialize-the-collection-when-you-declare-it-1" class="headerlink" title="Always initialize the collection when you declare it"></a>Always initialize the collection when you declare it</h3><p>Oh I just realize that I have mentioned it at the beginning of this article. So please keep it in mind because I have struggled with this issue many times when I do the code-review.</p>
<h3 id="ToList-first-or-just-use-foreach-for-the-IEnumerable"><a href="#ToList-first-or-just-use-foreach-for-the-IEnumerable" class="headerlink" title="ToList() first or just use foreach for the IEnumerable?"></a><code>ToList()</code> first or just use <code>foreach</code> for the <code>IEnumerable</code>?</h3><p>I am sure you have seen the below code:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GetList() will return an IEnumerable object</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="function"><span class="keyword">var</span> item <span class="keyword">in</span> <span class="title">GetList</span>())</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> HandleItemAsync(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>We exactly know that when we use <code>foreach</code> to an <code>IEnumerable</code> object, it will iterate through the collection. For most scenario, it is the same with this one:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="function"><span class="keyword">var</span> item <span class="keyword">in</span> <span class="title">GetList</span>().<span class="title">ToList</span>())</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> HandleItemAsync(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The difference is that when you use <code>IEnumerable</code>, the compiler gets a chance to defer the work until later, possible optimizing the way. If you use <code>ToList()</code>, the compiler will force to get the result immediately. An example is when we query data from database, we usually have LINQ conditions so it would be better to defer evaluation until we execute it. But in this case, we should be aware of the <code>async</code> method in the <code>foreach</code> body. Consider this scenario: Let us say we have an Azure blob. We need to get all the files in the blob storage then delete them. So the code might be like this:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> files = container.ListBlobs(<span class="literal">null</span>, <span class="literal">true</span>, BlobListingDetails.None);<span class="comment">// List all the files in the blob. It will return an IEnumerable object.</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> file <span class="keyword">in</span> files)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> file.DeleteIfExistsAsync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>It seems good. But the risk is this is a cloud application. <code>ListBlobs()</code> method might be timeout if it cannot complete in a specify duration. So if there are a bunch of files to be deleted, it would spend quite a few minutes for <code>ListBlobs() </code> method. Then you will get a timeout exception.</p>
<p>So the safe way is to use <code>ToList()</code> before making the iteration:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> files = container.ListBlobs(<span class="literal">null</span>, <span class="literal">true</span>, BlobListingDetails.None).ToList();<span class="comment">// List all the files in the blob then convert to a List.</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> file <span class="keyword">in</span> files)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> file.DeleteIfExistsAsync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Now you query the file list right away. Then no need to worry about the timeout issue. So it is not easy to say which method is better. It depends.</p>
<h3 id="Possible-multiple-enumeration-of-IEnumerable"><a href="#Possible-multiple-enumeration-of-IEnumerable" class="headerlink" title="Possible multiple enumeration of IEnumerable"></a>Possible multiple enumeration of IEnumerable</h3><p>You may see this warning if you use Resharper. The below code comes from Jetbrains:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">IEnumerable&lt;<span class="built_in">string</span>&gt; names = GetNames();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> name <span class="keyword">in</span> names)</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Found &quot;</span> + name);</span><br><span class="line"><span class="keyword">var</span> allNames = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> name <span class="keyword">in</span> names)</span><br><span class="line">    allNames.Append(name + <span class="string">&quot; &quot;</span>);</span><br></pre></td></tr></table></figure>

<p>Assuming that <code>GetNames()</code> returns an <code>IEnumerable&lt;string&gt;</code>, the code makes twice enumerating in two <code>foreach</code> statements. If <code>GetNames()</code> queries the database or calls an API, the two calls may get different results because the original data has been changed by other processes. So it can be fixed by converting the  <code>IEnumerable&lt;string&gt;</code> to <code>List</code>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">List&lt;<span class="built_in">string</span>&gt; names = GetNames().ToList();</span><br></pre></td></tr></table></figure>

<p>So the two enumeration will get the same result.</p>
<h3 id="Concurrent-collections"><a href="#Concurrent-collections" class="headerlink" title="Concurrent collections"></a>Concurrent collections</h3><p>The <code>List</code> and <code>Dictionary</code> are not thread-safe. Consider using concurrent collections for multiple-thread scenarios. You can find more information here: <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent?view=netcore-3.1?WT.mc_id=DT-MVP-5001643">System.Collections.Concurrent Namespace</a></p>
<h2 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h2><h3 id="or-Equals"><a href="#or-Equals" class="headerlink" title="== or Equals?"></a><code>==</code> or <code>Equals</code>?</h3><p>They are both used to compare two value type data items or reference type data items. The difference is that <code>==</code> returns <code>true</code> if they refer to the same object. <code>Equals()</code> returns <code>true</code> if they have the same content. So they are not the same. FYI: </p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.object.equals?view=netcore-3.1?WT.mc_id=DT-MVP-5001643">Object.Equals Method</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/equality-operators?WT.mc_id=DT-MVP-5001643">Equality operators (C# reference)</a></li>
<li><a href="https://www.c-sharpcorner.com/UploadFile/3d39b4/difference-between-operator-and-equals-method-in-C-Sharp/">Difference Between Equality Operator ( &#x3D;&#x3D;) and Equals() Method in C#</a></li>
</ul>
<h3 id="DO-use-protected-constructor-for-abstract-classes"><a href="#DO-use-protected-constructor-for-abstract-classes" class="headerlink" title="DO use protected constructor for abstract classes"></a>DO use <code>protected</code> constructor for abstract classes</h3><p>Just do it.</p>
<h3 id="Event-pattern"><a href="#Event-pattern" class="headerlink" title="Event pattern"></a>Event pattern</h3><p>I have met a bug regarding the event pattern. Basically the class maintains a global status field. If the app detects status changes, the class will publish an event to notify the subscriber. But it published the event first, then updated the global status field. So when the caller received the event, the global status might not be changed yet. It caused an intermittent bug. So if the caller needs to use some global values, please make sure the publisher updates the status first, then publishes the event.</p>
<h3 id="Delete-useless-codes"><a href="#Delete-useless-codes" class="headerlink" title="Delete useless codes"></a>Delete useless codes</h3><p>If some codes are useless, you can add <code>Obsolete</code> attribute for the current version. Then totally delete them in the future versions. No need to keep the useless code in your solution. It is ugly. I have seen lots of codes that are commented but I don’t know why they are still there. Will they be restored in the future? No one knows. So if you do not need that, please delete it. Or you can leave a comment that indicates why it should be kept temporarily. </p>
<h3 id="Do-not-use-too-many-parameters-for-a-method"><a href="#Do-not-use-too-many-parameters-for-a-method" class="headerlink" title="Do not use too many parameters for a method."></a>Do not use too many parameters for a method.</h3><p>If there are too many parameters for a method, consider refactoring it as a class. </p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>This is a cluttered note but indeed I met these issues many times. When I have more ideas I can add more topics to this series. Thanks.</p>
]]></content>
      <categories>
        <category>Coding Practice</category>
      </categories>
      <tags>
        <tag>.NETCore</tag>
        <tag>ASP.NETCore</tag>
      </tags>
  </entry>
  <entry>
    <title>Take your first step with Dapr</title>
    <url>/2022/09/20/take-your-first-step-with-dapr/</url>
    <content><![CDATA[<p>Dapr is a new way to build distributed applications. It provides quite a few building blocks to abstract the common operations of distributed microservice architecture. In this article, let us take the first step with Dapr and understand how it works.</p>
<h2 id="What-is-Dapr"><a href="#What-is-Dapr" class="headerlink" title="What is Dapr?"></a>What is Dapr?</h2><p>Dapr is not a framework or a library. It is a runtime. Dapr is language-agnostic. Before we explain what Dapr is, let us look at what problem Dapr can solve, then understand how it works.</p>
<span id="more"></span>

<h3 id="What-problem-Dapr-can-solve"><a href="#What-problem-Dapr-can-solve" class="headerlink" title="What problem Dapr can solve?"></a>What problem Dapr can solve?</h3><p>Now everyone is talking about cloud-native, microservice and distributed systems. More and more companies and organizations are refactoring their monolithic systems to microservice architecture. Another trend is that we have more and more cloud services&#x2F;components to build the application, like Lego bricks, so as a developer, we need to learn how to use these cloud-native services to build the application. For example, if you need a state store, you can use Azure CosmonDB or AWS DynamoDB, or you can use Redis managed by any cloud provider. If you need a message queue, you can also find some managed services in the cloud. So we need to make decisions like:</p>
<ul>
<li>Which one will we use?</li>
<li>How should we write the code?</li>
<li>How do we integrate these cloud services with our application?</li>
<li>What if we want to use another platform? How can we reuse our code?</li>
</ul>
<p>If you write code that targets a specific cloud provider, that means your application will be tightly coupled with that cloud provider, and you cannot easily migrate to another cloud platform. It’s not portable. It’s a <strong>vendor-locking</strong> risk.</p>
<p>Let’s say we want to implement a state store for the shopping cart service. That’s a quite common feature in all online shopping systems. We have many available options:</p>
<ul>
<li>Redis</li>
<li>Memcached</li>
<li>MongoDB</li>
<li>Azure CosmosDB</li>
<li>Azure Table Storage</li>
<li>AWS DynamoDB</li>
<li>GCP Firestore</li>
</ul>
<p>Let’s say the client has an existing solution in Azure, so we decide to use CosmosDB as the state store. Then we probably would make it like this:</p>
<img src="/2022/09/20/take-your-first-step-with-dapr/image-20220919221445598.png" class="" title="The traditional project structure" alt="The traditional project structure">

<p>Figure 1 - The traditional project structure</p>
<p>First, we would need to learn how to use CosmosDB, read the documentation, and install the CosmosDB SDK for a specific language. If the project is developed by .NET, I’ll install the .NET CosmosDB SDK, then I can write the business logic code on top of it. This is quite straightforward.</p>
<p>The challenge is that we may want to implement the hybrid cloud architecture, or we need to support on-premises or AWS. So we will need to implement the state store on Redis or AWS DynamoDB. But how can we reuse our code?</p>
<p>If you are an experienced developer, you would say “hey we can use some design patterns, like Dependency Injection”. That’s true. Dependency Injection is a common pattern to inject the correct implementation for a specific purpose. We can define an interface to make an abstraction for the common operations, then we can have different implementations, one for CosmosDB, and another for Redis, as shown below:</p>
<img src="/2022/09/20/take-your-first-step-with-dapr/image-20220919221519029.png" class="" title="Using Dependency Injection to support multiple implementations" alt="Using Dependency Injection to support multiple implementations">

<p>Figure 2 - Using Dependency Injection to support multiple implementations</p>
<p>Ok now it supports two platforms. What if we need to support more? Apparently, we need to write more code with different SDKs for each platform. It works but you will find many duplicated codes. That’s a problem.</p>
<p>There’s a principle in software development called the <strong>DRY</strong> principle – <strong>Don’t repeat yourself</strong>. As developers, we don’t want to repeat ourselves. We want to write the code once and reuse it. So we need to find a better way to solve this problem.</p>
<p>That’s the challenge for developers. The reality is that, to be a modern application developer, we need to understand many services in each cloud provider. But we want to focus on business logic only, and lean on the cloud platforms to implement the scalability, flexibility, resiliency, maintainability, elasticity, etc. Developers should not be expected to become distributed system experts.</p>
<p>How can we solve that? How can we write the code once and run it everywhere? How can we reduce the cognitive load to support more platforms? How can we have agility and flexibility, and reduce the complexity?</p>
<p>That brings us to <strong>Dapr</strong>, or distributed application runtime, which is a new way to build modern distributed applications. Let’s see what we can do if we use Dapr to build the same application.</p>
<h3 id="What-if-we-use-Dapr"><a href="#What-if-we-use-Dapr" class="headerlink" title="What if we use Dapr?"></a>What if we use Dapr?</h3><p>If we use Dapr for the same shopping cart service, we can refactor the system like this:</p>
<img src="/2022/09/20/take-your-first-step-with-dapr/image-20220919222005258.png" class="" title="Refactoring the shopping cart service with Dapr" alt="Refactoring the shopping cart service with Dapr">

<p>Figure 3 - Refactoring the shopping cart service with Dapr</p>
<p>We don’t need to install any language-specific SDKs. We just call the standard APIs exposed by Dapr, and Dapr will call the underlying cloud services. In other words, Dapr is like an interface, or an abstraction layer between our application and the cloud services, which can reduce the complexity. If we want to support more cloud services, no need to change the code, just update the configuration file of Dapr.</p>
<p>That says, the application now is portable. You can easily run it on any cloud platform. Also, the code is simpler, shorter, and easier to manage. Ok the state management is just one feature of Dapr. Next, let’s dive deeper and check more details.</p>
<p>Dapr is trying to solve the complexity of building a distributed application. Here is the overview of the Dapr architecture.</p>
<img src="/2022/09/20/take-your-first-step-with-dapr/image-20220919222602379.png" class="" title="The overview of Dapr (Copyright by Microsoft)" alt="The overview of Dapr (Copyright by Microsoft)">

<p>Figure 4 - The overview of Dapr (Copyright by Microsoft)</p>
<p>We can see, on the bottom row, there are various cloud providers. In the blue area, there are some <strong>building blocks</strong> of Dapr.</p>
<blockquote>
<p><strong>What is a building block?</strong></p>
<p>A building block is an abstraction layer for a specific cloud capability, or we can say it encapsulates a distributed infrastructure capability. For example, the state management capability we just mentioned in the shopping cart example, you can use Azure CosmosDB, or AWS DynamoDB, but both of them are NoSQL databases, and they have lots of similarities. So on top of them, Dapr provides a building block to make the abstraction for this capability. Then We can access the capability through the Dapr APIs, normally they are HTTP or gRPC APIs.</p>
</blockquote>
<p>On top of the Dapr building blocks, there is our application code, you might use various languages, like Python, .NET, or NodeJS. It doesn’t matter. Because they will call the Dapr APIs without any hard dependencies to those cloud services.</p>
<p>You can see besides the state management, there are some other building blocks for <strong>Service-to-service invocation</strong>, pub&#x2F;sub, <strong>bindings</strong>, <strong>actors</strong>, <strong>observability</strong>, <strong>secrets</strong>, etc. Each building block represents a capability of the distributed application based on the cloud-native services.</p>
<p>We won’t introduce each of them in this article, but we can understand that Dapr allows you to swap out different underlying implementations without having to change any code. So this way makes your code more portable, more flexible, and vendor-neutral.</p>
<h3 id="How-it-works"><a href="#How-it-works" class="headerlink" title="How it works?"></a>How it works?</h3><p>This diagram below shows the Dapr architecture, which is called sidecar architecture. </p>
<img src="/2022/09/20/take-your-first-step-with-dapr/image-20220919223719963.png" class="" title="A Sidecar" alt="A Sidecar">

<p>Figure 5 - A Sidecar</p>
<p>Dapr is like a sidecar that you can assemble with your motorcycle. A sidecar enables Dapr to run in a separate process or a separate container alongside the service. For each service, you can have a Dapr sidecar. In this way, Dapr will not intrude on your application, and it would be easy to change the code to adopt it.</p>
<p>The service calls the Dapr APIs through HTTP or gRPC. And the Dapr building blocks invoke the <strong>components</strong> that implement the cloud services.</p>
<blockquote>
<p><strong>What is a component?</strong></p>
<p>A component is to provide concrete implementation for the cloud services. If we use a simple analogy, <strong>a Building block is like an interface, and a component is like a concrete implementation.</strong></p>
</blockquote>
<p>The application doesn’t know how Dapr calls those components. It just needs to know Dapr building blocks. No dependencies on cloud services. The building blocks are independent of each other. You can use one of them or use many of them. Just do it following your requirements. Another benefit is that Dapr is developed in the industry best practices including comprehensive observability. So you can confidently use these building blocks to build your distributed application.</p>
<p>Dapr has a set of components for many popular services. For state stores, we can see it supports DynamoDB, CosmosDB, Firebase, Redis, etc.</p>
<img src="/2022/09/20/take-your-first-step-with-dapr/image-20220919223317775.png" class="" title="Dapr components (Copyright by Microsoft)" alt="Dapr components (Copyright by Microsoft)">

<p>Figure 6 - Dapr components (Copyright by Microsoft)</p>
<p>Similarly, the other building blocks also have many components. There are over 70 components available now. So if you need to support another service, you can just update the Dapr configuration to support that. No need to change the code.<br>Also, Dapr is an open-source project, so everyone can create components for any resources and contribute the code.</p>
<p>Next, let’s see a demo. I will show you how to use the state store component in Dapr.</p>
<h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>Microsoft provides a getting-started guide here: <a href="https://docs.microsoft.com/en-us/dotnet/architecture/dapr-for-net-developers/getting-started">https://docs.microsoft.com/en-us/dotnet/architecture/dapr-for-net-developers/getting-started</a>. We will follow the steps below:</p>
<h3 id="Install-Dapr"><a href="#Install-Dapr" class="headerlink" title="Install Dapr"></a>Install Dapr</h3><ul>
<li><a href="https://docs.dapr.io/getting-started/install-dapr-cli/">Install the Dapr CLI</a>.</li>
<li><a href="https://docs.docker.com/get-docker/">Install Docker Desktop</a>. If you’re running on Windows, make sure that <strong>Docker Desktop for Windows</strong> is configured to use Linux containers.</li>
<li><a href="https://docs.dapr.io/getting-started/install-dapr-selfhost/">Initialize Dapr in your local environment</a>.</li>
<li><a href="https://dotnet.microsoft.com/download/dotnet/6.0?WT.mc_id=DT-MVP-5001643">Install the .NET 6 SDK</a>.</li>
</ul>
<p>After you initialize Dapr, you can run the command <code>docker ps</code> to verify containers are running. You can see a Redis instance named <code>dapr_redis</code> in the output, which is the default state store implementation by default:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CONTAINER ID   IMAGE               COMMAND                  CREATED        STATUS                    PORTS                              NAMES</span><br><span class="line">b4d4f465fecd   daprio/dapr:1.8.4   <span class="string">&quot;./placement&quot;</span>            31 hours ago   Up 18 minutes             0.0.0.0:6050-&gt;50005/tcp            dapr_placement</span><br><span class="line">e070cbee088b   openzipkin/zipkin   <span class="string">&quot;start-zipkin&quot;</span>           32 hours ago   Up 18 minutes (healthy)   9410/tcp, 0.0.0.0:9411-&gt;9411/tcp   dapr_zipkin</span><br><span class="line">0d1d5ae053e6   redis:6             <span class="string">&quot;docker-entrypoint.s…&quot;</span>   32 hours ago   Up 18 minutes             0.0.0.0:6379-&gt;6379/tcp             dapr_redis</span><br></pre></td></tr></table></figure>

<p>Let’s see how to use this built-in state store.</p>
<h2 id="Building-the-first-Dapr-application"><a href="#Building-the-first-Dapr-application" class="headerlink" title="Building the first Dapr application"></a>Building the first Dapr application</h2><p>We will build a simple console app to consume the default state store.</p>
<h3 id="Creating-the-application"><a href="#Creating-the-application" class="headerlink" title="Creating the application"></a>Creating the application</h3><p>This demo comes from Microsoft’s doc: <a href="https://learn.microsoft.com/en-us/dotnet/architecture/dapr-for-net-developers/getting-started?WT.mc_id=DT-MVP-5001643">Get started with Dapr</a>. I’ll introduce the main steps below:</p>
<p>Run the below command to create a console application:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet new console -o DaprCounter</span><br></pre></td></tr></table></figure>

<p>Navigate to the application directory:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> DaprCounter</span><br></pre></td></tr></table></figure>

<p>Run the command below, you should be able to see the output as “Hello World!”</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet run</span><br></pre></td></tr></table></figure>

<h3 id="Adding-Dapr-State-Management"><a href="#Adding-Dapr-State-Management" class="headerlink" title="Adding Dapr State Management"></a>Adding Dapr State Management</h3><p>We will use the Dapr SDK to access the state store. We mentioned that Dapr provides HTTP&#x2F;gRPC protocols so you can call the Dapr APIs using any tool. Using the Dapr SDK would save our effort by providing the strongly typed .NET client to call the Dapr APIs.</p>
<p>Run the command below to install the <code>Dapr.Client</code> NuGet package:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package Dapr.Client</span><br></pre></td></tr></table></figure>

<p>Open the <code>Program.cs</code> file and update it as the following code:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Dapr.Client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> storeName = <span class="string">&quot;statestore&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> key = <span class="string">&quot;counter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> daprClient = <span class="keyword">new</span> DaprClientBuilder().Build();</span><br><span class="line"><span class="keyword">var</span> counter = <span class="keyword">await</span> daprClient.GetStateAsync&lt;<span class="built_in">int</span>&gt;(storeName, key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Counter = <span class="subst">&#123;counter++&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> daprClient.SaveStateAsync(storeName, key, counter);</span><br><span class="line">    <span class="keyword">await</span> Task.Delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In this file, we create a <code>DaprClient</code> instance, which is used to call the Dapr APIs. To use the state store, we use <code>GetStateAsync()</code> and <code>SaveStateAsync()</code> to get and save the <code>counter</code> value.</p>
<h3 id="Running-the-Dapr-application"><a href="#Running-the-Dapr-application" class="headerlink" title="Running the Dapr application"></a>Running the Dapr application</h3><p>Run the application with the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dapr run --app-id DaprCounter dotnet run</span><br></pre></td></tr></table></figure>

<p>In the command above, we specify the <code>app-id</code> for the application. The state store will use this id as a prefix for the state key. You will see the <code>counter</code> increases per second.</p>
<p>Stop and restart the application. You will see the <code>counter</code> does not reset, which means the value is saved in the state store.</p>
<p>If you want to check the data in the Redis container, you can inspect it in the terminal:</p>
<img src="/2022/09/20/take-your-first-step-with-dapr/image-20220920211115867.png" class="" title="Inspect the Redis data in terminal" alt="Inspect the Redis data in terminal">

<p>Figure 7 - Inspect the Redis data in terminal</p>
<p>Then use the following command to enter <a href="https://redis.io/docs/manual/cli/">Redis-CLI</a>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure>

<p>Then you can check the keys in the Redis database:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; Keys *</span><br><span class="line">1) <span class="string">&quot;DaprCounter||counter&quot;</span></span><br></pre></td></tr></table></figure>

<p>You will see the key consists of the <code>app-id</code> and the key name that is defined in the code.</p>
<p>To check the data stored in the database, you can use the command below:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HGETALL DaprCounter||counter</span><br><span class="line">1) <span class="string">&quot;data&quot;</span></span><br><span class="line">2) <span class="string">&quot;41&quot;</span></span><br><span class="line">3) <span class="string">&quot;version&quot;</span></span><br><span class="line">4) <span class="string">&quot;41&quot;</span></span><br></pre></td></tr></table></figure>

<p>To delete the key, use the command below:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; DEL DaprCounter||counter</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>

<p>In this project, we do not have any dependency on Redis directly. Dapr SDK behaves as an abstraction layer between the application and the Redis instance. So the next question is, how does Dapr know where the Redis instance is?</p>
<h3 id="Understanding-the-component-configuration-files"><a href="#Understanding-the-component-configuration-files" class="headerlink" title="Understanding the component configuration files"></a>Understanding the component configuration files</h3><p>As we mentioned before, when you initialize Dapr for the local environment, it automatically created a Redis instance as its state store. Also, it created a configuration file to specify what component is used for the state store. The default configuration files are located in the <code>%USERPROFILE%\.dapr\components</code> folder if you use Windows. If you use Linux or macOS, you can find them in the <code>$HOME/.dapr/components</code> folder. You can find a file named <code>statestore.yaml</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">dapr.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Component</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">statestore</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">state.redis</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redisHost</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">localhost:6379</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redisPassword</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">actorStateStore</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure>

<p>In this file, Dapr specifies the state type as Redis. It also has the metadata to specify the Redis host and password. If we would like to change to another implementation of the state store, e.g. an Azure CosmosDB, we just update the configuration file without changing any code of the application. That says the application is portable.</p>
<p>Microsoft’s doc does not introduce how to switch to another implementation. Let’s move on.</p>
<h2 id="Using-Azure-CosmosDB-as-the-state-store"><a href="#Using-Azure-CosmosDB-as-the-state-store" class="headerlink" title="Using Azure CosmosDB as the state store"></a>Using Azure CosmosDB as the state store</h2><p>Next, let us explore how to change the state store to Azure CosmosDB.</p>
<h3 id="Creating-an-Azure-CosmosDB-database"><a href="#Creating-an-Azure-CosmosDB-database" class="headerlink" title="Creating an Azure CosmosDB database"></a>Creating an Azure CosmosDB database</h3><p>Follow this doc to create the Azure CosmosDB database: <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/sql/create-cosmosdb-resources-portal?WT.mc_id=DT-MVP-5001643">Quickstart: Create an Azure Cosmos account, database, container, and items from the Azure portal</a>.</p>
<p>Create a CosmosDB account. Here are examples when you create the CosmosDB account:</p>
<ul>
<li>API: Core (SQL)</li>
<li>Resource Group: <code>rg-dapr-demo</code></li>
<li>Account Name: <code>dapr-demo</code></li>
<li>Location: Select a location that is close to you</li>
</ul>
<p>Leave the other fields as default values.</p>
<p>Create a CosmosDB container:</p>
<ul>
<li>Database id: Create new, <code>dapr-demo</code></li>
<li>Container id: <code>dapr-state-store</code></li>
<li>Partition key: <code>/id</code></li>
</ul>
<p>Leave the other options to their defaults.</p>
<p>Once the CosmosDB container is created, you can get the URI and Keys in the Settings menu:</p>
<img src="/2022/09/20/take-your-first-step-with-dapr/image-20220912232246292.png" class="" title="The Keys menu of CosmosDB" alt="The Keys menu of CosmosDB">

<p>Figure 8 - The Keys menu of CosmosDB</p>
<p>Copy the URI and the PRIMARY KEY, and we will use them in the next section.</p>
<h3 id="Using-Azure-CosmosDB"><a href="#Using-Azure-CosmosDB" class="headerlink" title="Using Azure CosmosDB"></a>Using Azure CosmosDB</h3><p>Next, let us update the <code>statestore.yaml</code> file to use the Azure CosmosDB. You can make a backup for the default configuration. Then update the file as the following content:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">dapr.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Component</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">statestore</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">state.azure.cosmosdb</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">url</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&lt;The</span> <span class="string">URI</span> <span class="string">of</span> <span class="string">your</span> <span class="string">CosmosDB</span> <span class="string">container&gt;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">masterKey</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&lt;The</span> <span class="string">PRIMARY</span> <span class="string">Key</span> <span class="string">of</span> <span class="string">your</span> <span class="string">CosmosDB</span> <span class="string">container&gt;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">database</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&lt;The</span> <span class="string">database</span> <span class="string">name,</span> <span class="string">e.g.</span> <span class="string">dapr-demo&gt;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">collection</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&lt;The</span> <span class="string">container</span> <span class="string">name,</span> <span class="string">e.g.</span> <span class="string">dapr-state-store&gt;</span></span><br></pre></td></tr></table></figure>

<p>Run the below script again:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dapr run --app-id DaprCounter dotnet run</span><br></pre></td></tr></table></figure>

<p>You will see the application works too. But the counter is reset because it now uses the Azure CosmosDB as the state store. The implementation of the state store is pluggable!</p>
<h2 id="Managing-the-secrets-in-Dapr"><a href="#Managing-the-secrets-in-Dapr" class="headerlink" title="Managing the secrets in Dapr"></a>Managing the secrets in Dapr</h2><p>In the above config file, the secret is stored in plain text. It is not a good practice to store the secret in the configuration file. Dapr provides a secret management building block to manage the secrets. You can use it to store the secret and reference it in the configuration file.</p>
<p>The secret management building block is pluggable too. It supports multiple components for managing secrets. You can use the local file, Azure Key Vault, AWS Secrets Manager, etc. In this demo, we will use an Azure Key Vault as the secret store.</p>
<h3 id="Creating-an-Azure-Key-Vault"><a href="#Creating-an-Azure-Key-Vault" class="headerlink" title="Creating an Azure Key Vault"></a>Creating an Azure Key Vault</h3><p>Follow this guide to create your Azure Key Vault: <a href="https://docs.microsoft.com/en-us/azure/key-vault/general/quick-create-portal?WT.mc_id=DT-MVP-5001643">Quickstart: Create a key vault using the Azure portal</a>.</p>
<ul>
<li>Resource group: <code>rg-dapr-demo</code></li>
<li>Key vault name: <code>dapr-demo</code></li>
<li>Region: Select a region that is close to you</li>
<li>Pricing tier: Standard</li>
</ul>
<p>Leave the other options to their defaults.</p>
<h3 id="Storing-the-secret-in-the-Azure-Key-Vault"><a href="#Storing-the-secret-in-the-Azure-Key-Vault" class="headerlink" title="Storing the secret in the Azure Key Vault"></a>Storing the secret in the Azure Key Vault</h3><p>In the Azure Key Vault, click <strong>Secrets</strong> in the <strong>Objects</strong> menu, create a secret named <code>dapr-state-store-key</code> and set the value to the PRIMARY KEY of your CosmosDB container.</p>
<img src="/2022/09/20/take-your-first-step-with-dapr/image-20220913210354010.png" class="" title="The Secrets menu of Azure Key Vault" alt="The Secrets menu of Azure Key Vault">

<p>Figure 9 - The Secrets menu of Azure Key Vault</p>
<h3 id="Authenticating-the-application-to-the-Azure-Key-Vault"><a href="#Authenticating-the-application-to-the-Azure-Key-Vault" class="headerlink" title="Authenticating the application to the Azure Key Vault"></a>Authenticating the application to the Azure Key Vault</h3><p>Next, we will need to authenticate the Dapr components to the Azure Key Vault. Azure uses Azure AD as the identity and access management solution. It allows services (applications) to obtain access tokens to call other services, e.g. Azure Key Vault. In Azure terminology, an application is called a <strong>Service Principal</strong>.</p>
<p>To use Azure AD to authenticate the Dapr components, there are multiple ways:</p>
<ul>
<li>Authenticating using client credentials</li>
<li>Authenticating using a PFX certificate</li>
<li>Authenticating using a managed identity</li>
</ul>
<p>Because we run the demo locally, we will use the client credentials to authenticate the Dapr components. You can use PFX certificate or managed identity for production environment.</p>
<h4 id="Generating-a-new-Azure-AD-application-and-service-principal"><a href="#Generating-a-new-Azure-AD-application-and-service-principal" class="headerlink" title="Generating a new Azure AD application and service principal"></a>Generating a new Azure AD application and service principal</h4><p>Go to the Azure Portal and click the Cloud Shell icon on the top menu:</p>
<img src="/2022/09/20/take-your-first-step-with-dapr/image-20220913224455598.png" class="" title="Azure Cloud Shell" alt="Azure Cloud Shell">

<p>Figure 10 - Azure Cloud Shell</p>
<p>If you use your local terminal, you may need to login to Azure by running the following command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">az login</span><br></pre></td></tr></table></figure>

<p>If you have multiple subscriptions, run the following command to set your default subscription:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">az account <span class="built_in">set</span> -s [your subscription <span class="built_in">id</span>]</span><br></pre></td></tr></table></figure>

<p>Create an Azure AD application:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">APP_NAME=<span class="string">&quot;dapr-application&quot;</span></span><br><span class="line">APP_ID=$(az ad app create \</span><br><span class="line">  --display-name <span class="string">&quot;<span class="variable">$&#123;APP_NAME&#125;</span>&quot;</span> \</span><br><span class="line">  | jq -r .appId)</span><br></pre></td></tr></table></figure>

<p>Create a client secrete for the application:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">az ad app credential reset \</span><br><span class="line">  --<span class="built_in">id</span> <span class="string">&quot;<span class="variable">$&#123;APP_ID&#125;</span>&quot;</span> \</span><br><span class="line">  --years 2</span><br></pre></td></tr></table></figure>

<p>This command will generate a client secret for the application. It will also print some other values in the output. Copy the values below and save them in a safe place. You will need it in the next section.</p>
<ul>
<li>appId: The client id</li>
<li>name: The client name</li>
<li>password: The client secret</li>
<li>tenant: The Azure AD tenant id</li>
</ul>
<p>Next, create a service principal for the application:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SERVICE_PRINCIPAL_ID=$(az ad sp create \</span><br><span class="line">  --<span class="built_in">id</span> <span class="string">&quot;<span class="variable">$&#123;APP_ID&#125;</span>&quot;</span> \</span><br><span class="line">  | jq -r .<span class="built_in">id</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Service Principal ID: <span class="variable">$&#123;SERVICE_PRINCIPAL_ID&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>You will see a service principal ID in the output. Copy it and save it in a safe place. You will need it in the next section.</p>
<p>Now you have two Ids, the application Id and the service principal Id. You might wonder what the difference is. The application Id (clientId) is used to represent the Dpar components. The service principal Id is used to grant permissions to an application to access Azure resources, e.g. Azure Key Vault.</p>
<p>When a service principal is created, it does not have any permissions. You need to grant permissions to the service principal to access Azure resources. In this demo, we will grant the service principal to access the Azure Key Vault.</p>
<h4 id="Granting-the-service-principal-to-access-the-Azure-Key-Vault"><a href="#Granting-the-service-principal-to-access-the-Azure-Key-Vault" class="headerlink" title="Granting the service principal to access the Azure Key Vault"></a>Granting the service principal to access the Azure Key Vault</h4><p>Go to the Azure portal and click the Azure Key Vault you created in the previous section. Click <strong>Access configuration</strong> in the <strong>Settings</strong> menu. Click <strong>Go to access Policies</strong>:</p>
<img src="/2022/09/20/take-your-first-step-with-dapr/image-20220913230701904.png" class="" title="Config Azure Key Vault Access Policies" alt="Config Azure Key Vault Access Policies">

<p>Figure 11 - Config Azure Key Vault Access Policies</p>
<p>Click <strong>Create</strong> to create a new access policy. On the first <strong>Permission</strong> tab, select <strong>Secret permissions</strong> and check <strong>Get</strong>:</p>
<img src="/2022/09/20/take-your-first-step-with-dapr/image-20220913230918188.png" class="" title="Set up access permissions" alt="Set up access permissions">

<p>Figure 12 - Set up access permissions</p>
<p>On the second <strong>Principal</strong> tab, we can search for the service principal we created in the previous section:</p>
<img src="/2022/09/20/take-your-first-step-with-dapr/image-20220913231224637.png" class="" title="Assign the service principal" alt="Assign the service principal">

<p>Figure 13 - Assign the service principal</p>
<p>Select the <code>dapr-application</code> and click <strong>Next</strong>. Then click <strong>Next</strong> again then click <strong>Create</strong> to create the access policy.</p>
<h3 id="Creating-a-Dapr-component-to-access-the-Azure-Key-Vault"><a href="#Creating-a-Dapr-component-to-access-the-Azure-Key-Vault" class="headerlink" title="Creating a Dapr component to access the Azure Key Vault"></a>Creating a Dapr component to access the Azure Key Vault</h3><p>Now we have a service principal that can access the Azure Key Vault. We need to update the configuration file to use the service principal to access the Azure Key Vault.</p>
<p>Create a new file named <code>azurekeyvault.yaml</code> in the <code>dapr\components</code> folder. Add the following content to the file:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">dapr.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Component</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">azurekeyvault</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">secretstores.azure.keyvault</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">vaultName</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&quot;dapr-demo&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">azureTenantId</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&quot;&lt;your tenant id&gt;&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">azureClientId</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&quot;&lt;your client id&gt;&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">azureClientSecret</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&quot;&lt;your client secret&gt;&quot;</span></span><br></pre></td></tr></table></figure>

<p>Please replace the values of <code>azureTenantId</code>, <code>azureClientId</code> and <code>azureClientSecret</code> with the values you saved in the previous section:</p>
<ul>
<li>azureTenantId: tenant</li>
<li>azureClientId: appId</li>
<li>azureClientSecret: password</li>
</ul>
<p>If you want to use a PFX certificate to authenticate the Dapr components, you can use the following component:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">dapr.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Component</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">azurekeyvault</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">secretstores.azure.keyvault</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">vaultName</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&quot;dapr-demo&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">azureTenantId</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&quot;&lt;your tenant id&gt;&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">azureClientId</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&quot;&lt;your client id&gt;&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">azureCertificateFile</span></span><br><span class="line">    <span class="attr">value :</span> <span class="string">&quot;&lt;pfx certificate file local path&gt;&quot;</span></span><br></pre></td></tr></table></figure>

<p>Now we have a Dapr secret store component that can access the Azure Key Vault. We can use this component to retrieve the secret we stored in the Azure Key Vault.</p>
<h2 id="Using-Dapr-secret-store-to-access-the-state-store"><a href="#Using-Dapr-secret-store-to-access-the-state-store" class="headerlink" title="Using Dapr secret store to access the state store"></a>Using Dapr secret store to access the state store</h2><p>The last step is to update the configuration file for the state store component to use the secret store component to access the Azure Key Vault.</p>
<p>Update the <code>statestore.yaml</code> file in the <code>dapr\components</code> folder as the following content:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">dapr.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Component</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">statestore</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">state.azure.cosmosdb</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">url</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&lt;The</span> <span class="string">URI</span> <span class="string">of</span> <span class="string">your</span> <span class="string">CosmosDB</span> <span class="string">container&gt;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">masterKey</span></span><br><span class="line">    <span class="attr">secretKeyRef:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dapr-state-store-key</span></span><br><span class="line">      <span class="attr">key:</span> <span class="string">dapr-state-store-key</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">database</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">dapr-demo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">collection</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">dapr-state-store</span></span><br><span class="line"><span class="attr">auth:</span></span><br><span class="line">  <span class="attr">secretStore:</span> <span class="string">azurekeyvault</span></span><br></pre></td></tr></table></figure>

<p>Note that we use the <code>secretKeyRef</code> to replace the hard-coded master key with the secret store component. The <code>secretStore</code> is the name of the secret store component we created in the previous section. In this way, we remove the plain text master key from the configuration file so it would be safe to check in the configuration file to source control. The defect with this demo is that we still have a client secret in the configuration file. To remove the client secret from the configuration file, we can use a PFX certificate to authenticate the Dapr components. This demo is just to show how to use the secret store component to access the Azure Key Vault.</p>
<p>Now we can run the application to see if it can access the Azure Key Vault and the Cosmos DB. If everything works fine, you should see the application works as expected.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this article, we learned what Dapr is and how to use Dapr to implement a portable state store, which can support Redis and Azure CosmosDB as the implementations. We also learned how to use Dapr to access the Azure Key Vault to retrieve the secret. Note that Dapr has many other components that can be used to build a portable application. To learn more about how to configure the other Dapr components, please check the <a href="https://docs.dapr.io/">Dapr documentation</a>.</p>
<p>Thanks for reading!</p>
]]></content>
      <categories>
        <category>Microservices</category>
      </categories>
      <tags>
        <tag>.NET</tag>
        <tag>Azure</tag>
        <tag>Dapr</tag>
        <tag>Microservices</tag>
      </tags>
  </entry>
  <entry>
    <title>The story of CITANZ and me</title>
    <url>/2020/09/28/the-story-of-citanz-and-me/</url>
    <content><![CDATA[<p>Around two month ago, I was awarded Microsoft MVP for the 5th year. I would like to take this opportunity to reflect my last 3 years. After one year of preparation, I migrated to New Zealand from China in 2018. That was a huge change to me and my family. I would like to let you know how huge the impact is to have such amazing community support. This story is about CITANZ (Chinese IT Association NZ) and myself.</p>
<span id="more"></span>

<img src="/2020/09/28/the-story-of-citanz-and-me/citanz.jpg" class="" title="CITANZ Event End-of-Year Carnival" alt="CITANZ Event End-of-Year Carnival">

<p>First of all, I would like to appreciate the Microsoft MVP program. Initially, I just published some blogs regarding my .NET journey. Afterwards, I started to organize local events for developers and make presentations for meetups and conferences, eg. TechEd China. With the support from Microsoft, I have been involved in various community activities when I lived in China. In this period, I learned lots from other MVPs of GCR and built a good relationship with each other. I enjoy helping other developers and growing together, which is really a good sense of accomplishment to me.</p>
<p>After 2018, my family and I migrated to New Zealand, a beautiful country that I have never seen before. But the first challenge to me is how to engage a new English environment and fit in the New Zealand culture. I was quite upset when I just arrived here. I could barely order a pizza or answer a call because of various accents. Even though I was very confident “I can face challenges” before, my previous experience did not work well and I lost my confidence, especially for how to have effective communication.</p>
<p>Fortunately, my teammates helped me a lot. Everyone is patient and happy to guide me to achieve the goals. Also, I started to attend the local meetups. I cannot forget my first time to attend a local .NET User Group event. The organizer was friendly and I conquered my nervousness soon. From my perspective, the atmospheres of local meetups between China and New Zealand are slightly different. Regardless of that, attending local meetups is a good way to extend our connections for more opportunities. I was also keen to know more Chinese in Wellington because we come from the same background and culture.</p>
<p>One day I discovered some Chinese IT professionals also have a periodic meetup in Wellington. I felt so excited then joined the meetup soon. The members in the meet-up groups are talented and happy to help others. I found out it is exactly what I have done in China. In an immigrant country, the connections with people who have the same roots are very important. The organizer also told me they were trying to build a formal organization to connect more Chinese IT professionals in New Zealand. I expressed my interest and joined the working group to participate in the preparation. I would like to contribute to this organization to help others, especially for someone like myself because I understand how tough the beginning period is like for the new migrants.</p>
<p>The mission of CITANZ - as Non-Profit Organization is to foster the professional development of Chinese IT professionals across New Zealand. We are here to prepare them with the skills, knowledge, professional and social connections needed to achieve their own aspirations.</p>
<p>Now, it has been more than 2 years since CITANZ was founded. During this period, we have successfully delivered more than 35 meetups that cover a large range of diversified topics, such as DevOps, blockchain, cloud computing, software development, Agile, Startup, job hunting and many more. We have 100+ members who work for various IT areas. We built a strong effective working group to operate meetups, PR&#x2F;Marketing, Technology, Business Development and Job referral, etc. Specifically, I have leveraged my experience organizing meetups, hosting events and also delivering presentations regarding Microsoft technologies. I have regained my confidence from helping others. That is the familiar feeling that encourages me to contribute more to communities.</p>
<p>Furthermore, one important goal of CITANA is to help new migrants get used to living and working in New Zealand. We invited local native English speakers who have delivered presentations that cover job hunting, DevOps and Agile, etc. We also collaborated with other local communities, eg. Wellington Azure AI, to host some global events, such as <strong>Microsoft Azure DevOps Launch</strong>, <strong>Global Azure Bootcamp</strong>, <strong>Global AI Nights</strong> and <strong>Xamarin Monkeyfest</strong>, etc. To help job hunters, we organized the interview panel with multiple guest speakers from a range of diversified disciplines and received very positive feedback. In addition, we have delivered workshops to upskill members regarding Docker and Containers, and we have planned for more training and workshops in the future.</p>
<p>CITANZ is still a small humble organization, making lots of mistakes on the way, but we are grateful for those support and understanding from our members. It has been an amazing journey so far and we also learned a lot. We sincerely hope CITANZ would be the home for all Chinese IT professionals in New Zealand. With almost three year’s journey, I see the great value of having such an organization. I believe that everyone engaging in the communities will be benefited eventually in all different ways. For myself, I could not be more proud of the achievements that we have done so far. I would like to appreciate every member and our working group for the long-term support. It is my privilege to have this opportunity to serve the community.</p>
<p>Recently, the COVID-19 has significantly changed the world - which means we need to have digital transformation for the activities. This year we focus more on the online events to constantly build connections and deliver value for our members. We believe that we can still make a flourish community based on technologies. Let us work together to achieve more!</p>
<p>I would like to end this article by one of our members - Bruce Li’s voice. He said,</p>
<blockquote>
<p>“Thanks to CITANZ for connecting me to such an active and energetic IT community. Those people, no matter green hands or experts in the field, are all friendly and open to this ever-changing era. And thanks to them, I have broadened my horizon, seen a bigger world and learn the attitude to be a person who learns and shares forever.”</p>
</blockquote>
<p>Find out more here: <a href="https://www.cita.org.nz/">https://www.cita.org.nz</a></p>
<p>Thanks.</p>
]]></content>
      <categories>
        <category>Community</category>
      </categories>
      <tags>
        <tag>Community</tag>
        <tag>CITANZ</tag>
      </tags>
  </entry>
  <entry>
    <title>Translator Helper - A VS Code Extension to help you translate documents</title>
    <url>/2020/01/11/translator-helper-a-vs-code-extension-to-help-you-translate-documents/</url>
    <content><![CDATA[<p><a href="https://marketplace.visualstudio.com/items?itemName=XiaodiYan.translator-helper">Translator Helper</a> is a VS Code Extension to help you translate documents. It is easy to use. Just press <kbd>Alt</kbd>+<kbd>T</kbd>. The text will be automatically translated to another language and inserted after the current text as expected.</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><a href="docs.microsoft.com">Microsoft Docs</a> is the new generation of Microsoft’s tech documentation to replace MSDN. It provides bunches of tutorials, API reference, code examples and best practices for users, developers and IT professionals. But for non-English users, one issue is some documents are translated by machines without proofreading, which means the readability is not good enough.</p>
<span id="more"></span>

<p>I started to be involved in the Chinese-localization of docs since 2017 by proofreading the auto-translated contents. All the contents of Docs are hosted on GitHub so we can easily fork the repositories and make changes then push the PRs. In this period, I developed a VS Code Extension which can significantly improve the efficiency of the proofreading. I just got spare times on holiday so I published it to the marketplace after adding the icon and refactoring some codes. In this article, I will introduce this extension and I hope more and more developers would take part in the localization of Docs to provide more high-quality localized contents.</p>
<img src="/2020/01/11/translator-helper-a-vs-code-extension-to-help-you-translate-documents/Snipaste_2020-01-09_12-42-22.png" class="">

<p>The file type of Docs is <a href="https://daringfireball.net/projects/markdown/">markdown</a>. I prefer to use VS Code to edit markdown files. Before I had this extension, when I proofread the documents, I usually select the whole paragraph and copy &amp; paste it to <a href="https://translate.google.com/">Google translate</a>, then copy the translated text and paste it back to VS Code. I compare the results from Google and the machine-translated contents of Docs and manually edit them by proper text. But the select-copy-paste action is quite tedious. Can we have tools to simplify it? I have tried lots of extensions related to translation in the marketplace but none of them can easily implement this process. So I had to write it myself. The best thing is VS Code has good documents regarding APIs. I just spent a couple of hours to implement the main functionalities. Now, I can press <kbd>Alt</kbd>+<kbd>T</kbd> to translate the whole paragraph automatically and no need to copy &amp; paste text between VS Code and Google Chrome anymore.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Search <em>translator helper</em> in VS Code Extension Marketplace as shown below:</p>
<img src="/2020/01/11/translator-helper-a-vs-code-extension-to-help-you-translate-documents/image-20200109092323922.png" class="" title="Install Translator Helper" alt="Install Translator Helper">

<p>Click <strong>install</strong> to install it.</p>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>By the default configuration, Translator Helper calls Google Translate API to translate the text. For Chinese users, Google CN service is supported.</p>
<p>Press <kbd>F1</kbd> or <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>P</kbd> to call the Command Palette of VS Code, then type <em>settings</em> and select <strong>Open User Settings</strong>:</p>
<img src="/2020/01/11/translator-helper-a-vs-code-extension-to-help-you-translate-documents/image-20200109093255284.png" class="" title="Open User Settings" alt="Open User Settings">

<p>You can find the configurations of <strong>Translator Helper</strong>:</p>
<img src="/2020/01/11/translator-helper-a-vs-code-extension-to-help-you-translate-documents/settings.png" class="" title="configurations of Translator Helper" alt="configurations of Translator Helper">

<p>There are three settings as below:</p>
<ul>
<li><code>translatorHelper.api</code>: Specify the translation API. Available options are <code>google</code>, <code>google-cn</code> . The default value is <code>google</code>.</li>
<li><code>translatorHelper.sourceLanguage</code>: Specify the source language code. The default value is <code>en</code>.</li>
<li><code>translatorHelper.targetLanguage</code>: Specify the target language code. The default value is <code>zh-CN</code>.</li>
</ul>
<p>The source and target languages are identified using the <a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">iso-639-1</a> codes. You can find all the supported languages here: <a href="https://cloud.google.com/translate/docs/languages">https://cloud.google.com/translate/docs/languages</a>.</p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>After specifying correct languages, we can start to use it. Open the file and place the cursor in any position of the paragraph you need to translate, then press <kbd>Alt</kbd>+<kbd>T</kbd>. The whole paragraph will be selected automatically then the translated text will be inserted after the paragraph, as shown below:</p>
<img src="/2020/01/11/translator-helper-a-vs-code-extension-to-help-you-translate-documents/sample2.gif" class="" title="Translate and Insert" alt="Translate and Insert">

<p>The translated text will also be selected so you can easily copy &amp; paste it anywhere. The result from Google Translate is quite precise so we just need to adjust some words.</p>
<p>In addition, you can translate words or sentences. Select a word or a sentence, then press <kbd>Ctrl</kbd>+<kbd>T</kbd>, the translated text will be shown on the status bar. You can also easily copy the translated text to the clipboard by clicking it.</p>
<img src="/2020/01/11/translator-helper-a-vs-code-extension-to-help-you-translate-documents/sample1.gif" class="" title="Translate on the status bar" alt="Translate on the status bar">

<p>That is it!</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p><strong>Translator Helper</strong> is a simple VS Code Extension for my specific scenario which indeed improves my productivity regarding docs translation. My next step is to support Microsoft Cognitive Service. If you are interested in it, welcome to join me to improve it. Also, I will write an article to introduce how to develop a VS Code Extension such as Translator Helper. Please continue to follow my blog if you are willing to develop your own extension. Thanks.</p>
]]></content>
      <categories>
        <category>My Projects</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>vscode extension</tag>
        <tag>translate</tag>
        <tag>open source</tag>
      </tags>
  </entry>
  <entry>
    <title>Using Azure Automation Runbooks and Schedules to automatically turn on/off your VMs</title>
    <url>/2020/08/31/using-azure-automation-runbooks-and-schedules-to-automatically-turn-on-off-your-vms/</url>
    <content><![CDATA[<p>Azure Automation is a service of Azure that allows us to automate Azure management tasks and orchestrate actions. It is widely used in operations to help us save time and reduce human errors. Recently, I just created the scripts to turn on&#x2F;off the virtual machines on schedules to save cost. If you have the same requirement, feel free to copy&#x2F;paste the scripts and save your money.</p>
<span id="more"></span>

<p>I assume you already have your Azure subscription. And you may have a few VMs deployed in Azure, but we know the price of VMs is quite expensive and it would be better to deallocate the VM when you do not use it. A scenario is you probably have your own build agents for your DevOps pipelines, and you do not need to keep them running on weekends. There are many ways to do that, such as Azure Functions or just create a script on your laptop. In this article, I will show you how to use Azure Automation to automate this process with Runbooks and Schedules. In this article, I will be focusing on the PowerShell scripts because you can re-run it any time and it is easy to share. You do not have to type the scripts now. I will explain the fundamentals and you can just copy the out-of-box script at the end of this article.</p>
<p>Find more here: <a href="https://docs.microsoft.com/en-us/azure/automation/automation-intro?WT.mc_id=AZ-MVP-5001643">An introduction to Azure Automation</a>.</p>
<h2 id="Creating-an-Automation-account"><a href="#Creating-an-Automation-account" class="headerlink" title="Creating an Automation account"></a>Creating an Automation account</h2><p>Before we get started, we need to have an Automation account. Unfortunately, we cannot use ARM template to create Automation account for this scenario because ARM template does not support the creation of the <strong>Automation Run As account</strong>, which is required in the scripts. <strong>Run As account</strong> provides the authentication for managing resources in Azure. Basically, it creates certificates in the specified Automation account. For more detail: <a href="https://docs.microsoft.com/en-us/azure/automation/manage-runas-account?WT.mc_id=AZ-MVP-5001643">Manage an Azure Automation Run As account</a>.</p>
<p>We can use Azure portal to create an Automation account with Run As account support.</p>
<img src="/2020/08/31/using-azure-automation-runbooks-and-schedules-to-automatically-turn-on-off-your-vms/image-20200826171820597.png" class="" title="Create a new Automation account" alt="Create a new Automation account">

<p>I will not copy&#x2F;paste the full steps because you can find the detail here: <a href="https://docs.microsoft.com/en-us/azure/automation/automation-create-standalone-account?WT.mc_id=AZ-MVP-5001643">Create a standalone Azure Automation account</a>. One thing you need to be aware of is when you create it in Azure portal, please make sure <strong>Create Azure Run As account</strong> is selected:</p>
<img src="/2020/08/31/using-azure-automation-runbooks-and-schedules-to-automatically-turn-on-off-your-vms/image-20200818143227089.png" class="" title="Create Azure Run As account" alt="Create Azure Run As account">

<p>Once the Automation is created, you can check the <strong>Run as accounts</strong> in <strong>Account Settings</strong> section:</p>
<img src="/2020/08/31/using-azure-automation-runbooks-and-schedules-to-automatically-turn-on-off-your-vms/image-20200826180355759.png" class="" title="Azure Run As account" alt="Azure Run As account">

<p>Now let us set up the environment.</p>
<h2 id="Updating-to-PowerShell-7-x"><a href="#Updating-to-PowerShell-7-x" class="headerlink" title="Updating to PowerShell 7.x"></a>Updating to PowerShell 7.x</h2><p>Windows 10 has PowerShell 5.x installed by default. You can use the below command to check the version of PowerShell:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-Host</span> | <span class="built_in">Select-Object</span> Version</span><br></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">(<span class="built_in">Get-Host</span>).Version</span><br></pre></td></tr></table></figure>

<p>On my current laptop, the version is 5.1.18362.752. However, PowerShell 7.x and later is the recommended version for use with Azure on all platforms. It supports multiple platforms, such as Windows, macOS, and Linux. So we will use it today. You can find more detail here: <a href="https://docs.microsoft.com/en-us/powershell/scripting/install/migrating-from-windows-powershell-51-to-powershell-7?view=powershell-7&WT.mc_id=AZ-MVP-5001643">Migrating from Windows PowerShell 5.1 to PowerShell 7</a>.</p>
<p>Please download and install PowerShell 7.x here: <a href="https://github.com/PowerShell/PowerShell/releases/">https://github.com/PowerShell/PowerShell/releases/</a></p>
<h2 id="Creating-a-script-to-start-stop-VMs"><a href="#Creating-a-script-to-start-stop-VMs" class="headerlink" title="Creating a script to start&#x2F;stop VMs"></a>Creating a script to start&#x2F;stop VMs</h2><p>Now, let us create the runbooks to start&#x2F;stop VMs. Create a folder named <strong>automations</strong> then create a subfolder named <strong>runbooks</strong>. Use VS Code to open it. Next, create a new file named <strong>aa-startVMs.ps1</strong> in <strong>runbooks</strong> folder. Update the content like this:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Param</span>(</span><br><span class="line">    [<span class="built_in">string</span>[]]<span class="variable">$VmNames</span>,</span><br><span class="line">    [<span class="built_in">string</span>]<span class="variable">$ResourceGroupName</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Authenticate using ServicePrincipal RunAs Account and logging in</span></span><br><span class="line"><span class="variable">$ConnectionName</span> = <span class="string">&quot;AzureRunAsConnection&quot;</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment"># Get the connection &quot;AzureRunAsConnection &quot;</span></span><br><span class="line">    <span class="variable">$ServicePrincipalConnection</span> = <span class="built_in">Get-AutomationConnection</span> <span class="literal">-Name</span> <span class="variable">$ConnectionName</span>      </span><br><span class="line">    <span class="built_in">Write-Output</span> <span class="string">&quot;Logging in to Azure...&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable">$account</span> = <span class="built_in">Add-AzureRmAccount</span> `</span><br><span class="line">        <span class="literal">-ServicePrincipal</span> `</span><br><span class="line">        <span class="literal">-TenantId</span> <span class="variable">$ServicePrincipalConnection</span>.TenantId `</span><br><span class="line">        <span class="literal">-ApplicationId</span> <span class="variable">$ServicePrincipalConnection</span>.ApplicationId `</span><br><span class="line">        <span class="literal">-CertificateThumbprint</span> <span class="variable">$ServicePrincipalConnection</span>.CertificateThumbprint </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$ServicePrincipalConnection</span>) &#123;</span><br><span class="line">        <span class="variable">$ErrorMessage</span> = <span class="string">&quot;Connection <span class="variable">$ConnectionName</span> not found.&quot;</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="variable">$ErrorMessage</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">Write-Error</span> <span class="literal">-Message</span> <span class="variable">$_</span>.Exception</span><br><span class="line">        <span class="keyword">throw</span> <span class="variable">$_</span>.Exception</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Write-Output</span> <span class="variable">$account</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">Write-Output</span> <span class="string">&quot;Starting VMs...&quot;</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$vmName</span> <span class="keyword">in</span> <span class="variable">$VmNames</span>) &#123;</span><br><span class="line">        <span class="built_in">Start-AzureRmVM</span> `</span><br><span class="line">            <span class="literal">-ResourceGroupName</span> <span class="variable">$ResourceGroupName</span> `</span><br><span class="line">            <span class="literal">-Name</span> <span class="variable">$vmName</span></span><br><span class="line">        <span class="built_in">Write-Output</span> <span class="string">&quot;<span class="variable">$vmName</span> started.&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Write-Output</span> <span class="string">&quot;VMs successfully started.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">Write-Error</span> <span class="literal">-Message</span> <span class="variable">$_</span>.Exception</span><br><span class="line">    <span class="keyword">throw</span> <span class="variable">$_</span>.Exception</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>I created two parameters for this script. The first one is an array that contains all the VMs you need to control. The second parameter is the resource group name. Then we login by the <strong>Run as account</strong>. Finally, we use <code>Start-AzureRmVM</code> cmdlet to start the VMs.</p>
<p>Similarly, you can create a <strong>aa-stopVMs.ps1</strong> script to stop the VMs in <strong>runbooks</strong> folder:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The login script is omitted here</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">Write-Output</span> <span class="string">&quot;Stopping VMs...&quot;</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$vmName</span> <span class="keyword">in</span> <span class="variable">$VmNames</span>) &#123;</span><br><span class="line">        <span class="built_in">Stop-AzureRmVM</span> `</span><br><span class="line">            <span class="literal">-ResourceGroupName</span> <span class="variable">$ResourceGroupName</span> `</span><br><span class="line">            <span class="literal">-Name</span> <span class="variable">$vmName</span> `</span><br><span class="line">            <span class="literal">-Force</span></span><br><span class="line">        <span class="built_in">Write-Output</span> <span class="string">&quot;<span class="variable">$vmName</span> stopped.&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Write-Output</span> <span class="string">&quot;VMs successfully stopped.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">Write-Error</span> <span class="literal">-Message</span> <span class="variable">$_</span>.Exception</span><br><span class="line">    <span class="keyword">throw</span> <span class="variable">$_</span>.Exception</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can create the runbooks in the Azure portal. But we will use the PowerShell script to import the runbooks.</p>
<h2 id="Creating-deploy-script"><a href="#Creating-deploy-script" class="headerlink" title="Creating deploy script"></a>Creating deploy script</h2><p>Create a new script in <strong>automations</strong> folder  and name it as <strong>deploy.ps1</strong>. Then add some parameters as shown below:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">string</span>]<span class="variable">$SubscriptionName</span> = <span class="string">&#x27;YouSubscriptionName&#x27;</span></span><br><span class="line">[<span class="built_in">string</span>]<span class="variable">$VmsResourceGroupName</span> = <span class="string">&quot;YourVMsResourceGroupName&quot;</span></span><br><span class="line">[<span class="built_in">string</span>]<span class="variable">$ResourceGroupName</span> = <span class="string">&quot;YourAutomationAccountResourceGroupName&quot;</span></span><br><span class="line">[<span class="built_in">string</span>]<span class="variable">$AutomationAccountName</span> = <span class="string">&quot;YourAutomationAccountName&quot;</span></span><br><span class="line">[<span class="built_in">string</span>]<span class="variable">$RunAsAccountName</span> = <span class="string">&quot;AzureRunAsConnection&quot;</span></span><br><span class="line">[<span class="built_in">string</span>]<span class="variable">$StartVMsRunbookName</span> = <span class="string">&quot;aa-startVMs&quot;</span></span><br><span class="line">[<span class="built_in">string</span>]<span class="variable">$StopVMsRunbookName</span> = <span class="string">&quot;aa-stopVMs&quot;</span></span><br><span class="line">[<span class="built_in">string</span>]<span class="variable">$StartVMsScheduleName</span> = <span class="string">&quot;ScheduledStartVMs&quot;</span></span><br><span class="line">[<span class="built_in">string</span>]<span class="variable">$StopVMsScheduleName</span> = <span class="string">&quot;ScheduledStopVMs&quot;</span></span><br><span class="line">[<span class="built_in">string</span>]<span class="variable">$StartTime</span> = <span class="string">&quot;09:00:00&quot;</span></span><br><span class="line">[<span class="built_in">string</span>]<span class="variable">$StopTime</span> = <span class="string">&quot;17:00:00&quot;</span></span><br><span class="line">[<span class="built_in">string</span>[]]<span class="variable">$VmNames</span> = <span class="selector-tag">@</span>(<span class="string">&quot;vm-test-01&quot;</span>, <span class="string">&quot;vm-test-02&quot;</span>, <span class="string">&quot;vm-test-03&quot;</span>)</span><br><span class="line">[<span class="built_in">string</span>]<span class="variable">$TimeZoneId</span> = <span class="string">&quot;New Zealand Standard Time&quot;</span></span><br><span class="line">[<span class="type">System.DayOfWeek</span>[]]<span class="variable">$WeekDays</span> = <span class="selector-tag">@</span>([<span class="type">System.DayOfWeek</span>]::Monday..[<span class="type">System.DayOfWeek</span>]::Friday)</span><br></pre></td></tr></table></figure>

<p>These parameters can help us easily change the configuration if we need to re-deploy the script. For this case, I will turn on the VMs at 9:00 am and turn off them at 5:00 pm every workday.</p>
<h2 id="Installing-Az-module"><a href="#Installing-Az-module" class="headerlink" title="Installing Az module"></a>Installing Az module</h2><p>Starting in December 2018, the Azure PowerShell Az module is in general release and is now the intended PowerShell module for interacting with Azure. If you have installed PowerShell 7.x, you can install Az module without impacting the existing AzureRM module. </p>
<p>We need to make sure the required Az module installed on our laptop. Add the below script to <strong>deploy.ps1</strong>:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># We do not support having both the AzureRM and Az modules installed for PowerShell 5.1 on Windows at the same time. </span></span><br><span class="line"><span class="comment"># If you need to keep AzureRM available on your system, install the Az module for PowerShell 6.2.4 or later.</span></span><br><span class="line"><span class="comment"># Please intall PowerShell 6.2.4 or later. https://github.com/PowerShell/PowerShell/releases/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$PSVersionTable</span>.PSEdition <span class="operator">-eq</span> <span class="string">&#x27;Desktop&#x27;</span> <span class="operator">-and</span> (<span class="built_in">Get-Module</span> <span class="literal">-Name</span> AzureRM <span class="literal">-ListAvailable</span>)) &#123;</span><br><span class="line">    <span class="built_in">Write-Warning</span> <span class="literal">-Message</span> (<span class="string">&#x27;Az module not installed. Having both the AzureRM and &#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;Az modules installed at the same time is not supported.&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">Install-Module</span> <span class="literal">-Name</span> Az <span class="literal">-AllowClobber</span> <span class="literal">-Scope</span> CurrentUser</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can run the above script separately in PowerShell 7.x to install the latest Az module. But for easy-sharing, I will leave it in the <strong>deploy.ps1</strong> script so anyone who has not installed PowerShell 7.x does not need to worry about that.</p>
<p>Then we can use <code>Connect-AzAccount</code> cmdlet to connect to your Azure account. Add the below script to <strong>deploy.ps1</strong> script:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$SubscriptionName</span> = <span class="string">&#x27;Your subscription Name&#x27;</span></span><br><span class="line"><span class="built_in">Connect-AzAccount</span></span><br><span class="line"><span class="comment"># Set the current context if you have multiple Azure subscriptions</span></span><br><span class="line"><span class="built_in">Set-AzContext</span> <span class="literal">-Name</span> <span class="variable">$SubscriptionName</span> <span class="literal">-Subscription</span> <span class="variable">$SubscriptionName</span></span><br></pre></td></tr></table></figure>

<p>Because you probably have multiple Azure subscriptions so here we need to specify what subscription you need to operate in case you have another default Azure context.</p>
<p>When you run the script, you will need to open a link then type the given code to complete the authentication. Then you can use the new Az module to operate the Azure resources.</p>
<p>For more details about migrating from AzureRM to Az: <a href="https://docs.microsoft.com/en-us/powershell/azure/migrate-from-azurerm-to-az?view=azps-4.5.0&WT.mc_id=AZ-MVP-5001643">Migrate Azure PowerShell from AzureRM to Az</a>.</p>
<h2 id="Importing-Runbooks"><a href="#Importing-Runbooks" class="headerlink" title="Importing Runbooks"></a>Importing Runbooks</h2><p>Next, we need to import the runbooks we created in <strong>runbooks</strong> folder. But we also need to make sure the automation Run as account exists. Add the below script to <strong>deploy.ps1</strong>:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ensure that the Run As Account exists:</span></span><br><span class="line"><span class="variable">$AutomationConnection</span> = <span class="built_in">Get-AzAutomationConnection</span> `</span><br><span class="line">    <span class="literal">-ResourceGroupName</span> <span class="variable">$ResourceGroupName</span> `</span><br><span class="line">    <span class="literal">-AutomationAccountName</span> <span class="variable">$AutomationAccountName</span> `</span><br><span class="line">    <span class="literal">-Name</span> <span class="variable">$RunAsAccountName</span> `</span><br><span class="line">    <span class="literal">-ErrorAction</span> SilentlyContinue</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$AutomationConnection</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;Could not find Automation Connection: <span class="variable">$</span>(<span class="variable">$RunAsAccountName</span>). You must create a Run As Account before using this Automation Account.&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then we can find the scripts in <strong>runbooks</strong> folder and import them:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Write-Output</span> <span class="string">&quot;Deploying runbooks...&quot;</span></span><br><span class="line"><span class="variable">$AllRunbookFileNames</span> = <span class="built_in">Get-ChildItem</span> <span class="string">&quot;runbooks&quot;</span> | <span class="built_in">ForEach-Object</span> &#123; <span class="variable">$_</span>.Name &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$RunbookFileName</span> <span class="keyword">in</span> <span class="variable">$AllRunbookFileNames</span>) &#123;</span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="string">&quot;Importing <span class="variable">$RunbookFileName</span>&quot;</span></span><br><span class="line">    <span class="variable">$RunbookName</span> = <span class="variable">$RunbookFileName</span>.Replace(<span class="string">&quot;.ps1&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable">$existingRunbook</span> = <span class="built_in">Get-AzAutomationRunbook</span> `</span><br><span class="line">        <span class="literal">-ResourceGroupName</span> <span class="variable">$ResourceGroupName</span> `</span><br><span class="line">        <span class="literal">-AutomationAccountName</span> <span class="variable">$AutomationAccountName</span> `</span><br><span class="line">        <span class="literal">-Name</span> <span class="variable">$RunbookName</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$existingRunbook</span>) &#123;</span><br><span class="line">        <span class="built_in">Remove-AzAutomationRunbook</span> `</span><br><span class="line">            <span class="literal">-ResourceGroupName</span> <span class="variable">$ResourceGroupName</span> `</span><br><span class="line">            <span class="literal">-AutomationAccountName</span> <span class="variable">$AutomationAccountName</span> `</span><br><span class="line">            <span class="literal">-Name</span> <span class="variable">$RunbookName</span> `</span><br><span class="line">            <span class="literal">-Force</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Import-AzAutomationRunbook</span> `</span><br><span class="line">        <span class="literal">-ResourceGroupName</span> <span class="variable">$ResourceGroupName</span> `</span><br><span class="line">        <span class="literal">-AutomationAccountName</span> <span class="variable">$AutomationAccountName</span> `</span><br><span class="line">        <span class="literal">-Name</span> <span class="variable">$RunbookName</span> `</span><br><span class="line">        <span class="literal">-Path</span> <span class="string">&quot;runbooks/<span class="variable">$RunbookFileName</span>&quot;</span> `</span><br><span class="line">        <span class="literal">-Type</span> PowerShell</span><br><span class="line">    <span class="built_in">Publish-AzAutomationRunbook</span> `</span><br><span class="line">        <span class="literal">-ResourceGroupName</span> <span class="variable">$ResourceGroupName</span> `</span><br><span class="line">        <span class="literal">-AutomationAccountName</span> <span class="variable">$AutomationAccountName</span> `</span><br><span class="line">        <span class="literal">-Name</span> <span class="variable">$RunbookName</span> `</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Write-Output</span> <span class="string">&quot;Deploying runbooks completed.&quot;</span></span><br></pre></td></tr></table></figure>

<p>With this script, we can import the runbooks to the given automation account.</p>
<h2 id="Creating-Schedules"><a href="#Creating-Schedules" class="headerlink" title="Creating Schedules"></a>Creating Schedules</h2><p>To schedule a runbook to start at the specified time, we need to create a schedule then link the runbook to it. A schedule can be configured to either run once or on a recurring hourly&#x2F;daily&#x2F;weekly&#x2F;monthly or specific days of the week or months. We can link one runbook to multiple schedules, or multiple runbooks can be linked to one schedule. For more detail: <a href="https://docs.microsoft.com/en-us/azure/automation/shared-resources/schedules?WT.mc_id=AZ-MVP-5001643">Manage schedules in Azure Automation</a>.</p>
<p>The next step is to create the schedules to execute the runbooks. We will create two schedules:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Write-Output</span> <span class="string">&quot;Deploying schedules...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create or update the start schedule</span></span><br><span class="line"><span class="variable">$StartTime</span> = (<span class="built_in">Get-Date</span> <span class="variable">$StartTime</span>).AddDays(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">New-AzAutomationSchedule</span> `</span><br><span class="line">    <span class="literal">-AutomationAccountName</span> <span class="variable">$AutomationAccountName</span> `</span><br><span class="line">    <span class="literal">-ResourceGroupName</span> <span class="variable">$ResourceGroupName</span> `</span><br><span class="line">    <span class="literal">-Name</span> <span class="variable">$StartVMsScheduleName</span> `</span><br><span class="line">    <span class="literal">-StartTime</span> <span class="variable">$StartTime</span> `</span><br><span class="line">    <span class="literal">-DaysOfWeek</span> <span class="variable">$WeekDays</span> `</span><br><span class="line">    <span class="literal">-WeekInterval</span> <span class="number">1</span> `</span><br><span class="line">    <span class="literal">-TimeZone</span> <span class="variable">$TimeZoneId</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># Create or update the stop schedule</span></span><br><span class="line"><span class="variable">$StopTime</span> = (<span class="built_in">Get-Date</span> <span class="variable">$StopTime</span>).AddDays(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">New-AzAutomationSchedule</span> `</span><br><span class="line">    <span class="literal">-AutomationAccountName</span> <span class="variable">$AutomationAccountName</span> `</span><br><span class="line">    <span class="literal">-Name</span> <span class="variable">$StopVMsScheduleName</span> `</span><br><span class="line">    <span class="literal">-ResourceGroupName</span> <span class="variable">$ResourceGroupName</span> `</span><br><span class="line">    <span class="literal">-StartTime</span> <span class="variable">$StopTime</span> `</span><br><span class="line">    <span class="literal">-DaysOfWeek</span> <span class="variable">$WeekDays</span> `</span><br><span class="line">    <span class="literal">-WeekInterval</span> <span class="number">1</span> `</span><br><span class="line">    <span class="literal">-TimeZone</span> <span class="variable">$TimeZoneId</span></span><br></pre></td></tr></table></figure>

<p>The schedules are set up to be executed from tomorrow.</p>
<h2 id="Registering-the-Runbooks-and-Schedules"><a href="#Registering-the-Runbooks-and-Schedules" class="headerlink" title="Registering the Runbooks and Schedules"></a>Registering the Runbooks and Schedules</h2><p>The last section of the <strong>deploy.ps1</strong> is to link the runbooks and schedules. For more detail: <a href="https://docs.microsoft.com/en-us/azure/automation/shared-resources/schedules#link-a-schedule-to-a-runbook?WT.mc_id=AZ-MVP-5001643">Link a schedule to a runbook</a>.</p>
<p>We will add the scripts as below:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$RunbookParams</span> = <span class="selector-tag">@</span>&#123;<span class="string">&quot;VmNames&quot;</span> = <span class="variable">$VmNames</span>; <span class="string">&quot;ResourceGroupName&quot;</span> = <span class="variable">$VmsResourceGroupName</span> &#125;</span><br><span class="line"><span class="comment"># if a job schedule for the specified runbook and schedule already exists, remove it first.</span></span><br><span class="line"><span class="variable">$StartVMsScheduledRunbook</span> = <span class="built_in">Get-AzAutomationScheduledRunbook</span> `</span><br><span class="line">    <span class="literal">-ResourceGroupName</span> <span class="variable">$ResourceGroupName</span> `</span><br><span class="line">    –AutomationAccountName <span class="variable">$AutomationAccountName</span> `</span><br><span class="line">    <span class="literal">-RunbookName</span> <span class="variable">$StartVMsRunbookName</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$StartVMsScheduledRunbook</span>) &#123;</span><br><span class="line">    <span class="built_in">Unregister-AzAutomationScheduledRunbook</span> `</span><br><span class="line">        <span class="literal">-JobScheduleId</span> <span class="variable">$StartVMsScheduledRunbook</span>.JobScheduleId `</span><br><span class="line">        <span class="literal">-ResourceGroupName</span> <span class="variable">$ResourceGroupName</span> `</span><br><span class="line">        –AutomationAccountName <span class="variable">$AutomationAccountName</span> `</span><br><span class="line">        <span class="literal">-Force</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># register start vms</span></span><br><span class="line"><span class="built_in">Register-AzAutomationScheduledRunbook</span> `</span><br><span class="line">    –AutomationAccountName <span class="variable">$AutomationAccountName</span> `</span><br><span class="line">    –RunbookName <span class="variable">$StartVMsRunbookName</span> `</span><br><span class="line">    –ScheduleName <span class="variable">$StartVMsScheduleName</span> `</span><br><span class="line">    –Parameters <span class="variable">$RunbookParams</span> `</span><br><span class="line">    <span class="literal">-ResourceGroupName</span> <span class="variable">$ResourceGroupName</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$StopVMsScheduledRunbook</span> = <span class="built_in">Get-AzAutomationScheduledRunbook</span> `</span><br><span class="line">    <span class="literal">-ResourceGroupName</span> <span class="variable">$ResourceGroupName</span> `</span><br><span class="line">    –AutomationAccountName <span class="variable">$AutomationAccountName</span> `</span><br><span class="line">    <span class="literal">-RunbookName</span> <span class="variable">$StopVMsRunbookName</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$StopVMsScheduledRunbook</span>) &#123;</span><br><span class="line">    <span class="built_in">Unregister-AzAutomationScheduledRunbook</span> `</span><br><span class="line">        <span class="literal">-JobScheduleId</span> <span class="variable">$StopVMsScheduledRunbook</span>.JobScheduleId `</span><br><span class="line">        <span class="literal">-ResourceGroupName</span> <span class="variable">$ResourceGroupName</span> `</span><br><span class="line">        –AutomationAccountName <span class="variable">$AutomationAccountName</span> `</span><br><span class="line">        <span class="literal">-Force</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># register stop vms</span></span><br><span class="line"><span class="built_in">Register-AzAutomationScheduledRunbook</span> `</span><br><span class="line">    –AutomationAccountName <span class="variable">$AutomationAccountName</span> `</span><br><span class="line">    –RunbookName <span class="variable">$StopVMsRunbookName</span> `</span><br><span class="line">    –ScheduleName <span class="variable">$StopVMsScheduleName</span> `</span><br><span class="line">    –Parameters <span class="variable">$RunbookParams</span> `</span><br><span class="line">    <span class="literal">-ResourceGroupName</span> <span class="variable">$ResourceGroupName</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Write-Output</span> <span class="string">&quot;Deploying schedules completed.&quot;</span></span><br><span class="line"><span class="built_in">Write-Output</span> <span class="string">&quot;Please check the result from Azure portal.&quot;</span></span><br></pre></td></tr></table></figure>

<p>In this section, we need to specify the parameters for the schedules to run the runbooks. Also, we need to check if the registration already exists. If yes, we need to remove the registration then create a new one.</p>
<h2 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h2><p>The final step is to run the <strong>deploy.ps1</strong> script to deploy them. Run PowerShell 7.x as administrator and navigate to the <strong>automation</strong> folder then type the below command:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">.\deploy</span><br></pre></td></tr></table></figure>

<p>You will see a message that shows you need to open a link then type the given code to complete the authentication. Then you would see the required runbooks and schedules are configured in your automation account:</p>
<p>So what if we need to start&#x2F;stop VMs at different time on weekends? The easiest way is just create another schedule with different parameters. For example, I want to set up a schedule for Saturday and Sunday, so I can use the below parameter for <code>$WeekDays</code>:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">System.DayOfWeek</span>[]]<span class="variable">$WeekDays</span> = <span class="selector-tag">@</span>([<span class="type">System.DayOfWeek</span>]::Saturday,[<span class="type">System.DayOfWeek</span>]::Sunday)</span><br></pre></td></tr></table></figure>

<p>Then you will get the schedule like this:</p>
<img src="/2020/08/31/using-azure-automation-runbooks-and-schedules-to-automatically-turn-on-off-your-vms/image-20200827101943375.png" class="" title="Create Schedules" alt="Create Schedules">

<img src="/2020/08/31/using-azure-automation-runbooks-and-schedules-to-automatically-turn-on-off-your-vms/image-20200827103038429.png" class="" title="Schedules Created" alt="Schedules Created">

<p>You can check the recent jobs of your runbooks on the Overview page:</p>
<img src="/2020/08/31/using-azure-automation-runbooks-and-schedules-to-automatically-turn-on-off-your-vms/image-20200827102733958.png" class="" title="Recent runbook jobs" alt="Recent runbook jobs">

<p>And see the output:</p>
<img src="/2020/08/31/using-azure-automation-runbooks-and-schedules-to-automatically-turn-on-off-your-vms/image-20200827102842363.png" class="" title="Runbook output" alt="Runbook output">

<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this article, I demonstrated how to write a reusable PowerShell script to automatically turn on&#x2F;off your VMs to save money. One thing you need to be aware of is the default self-signed certificate you created for the Run As account will be expired after one year. So you need to renew it before it expires. Please follow the link to renew it if you need: <a href="https://docs.microsoft.com/en-us/azure/automation/manage-runas-account#cert-renewal?WT.mc_id=AZ-MVP-5001643">Renew a self-signed certificate</a></p>
<p>You can find the scripts here: <a href="https://gist.github.com/yanxiaodi/6607d36a80f7c3d70089acc3924f36a9">Azure Runbooks &amp; Schedules to start&#x2F;stop VMs</a>. Feel free to copy&#x2F;share it.</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Azure</tag>
        <tag>PowerShell</tag>
        <tag>automation</tag>
        <tag>runbook</tag>
      </tags>
  </entry>
  <entry>
    <title>Using Azure DevOps Pipelines to inject configurations for ASP.NET Core Web App for Containers</title>
    <url>/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/</url>
    <content><![CDATA[<p>In part 1 of this article - <a href="https://yanxiaodi.github.io/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/">Using Azure Devops Pipelines to inject configurations for Asp.Net Core Aeb App on linux</a>, I used Azure DevOps to deploy my ASP.NET Core app to Azure Web App on Linux. The next part is to publish the same web app to Azure Web Apps for Containers. I do not need to re-emphasize the benefits of the container. You can find bunches of documents that promote it. So I just would like to show you how to leverage the Azure DevOps Pipelines to build the web app as docker images then push it to Azure Container Registry, then publish it to Azure Web Apps for Containers.</p>
<span id="more"></span>

<h3 id="Adding-the-Docker-support-to-the-NET-Core-Web-App"><a href="#Adding-the-Docker-support-to-the-NET-Core-Web-App" class="headerlink" title="Adding the Docker support to the .NET Core Web App"></a>Adding the Docker support to the .NET Core Web App</h3><p>I suppose you have Docker Desktop installed on your machine. If not, you can download it <a href="https://docs.docker.com/get-docker/">here</a>. The below commands are necessary for your container journey:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker image <span class="built_in">ls</span></span><br><span class="line">docker image <span class="built_in">rm</span></span><br><span class="line">docker image tag</span><br><span class="line">docker container <span class="built_in">ls</span></span><br><span class="line">docker container <span class="built_in">rm</span></span><br><span class="line">docker container <span class="built_in">kill</span></span><br><span class="line">docker container run</span><br><span class="line">docker container stop</span><br><span class="line">docker build</span><br><span class="line">docker run</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>However, the docker command is not the key point of this article. You can find the documents here: <a href="https://docs.docker.com/engine/reference/commandline/cli/">Docker CLI</a>. Actually, we do not need to build the docker image on our local machine. Instead, we will use Azure DevOps to build the docker image and publish it. Let’s get started.</p>
<p>The first step is adding the Docker support to the current .NET Core app. Right-click the project and select <strong>Add</strong> - <strong>Docker support…</strong>:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/image-20200413222217885.png" class="">

<p>We will use Linux as the Target OS. Click <strong>OK</strong>. There are some changes to the project:</p>
<ul>
<li>A file named <strong>Dockerfile</strong> will be added to the root folder of the current web app project by VS 2019. The content looks like this:</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> mcr.microsoft.com/dotnet/core/aspnet:<span class="number">3.1</span>-buster-slim AS base</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">443</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> mcr.microsoft.com/dotnet/core/sdk:<span class="number">3.1</span>-buster AS build</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /src</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> [<span class="string">&quot;DevOpsSample.WebApp/DevOpsSample.WebApp.csproj&quot;</span>, <span class="string">&quot;DevOpsSample.WebApp/&quot;</span>]</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dotnet restore <span class="string">&quot;DevOpsSample.WebApp/DevOpsSample.WebApp.csproj&quot;</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="string">&quot;/src/DevOpsSample.WebApp&quot;</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dotnet build <span class="string">&quot;DevOpsSample.WebApp.csproj&quot;</span> -c Release -o /app/build</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> build AS publish</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dotnet publish <span class="string">&quot;DevOpsSample.WebApp.csproj&quot;</span> -c Release -o /app/publish</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> base AS final</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=publish /app/publish .</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;dotnet&quot;</span>, <span class="string">&quot;DevOpsSample.WebApp.dll&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>This is the default Dockerfile generated by VS2019. That is the key of this part.</p>
<ul>
<li>It also updates the <strong>launchSettings.json</strong> file in the <strong>Properties</strong> folder and this section is added so you can debug the app from Docker:</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;Docker&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;commandName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Docker&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;launchBrowser&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;launchUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;Scheme&#125;://&#123;ServiceHost&#125;:&#123;ServicePort&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;publishAllPorts&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;useSSL&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Another change is VS 2019 added a package named <strong>Microsoft.VisualStudio.Azure.Containers.Tools.Targets</strong> to the project to enable the functionalities regarding Docker.</li>
<li>Finally, it added a <strong>.dockerignore</strong> file. It looks like <strong>.gitignore</strong>.</li>
</ul>
<p>So that you can debug the app in Docker by changing the debug host:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/image-20200414181115521.png" class="">

<h3 id="Understanding-the-Dockerfile"><a href="#Understanding-the-Dockerfile" class="headerlink" title="Understanding the Dockerfile"></a>Understanding the Dockerfile</h3><p>A <strong>Dockerfile</strong> is a text document that contains all the commands to build an image. When we run <code>docker build</code> command, it will read the <strong>Dockerfile</strong> and execute the inside commands in a specified <strong>context</strong>, which is a set of files at a specified location. So there are lots of <code>WORKDIR</code> commands in the Dockerfile, which is used to set up the command context. You can find the documents of <strong>Dockerfile</strong> <a href="https://docs.docker.com/engine/reference/builder/">here</a>.</p>
<p>Currently, we do not need to change this file much but let’s have a quick look at these commands:</p>
<ul>
<li><code>FROM</code> initializes a new build stage and sets the <strong>Base Image</strong> for the next actions. In this case, it will pull an image from Microsoft’s public repositories - which is the base image for .NET Core 3.1 runtime.</li>
<li><code>WORKDIR</code> sets the working directory for the subsequent commands. If we use relative path for this command, it will be relative to the path of the previous <code>WORKDIR</code>.</li>
<li><code>EXPOSE</code> sets the ports that will be used to listen for the container. It is TCP by default but you can also specify UDP if you need. In this case, the container will listen 80(for HTTP) and 443(for HTTPS). When we start the container, we need to use the <code>docker run</code> command to map the internal ports to external ports, eg.<code>docker run -p 8080:80</code>, which means the container will listen on port 8080 and forward the requests to the internal port 80.</li>
<li><code>COPY</code>  copies new files or directories from a source position to the file system of the container at the destination position.</li>
<li><code>RUN</code> executes the commands on the current image and commits the results, which will be used for the next step.</li>
<li><code>ENTRYPOINT</code> is to config a container that will run as an executable. In our case, it will call <code>dotnet</code> command and pass the dll name as the argument to start the web app.</li>
</ul>
<h3 id="Why-the-local-build-failed"><a href="#Why-the-local-build-failed" class="headerlink" title="Why the local build failed?"></a>Why the local build failed?</h3><p>One tricky thing is the <code>COPY</code> command. We should be careful regarding the file path. If you try to build the image in the project folder by using this command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build .</span><br></pre></td></tr></table></figure>

<p>You may see the below error in the output:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">Step 7/17 : COPY [<span class="string">&quot;DevOpsSample.WebApp/DevOpsSample.WebApp.csproj&quot;</span>, <span class="string">&quot;DevOpsSample.WebApp/&quot;</span>]</span><br><span class="line">COPY failed: <span class="built_in">stat</span> /var/lib/docker/tmp/docker-builder617484291/DevOpsSample.WebApp/DevOpsSample.WebApp.csproj: no such file or directory</span><br></pre></td></tr></table></figure>

<p>The reason is when VS 2019 generates the Dockerfile, it creates it in the current project folder, but in the <code>COPY</code> commands, it uses the folder that starts from the root folder of the solution, which is <code>DevOpsSample.WebApp/DevOpsSample.WebApp.csproj</code>. We can change the folder path, or move the Dockerfile to the same level as the solution(.sln) file for the local build. However, that would break the Docker build function of VS2019. I am not sure if it is a bug or something else, but it is a little bit tricky. My solution is to copy the Docker file and paste it to the root folder of the solution, which is helpful for Azure DevOps as well. You can right-click the solution and select <strong>Add - Existing Item</strong> to add the Dockerfile to the solution level. So VS2019 is able to continue to use the Dockerfile in the project folder for debugging.</p>
<p>So the solution looks like this(there are two same Dockerfiles in different folders):</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/image-20200415092431638.png" class="">

<p>Please be aware of the folder path when you update the Dockerfile, especially when the solution has complex structures and multiple projects.</p>
<h3 id="Creating-Azure-Container-Registry"><a href="#Creating-Azure-Container-Registry" class="headerlink" title="Creating Azure Container Registry"></a>Creating Azure Container Registry</h3><p>Before we create the pipeline to build the Docker image, we need to create an Azure Container Registry. You can also use Docker Hub as the destination. For this demo, I will use Azure Container Registry to manage the images. We will use Azure DevOps Pipelines to build the image, then push it to Azure Container Registry so that we can use the pipeline to release it to Azure Web App for Containers.</p>
<p>You can use Azure Portal or Azure CLI to create Azure Container Registry. For more detail: </p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal">Quickstart: Create a private container registry using the Azure portal</a></li>
<li><a href="https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-azure-cli">Quickstart: Create a private container registry using the Azure CLI</a></li>
</ul>
<p>ACR is not free but the price for the Basic tier is affordable for dev&#x2F;testing.</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/image-20200414203312336.png" class="">

<p>I have already created an Azure Container Registry in the Azure Portal. You can select Basic SKU for testing.</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/image-20200414203908190.png" class="">

<p>Once you created your Azure Container Registry, you can find the server name in the overview page. It is like <strong>youracrname.azurecr.io</strong>.</p>
<h3 id="Creating-the-build-pipeline-to-build-the-Docker-image"><a href="#Creating-the-build-pipeline-to-build-the-Docker-image" class="headerlink" title="Creating the build pipeline to build the Docker image"></a>Creating the build pipeline to build the Docker image</h3><p>The next step is to create a build pipeline in Azure DevOps. But this time we will use another task. Search <code>docker</code> in the assistant and select <strong>Docker</strong> task:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/image-20200414204441800.png" class="">

<p>If you cannot find available <strong>Container registry</strong> on the configuration page, you need to add a server connection for your project. Open the project page and click <strong>Project settings</strong>  on the left bottom corner to navigate to the <strong>Project Settings</strong> page. Then click <strong>Service connections</strong>:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/image-20200414205048943.png" class="">

<p>Click <strong>New service connection</strong> on the top right corner and select <strong>Docker Registry</strong>. On the next page, you need to select the proper Azure Subscription and authorize the access, then select the correct service connection:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/image-20200414205805741.png" class="">

<p>Now return to the pipeline page, you will see the <strong>Container Registry</strong>:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/image-20200414210022278.png" class="">

<p>Create a name for your container repository. We will use this name in the release pipeline. Keep the default values for other options:</p>
<ul>
<li>Command: <code>buildAndPush</code>.</li>
<li>Dockerfile: <code>**/Dockerfile</code></li>
<li>Build context: <code>**</code></li>
<li>Tags: <code>$(Build.BuildId)</code>.</li>
</ul>
<p>Click <strong>Add</strong> to add the task. Change the YAML file name as <strong>azure-pipelines-docker.yml</strong>. So the pipeline looks like this:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">vmImage:</span> <span class="string">&#x27;ubuntu-latest&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">buildConfiguration:</span> <span class="string">&#x27;Release&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">Docker@2</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">containerRegistry:</span> <span class="string">&#x27;devopslab&#x27;</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">&#x27;devops-sample-webapp&#x27;</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;buildAndPush&#x27;</span></span><br><span class="line">    <span class="attr">Dockerfile:</span> <span class="string">&#x27;**/Dockerfile&#x27;</span></span><br></pre></td></tr></table></figure>

<p>But do not run right now. Because there are two Dockerfiles in our solution. So we need to specify the correct Dockerfile in the root folder of the solution, not the Dockerfile in the web project.</p>
<p>Also, we need to specify the <strong>Build context</strong>. The default value <code>**</code>  for build context specifies the directory that contains the Dockerfile. The situations may vary depending on your solution structure. Of course, you can modify the Dockerfile content directly. You can edit a Docoker file for the pipeline, another for the local VS2019 build task. You can even change the file name of the Dockerfile. All the configurations are up to you. Just keep in mind that you need to use the correct path for the Dockerfile and the build task. Otherwise, you may encounter the error <code>no such file or directory</code> when the task copies files. </p>
<p>It is a good practice to specify the tag for the image. It is like an aliase of the Docker image. Currently, we just use <code>$(Build.BuildId)</code> but you can also use <a href="https://semver.org/">semantic versioning</a>.</p>
<p>For this case, the final task section in the YAML file is shown below:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">Docker@2</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">containerRegistry:</span> <span class="string">&#x27;devopslab&#x27;</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">&#x27;devops-sample-webapp&#x27;</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;buildAndPush&#x27;</span></span><br><span class="line">    <span class="attr">Dockerfile:</span> <span class="string">&#x27;$(System.DefaultWorkingDirectory)/Dockerfile&#x27;</span></span><br><span class="line">    <span class="attr">buildContext:</span> <span class="string">&#x27;$(System.DefaultWorkingDirectory)&#x27;</span></span><br></pre></td></tr></table></figure>

<p>I use the system variable <code>$(System.DefaultWorkingDirectory)</code> to specify the <strong>buildContext</strong> as the solution folder. The value of <strong>Dockerfile</strong> is  <code>$(System.DefaultWorkingDirectory)/Dockerfile</code>, which specifies the Docker file in the root folder of the solution.</p>
<p>Now we can run the pipeline. If you see it succeed, return to your Azure Portal and click <strong>Repositories</strong> of Azure Container Registry then you will see it:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/image-20200414213844915.png" class="">

<p>That means the pipeline has successfully built and pushed our web app to Azure Container Registry! Every time we run the pipeline, it will build a new image with a tag and push it to the registry. You can change the pipeline to use the other build number policy.</p>
<h3 id="Creating-the-Web-App-for-Containers"><a href="#Creating-the-Web-App-for-Containers" class="headerlink" title="Creating the Web App for Containers"></a>Creating the Web App for Containers</h3><p>Next, we need to create two instances of Web App for Containers, as we did for Web App on Linux. One difference is that we need to configure the registry credentials for the container registry:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/image-20200415101632338.png" class="">

<p>You can change it later in the <strong>Container settings</strong>:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/image-20200415102015297.png" class="">

<p>For now, the <strong>Tag</strong> is 418. We will use the release pipeline to update the image.</p>
<p>Once we config the Docker image, it will pull the Docker image and complete the first deployment. But because we did not inject the environment variables for the Docker image, so the app is using the dev appsettings.json.</p>
<p>In the Azure Portal, Here are my Web App for Containers instances:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/image-20200414215454254.png" class="">

<p>Feel free to enable the deployment slot feature if you select standard or higher tier.</p>
<h3 id="Creating-the-release-pipeline-for-Container"><a href="#Creating-the-release-pipeline-for-Container" class="headerlink" title="Creating the release pipeline for Container"></a>Creating the release pipeline for Container</h3><p>There are two easy ways to run the container. Click the three dots of each container and you will find two options - <strong>Run instance</strong> and <strong>Deploy to web app</strong>:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/image-20200414214122293.png" class="">

<p>If you use <strong>Run instance</strong>, actually you would create another service called <strong>Container Instances</strong>. For more detail: <a href="https://docs.microsoft.com/en-us/azure/container-instances/container-instances-overview">What is Azure Container Instances?</a>. That is not the key point of this article. For this case, we will use Azure DevOps Pipelines to publish it.</p>
<p>So let’s create another release pipeline. The steps are quite similar to the previous section. We still use <strong>Azure App Service deployment</strong> task. But for the artifact, we will use <strong>Azure Container Registry</strong>:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/image-20200414214636066.png" class="">

<p>Select the correct repository for the release. </p>
<p>When you config the deploy task, you need to select <strong>Web App for Containers(Linux)</strong> as <strong>App Type</strong>, and specify the <strong>Registry or Namespace</strong>, which is the login server you saw on the overview page of your Azure Container Registry. The <strong>Repository</strong> is the name you configured in the build pipeline a moment ago. My configuration is shown below:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/image-20200414220259987.png" class="">

<h3 id="Injecting-the-values-for-appsettings-json"><a href="#Injecting-the-values-for-appsettings-json" class="headerlink" title="Injecting the values for appsettings.json"></a>Injecting the values for appsettings.json</h3><p>When we build the Docker image, we did not change the values in the <strong>appsettings.json</strong> file. It is time to inject them in the release pipeline. How would we do that?</p>
<p>This time, I will show you how to use the <strong>Application and Configuration Settings</strong> section to replace these values. The tricky thing is that the variable syntax for Linux container is quite different.</p>
<p>Click the <strong>Deploy Azure App Service</strong> task in the release pipeline, we will see a <strong>Application and Configuration Settings</strong> section. We can edit application settings or configuration settings here. Click the three dots button for App settings. You will see an edit page that you can add some key-value pairs. The rules are:</p>
<ul>
<li>If the key is non-nested, like <strong>MyKey</strong> in our demo, use the same name as the key, eg. <code>MyKey</code>.</li>
<li>If the key is nested, like <strong>Title</strong> in <strong>Position</strong>, use double-underscore <code>__</code> to separate them, eg. <code>Position__Title</code>.</li>
<li>If there are spaces in the value, use quotation marks to wrap the value, eg <code>&quot;My appsettings.json Value&quot;</code>.</li>
</ul>
<p>Did you find the difference? When we created the variable groups, we used syntax like <code>Title.Position</code> for nested JSON objects, but here, we need to use <code>__</code>. </p>
<blockquote>
<p>IMPORTANT:</p>
<p>In a default Linux container or a custom Linux container, any nested JSON key structure in the app setting name like <code>ApplicationInsights:InstrumentationKey</code> needs to be configured in App Service as <code>ApplicationInsights__InstrumentationKey</code> for the key name. In other words, any <code>:</code> should be replaced by <code>__</code> (double underscore).</p>
<p>For more, please see <a href="https://docs.microsoft.com/en-us/azure/app-service/configure-common#app-settings">https://docs.microsoft.com/en-us/azure/app-service/configure-common#app-settings</a>.</p>
</blockquote>
<p>Thereby, we have quite a few different ways to represent the nested key-value pairs:</p>
<ul>
<li>In ASP.NET Core Apps, we use <code>_configuration[&quot;Position:Title&quot;]</code></li>
<li>For variables of Azure Web Apps, we use <code>Position.Title</code></li>
<li>For Azure Web App for Containers, we use <code>Position__Title</code></li>
</ul>
<p>We have already created the variable groups in the previous section so this time we just reuse them. However, we need to specify the key names. So the configuration looks like this:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/image-20200414223801566.png" class="">

<p>Because we already applied quotation marks for the variable values in the variable groups, so no need to use <code>&quot;&quot;</code> here. Also please do not forget to link the correct variable groups and specify the scope. If you got an error like this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[error]Error: Failed to update App service <span class="string">&#x27;devops-sample-container-staging&#x27;</span> application settings. Error: BadRequest - Parameter name cannot be empty. (CODE: 400)</span><br></pre></td></tr></table></figure>

<p>Please check the variable values and make sure there is no duplicated <code>&quot;&quot;</code> for the values.</p>
<p>Create another stage for production and add the correct variable groups.</p>
<h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>Now it is time to deploy them. Create a new release then deploy to two stages. Usually, we should run tests and have some approvals before deploying to each stage. This is just a demo so we deploy them at the same time. When the deployment is done, you can see the <strong>Tag</strong> has been changed to the latest build version:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/image-20200415103230881.png" class="">

<p>If you check the <strong>Configuration</strong>, you will see the variables have been updated:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/image-20200415103701990.png" class="">

<p>Then check the web site, you will see the variables in <strong>appsettings.json</strong> have been updated for the correct environments:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/image-20200415103257466.png" class="">

<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/image-20200415103312112.png" class="">

<p>All done!</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this article, I demonstrated how to deploy the ASP.NET Core Web App to Azure App Service - Web App on Linux and Web App for Container. The key is how to inject the variables of <strong>appsettings.json</strong> for different environments. We have learnt how to use <strong>File Transform</strong> task and the built-in <strong>Application and Configuration Settings</strong> of the deployment task to replace the variable. The reason why we build one artifact or Docker image for multiple environments is we should always keep immutability for the artifact&#x2F;Docker image. If you build environment-specific images, it might cause some issues. And we should not store the sensitive data in the Docker image, such as the database connection string. That is why we inject the values in the deployment process.</p>
<p>The important thing here is we need to specify the key name because there is a various syntax for different platforms. If you get something wrong when you build the Docker image or replace the environment variables, I hope this article would be helpful. Thanks for reading.</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Azure</tag>
        <tag>ASP.NETCore</tag>
        <tag>DevOps</tag>
        <tag>GitHub</tag>
        <tag>Docker</tag>
        <tag>Container</tag>
      </tags>
  </entry>
  <entry>
    <title>Using Azure DevOps Pipelines to inject configurations for ASP.NET Core Aeb App on linux</title>
    <url>/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/</url>
    <content><![CDATA[<p>ASP.NET Core is a cross-platform, high-performance framework for building cloud-based applications. One benefit is we can run ASP.NET Core apps on Linux, and it is easy to deploy as Docker images. One more thing, the price is good. Let us compare the price tiers of Azure App Service:</p>
<p>Web App on Windows:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413161913285.png" class="">

<span id="more"></span>

<p>Web App on Linux:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413161934480.png" class="">

<p>Obviously, the Linux host is more economic. So it is time to move to Linux! When we deploy the project, I would say Azure DevOps is a good choice - it is free for open source projects, and it simplifies the setup of an entire CI&#x2F;CD pipeline for all platforms. You can quickly deploy the application to various targets: such as App Services, Containers, or K8S, etc.</p>
<p>There are a bunch of articles to describe how to use the Azure DevOps Pipelines to deploy ASP.NET Core apps to Azure App Service. In this article, I will more focus on how to deploy to Web Apps on Linux and Web App for Containers, and how to inject the configurations in the release pipeline. If you do not know much about Docker, no worries. I will explain fundamentals regarding Docker.</p>
<h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>First, we need to prepare an ASP.NET Core Web App. If you have .NET Core CLI installed, you can create a new ASP.NET Core Web App by using the below command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet new mvc -n DevOpsSample.WebApp</span><br></pre></td></tr></table></figure>

<p>It will create a new MVC project. Then you need to create a GitHub repo and push your new project to GitHub. Or you can just fork my repo from GitHub: <a href="https://github.com/yanxiaodi/DevOpsSample">https://github.com/yanxiaodi/DevOpsSample</a>. It is a default .NET Core 3.1 MVC project. Let us use it as our example.</p>
<p>If you run the project, you will see the default page:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413154040121.png" class="">

<p>You also need a valid Azure DevOps account. If you do not have one, please sign up for free <a href="https://azure.microsoft.com/en-us/services/devops/">here</a>.</p>
<p>Let’s get started!</p>
<h2 id="Set-up-the-appsettings-json"><a href="#Set-up-the-appsettings-json" class="headerlink" title="Set up the appsettings.json"></a>Set up the appsettings.json</h2><p>ASP.NET Core uses multiple ways to store configurations. One of the most common ways is using the <strong>appsettings.json</strong> file. A typical <strong>appsettings.json</strong> file looks like this:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Position&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Editor&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Joe Smith&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;MyKey&quot;</span><span class="punctuation">:</span>  <span class="string">&quot;My appsettings.json Value&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Logging&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;LogLevel&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Information&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Microsoft&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Warning&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Microsoft.Hosting.Lifetime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Information&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;AllowedHosts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>Usually, it can be used to store the database connection strings. But for simplicity, we do not need database so I added a couple of key-value pairs, which have a hierarchical structure. For more detail: <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-3.1">Configuration of ASP.NET Core</a>.</p>
<p>We can use the built-in <code> IConfiguration</code>  interface to read the values and show them on the page. Open the <strong>HomeController.cs</strong> file in the <strong>Controllers</strong> folder and add a private field:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> IConfiguration _configuration;</span><br></pre></td></tr></table></figure>

<p>You need to add <code>using Microsoft.Extensions.Configuration;</code> on the top of the code to import the namespace. Then update the constructor to inject the <code>IConfiguration</code>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HomeController</span>(<span class="params">ILogger&lt;HomeController&gt; logger,</span></span></span><br><span class="line"><span class="params"><span class="function">    IConfiguration configuration</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _logger = logger;</span><br><span class="line">    _configuration = configuration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Update the <code>Index</code> action to read the configurations:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    ViewData[<span class="string">&quot;myKeyValue&quot;</span>] = _configuration[<span class="string">&quot;MyKey&quot;</span>];</span><br><span class="line">    ViewData[<span class="string">&quot;positionTitle&quot;</span>] = _configuration[<span class="string">&quot;Position:Title&quot;</span>];</span><br><span class="line">    ViewData[<span class="string">&quot;positionName&quot;</span>] = _configuration[<span class="string">&quot;Position:Name&quot;</span>];</span><br><span class="line">    <span class="keyword">return</span> View();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Then update the <strong>Index.cshtml</strong> file in the <strong>Views&#x2F;Home</strong> folder:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;display-4&quot;</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>My Key value: @ViewData[&quot;myKeyValue&quot;]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Title: @ViewData[&quot;positionTitle&quot;]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: @ViewData[&quot;positionName&quot;]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Learn about <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://docs.microsoft.com/aspnet/core&quot;</span>&gt;</span>building Web apps with ASP.NET Core<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Now run the app again. We can see the correct values on the page:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413161236686.png" class="">

<p>In the development stage, we can use the <code>appsettings.Environment.json</code> to store the values for development, such as <code>appsettings.Development.json</code>. Or use app secrets: <a href="https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-3.1&tabs=windows">Safe storage of app secrets in development in ASP.NET Core</a>. When we release the app, the temporary values will be replaced by correct values in the pipeline.</p>
<h2 id="Creating-the-first-CI-pipeline"><a href="#Creating-the-first-CI-pipeline" class="headerlink" title="Creating the first CI pipeline"></a>Creating the first CI pipeline</h2><p>The first pipeline is to make sure the code change will not break the build. Let us build a pipeline. If your code is hosted on GitHub, you can install Azure Pipelines from the marketplace for your project:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413171144243.png" class="">

<p>I have written an article to describe this process. You can find it here: <a href="https://medium.com/@yanxiaodi/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo-fb58be4e9be8">Using Azure Pipelines to publish the NuGet package from GitHub repo</a>.</p>
<p>Once it is set up, you can find the project in Azure DevOps. Then click <strong>Pipelines</strong> in the <strong>Pipelines</strong> menu and click <strong>New pipeline</strong> button. You will be asked to select the code repo. Choose the correct repo. Next step is to select the project. In the third step, Azure DevOps will automatically analyze the code and generate a basic pipeline YAML file. For our ASP.NET Core project, the basic YAML file looks like this:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ASP.NET Core</span></span><br><span class="line"><span class="comment"># Build and test ASP.NET Core projects targeting .NET Core.</span></span><br><span class="line"><span class="comment"># Add steps that run tests, create a NuGet package, deploy, and more:</span></span><br><span class="line"><span class="comment"># https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">vmImage:</span> <span class="string">&#x27;Ubuntu 16.04&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">buildConfiguration:</span> <span class="string">&#x27;Release&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">script:</span> <span class="string">dotnet</span> <span class="string">build</span> <span class="string">--configuration</span> <span class="string">$(buildConfiguration)</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;dotnet build $(buildConfiguration)&#x27;</span></span><br></pre></td></tr></table></figure>

<p>The first pipeline is quite simple. It runs <code>dotnet build</code> command to build the project. We can rename it to <strong>azure-pipelines-ci.yml</strong>:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413175852781.png" class="">

<p>It specifies the build pool as <code>Ubuntu 16.04</code>, which is hosted by Microsoft. You can find all the supported Microsoft-hosted agents here: <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops">Microsoft-hosted agents</a>. I change it to <code>ubuntu-latest</code> so it can use the latest ubuntu version.</p>
<p>Then we can click <strong>Save and Run</strong> and see the output:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413180126314.png" class="">

<p>The build is succeeded. If you need to start the build pipeline when you push PR or the PR is merged, you can edit the pipeline and set up the triggers:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413180436459.png" class="">

<p>Enable <strong>Continuous integration</strong> and <strong>Pull request validation</strong>:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413180615768.png" class="">

<p>The trigger configured here will override the trigger in the YAML file. However, it is up to you regarding which trigger will be applied. You can also config the branch filters and path filters here. So every time we push code to the specified branch, it will trigger this pipeline to validate the build.</p>
<h2 id="Publishing-the-app-to-Azure-Web-Apps-on-Linux"><a href="#Publishing-the-app-to-Azure-Web-Apps-on-Linux" class="headerlink" title="Publishing the app to Azure Web Apps on Linux"></a>Publishing the app to Azure Web Apps on Linux</h2><p>Next, we need to deploy the app to Azure Web Apps on Linux. Before we create the release pipeline, we need to create a new Web App on Linux from Azure Portal. You can also use Azure CLI to create it. </p>
<p>It is quite straightforward to create a new Web App in Azure Portal:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413182359668.png" class="">

<p>We will select <strong>Linux</strong> as the Operating System and <strong>Code</strong> as Publish type. For the demo, you can select the free <strong>F1</strong> tier. It provides 60 minutes free compute time each day. Then click <strong>Review + Create</strong> to create the resource. You will see it after a couple of minutes in the portal.</p>
<h3 id="Creating-the-Web-Apps-on-Linux"><a href="#Creating-the-Web-Apps-on-Linux" class="headerlink" title="Creating the Web Apps on Linux"></a>Creating the Web Apps on Linux</h3><p><strong>Deployment slots</strong> is very useful when we have multiple stages, eg. development, stage, production, etc. We can validate the new version of the app in a staging deployment slot before swapping it to the production slot. However, the free <strong>F1</strong> tier does not support it. So we could create another free web app as the staging environment. If you scale up the App Service plan to <strong>Standard</strong> or higher, feel free to enable this feature. You can find more detail here: <a href="https://docs.microsoft.com/en-us/azure/app-service/deploy-staging-slots">Set up staging environments in Azure App Service</a>. For this demo, I will create another web app instance as the staging environment. I recommend you create these two Web Apps in one resource group so it would be easy to delete them all after this exercise.</p>
<blockquote>
<p>Note:</p>
<p>Keep in mind that <strong>F1</strong> tier only has 60 minutes each day.</p>
</blockquote>
<p>Here are my resources in <strong>devops-lab</strong> resource group:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413183821757.png" class="">

<h3 id="Creating-the-artifact-pipeline"><a href="#Creating-the-artifact-pipeline" class="headerlink" title="Creating the artifact pipeline"></a>Creating the artifact pipeline</h3><p>Next, we need to build the artifact for the release. My goal is to replace some values in the <strong>appsettings.json</strong> file. Let’s create a new build pipeline from Azure DevOps.</p>
<p>You can find <strong>Show assistant</strong> button on the top right corner:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413184333396.png" class="">

<p>Click <strong>Show assistant</strong> then select <strong>.NET Core</strong>:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413185011720.png" class="">

<p>We need to add a <strong>publish</strong> task that publishes the application and its dependencies to a folder for deployment. Find more detail about this command here: <a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish">dotnet publish</a>.</p>
<p>The configuration is shown below:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413185148760.png" class="">

<p>Click <strong>Add</strong>, you will see the new script section is added to the current YAML file:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;publish&#x27;</span></span><br><span class="line">    <span class="attr">publishWebProjects:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">arguments:</span> <span class="string">&#x27;-r linux-x64 -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)&#x27;</span></span><br></pre></td></tr></table></figure>

<p>In this task:</p>
<ul>
<li>We specify the runtime as <code>linux-x64</code>. </li>
<li>The configuration argument <code>-c</code> comes from the predefined variable <code>$(buildConfiguration)</code> in the top of the YAML file. The value is <code>Release</code>.</li>
<li>The output <code>-o</code> argument is <code>$(Build.ArtifactStagingDirectory)</code>, which is a predefined variable of Azure DevOps. You can find all the available predefined variables here: <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml">Use predefined variables</a>. So when the publish command completes, it will output the app to this folder for the next step.</li>
</ul>
<p>If <strong>Publish Web Projects</strong> is checked, the task will try to find the web projects in the repository and run the publish command on them. Web projects are identified by the presence of either a web.config file or wwwroot folder in the directory. If your solution contains multiple web projects but you only want to build one specific web project, you can uncheck this option and explicitly assign the project path:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413185640426.png" class="">

<p>Or, you can define a variable regarding the project path and use it like this:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">vmImage:</span> <span class="string">&#x27;ubuntu-latest&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">buildConfiguration:</span> <span class="string">&#x27;Release&#x27;</span></span><br><span class="line">  <span class="attr">projectPath:</span> <span class="string">&#x27;**/DevOpsSample.WebApp&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">script:</span> <span class="string">dotnet</span> <span class="string">build</span> <span class="string">--configuration</span> <span class="string">$(buildConfiguration)</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;dotnet build $(buildConfiguration)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;publish&#x27;</span></span><br><span class="line">    <span class="attr">publishWebProjects:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">projects:</span> <span class="string">&#x27;$(projectPath)&#x27;</span></span><br><span class="line">    <span class="attr">arguments:</span> <span class="string">&#x27;-r linux-x64 -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)&#x27;</span></span><br></pre></td></tr></table></figure>

<p>The <strong>Zip Published Projects</strong> means the folder of the application will be zipped by the publish command. It is <code>true</code> by default. If you do not need it, you can add <code>zipAfterPublish: false</code> at the end of the <code>inputs</code> elements.</p>
<p>If you click the <strong>Settings</strong> link on each task, you can reopen the UI to config the task:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413190220473.png" class="">

<p>This feature is very useful if you are not familiar with YAML syntax.</p>
<p>For some reason, you may see the build fails and show the below error:</p>
<blockquote>
<p>error MSB4025: The project file could not be loaded. Data at the root level is invalid. Line 1, position 1. </p>
</blockquote>
<p>Because the project is based on .NET Core 3.1, we need to install .NET Core SDK in case there is no corresponding SDK installed on the agent.</p>
<p>Add a new task before the publish task:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">UseDotNet@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;use dotnet core cli&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">packageType:</span> <span class="string">&#x27;sdk&#x27;</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">&#x27;3.1.x&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Now we have already published the artifact to the <code>Build.ArtifactStagingDirectory</code> folder. We need to publish the artifact. Search <strong>publish</strong> in the assistant:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413192938209.png" class="">

<p>Select <strong>Publish build artifacts</strong>:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413193036865.png" class="">

<p>The default <strong>Artifact name</strong> is <strong>drop</strong>. You can give it a more sensible name if you like.</p>
<p>The final artifact pipeline is shown below:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">vmImage:</span> <span class="string">&#x27;ubuntu-latest&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">buildConfiguration:</span> <span class="string">&#x27;Release&#x27;</span></span><br><span class="line">  <span class="attr">projectPath:</span> <span class="string">&#x27;**/DevOpsSample.WebApp&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">UseDotNet@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;use dotnet core cli&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">packageType:</span> <span class="string">&#x27;sdk&#x27;</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">&#x27;3.1.x&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;publish&#x27;</span></span><br><span class="line">    <span class="attr">publishWebProjects:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">projects:</span> <span class="string">&#x27;$(projectPath)&#x27;</span></span><br><span class="line">    <span class="attr">arguments:</span> <span class="string">&#x27;-r linux-x64 -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">PublishBuildArtifacts@1</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">PathtoPublish:</span> <span class="string">&#x27;$(Build.ArtifactStagingDirectory)&#x27;</span></span><br><span class="line">    <span class="attr">ArtifactName:</span> <span class="string">&#x27;devops-sample-app&#x27;</span></span><br><span class="line">    <span class="attr">publishLocation:</span> <span class="string">&#x27;Container&#x27;</span></span><br></pre></td></tr></table></figure>

<p>After you run this artifact pipeline, you will find the artifact on the build summary page:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413193400272.png" class="">

<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413193437505.png" class="">

<h3 id="Creating-the-release-pipeline"><a href="#Creating-the-release-pipeline" class="headerlink" title="Creating the release pipeline"></a>Creating the release pipeline</h3><p>Now the artifact is ready. But you may realize that how we would update the configurations in <strong>appsettings.json</strong>? We can inject the values in the release pipeline for multiple environments. Let’s move on.</p>
<p>Click <strong>Releases</strong> in the Pipelines menu. Click <strong>New</strong> to create a new release pipeline:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413193835918.png" class="">

<p>On the next page you will be asked to select a template:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413193927711.png" class="">

<p>For our demo, we select <strong>Azure App Service deployment</strong>. Then change the name to <strong>Stage</strong>.</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413194526842.png" class="">

<p>Next we need to add an artifact. Click <strong>Add an artifact</strong>:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413194633208.png" class="">

<p>There are quite a few source types we can use. For this demo, we select <strong>Build</strong>. Then specify the build pipeline to the one we created in the previous section. The default version is <strong>Latest</strong>. So every time we create a new release, it will pick up the latest build to publish.</p>
<p>You can click the lightning icon to config the CD trigger:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413194941079.png" class="">

<p>For this demo, it is not necessary because we will manually trigger the release.</p>
<p>Click the job in the Stage and config the task as shown below:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413195730451.png" class="">

<p>You need to authorize your account when selecting the Azure subscription. For <strong>App type</strong>, please select <strong>Web App on Linux</strong> so that you can see the Web Apps you created a moment ago.</p>
<p>Then click <strong>Run on agent</strong>:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413200018467.png" class="">

<p>I use <strong>ubuntu-18.04</strong> as the Agent. Actually it does not matter because ASP.NET Core is cross-platform. You can use other agents as well.</p>
<p>Next click <strong>Deploy Azure App Service</strong> so we can config some other options:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413200258868.png" class="">

<ul>
<li><p>Keep in mind that if you disabled the <strong>zipAfterPublish</strong> feature in the artifact build pipeline, you need to change the <strong>Package or folder</strong> in this step. </p>
</li>
<li><p>Do not forget to select the correct <strong>Runtime Stack</strong>. For our ASP.NET Core 3.1 application, you can select <strong>Latest</strong>.</p>
</li>
<li><p>If you are using the <strong>Standard</strong> or higher tier, you can use the deployment slot here:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413202101006.png" class=""></li>
</ul>
<p>You can click <strong>View YAML</strong> to see the generated YAML file:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">AzureRmWebAppDeployment@4</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Deploy Azure App Service&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">azureSubscription:</span> <span class="string">&#x27;$(Parameters.ConnectedServiceName)&#x27;</span></span><br><span class="line">    <span class="attr">appType:</span> <span class="string">&#x27;$(Parameters.WebAppKind)&#x27;</span></span><br><span class="line">    <span class="attr">WebAppName:</span> <span class="string">&#x27;$(Parameters.WebAppName)&#x27;</span></span><br><span class="line">    <span class="attr">RuntimeStack:</span> <span class="string">&#x27;DOTNETCORE|Latest&#x27;</span></span><br><span class="line">    <span class="attr">StartupCommand:</span> <span class="string">&#x27;$(Parameters.StartupCommand)&#x27;</span></span><br></pre></td></tr></table></figure>

<p>We can add another stage for production. Click <strong>Add</strong> on the edit release page:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413201728224.png" class="">

<p>For the production stage, just select another Web App instance or select the correct deployment slot if you enabled this feature. So now we have two environments for staging and production:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413201856075.png" class="">

<h3 id="Injecting-the-values-for-appsettings-json"><a href="#Injecting-the-values-for-appsettings-json" class="headerlink" title="Injecting the values for appsettings.json"></a>Injecting the values for appsettings.json</h3><p>For now, we only have one artifact. That means the configurations (eg. the database connection string) in the <strong>appsettings.json</strong> are the same. The next step is to replace the values in <strong>appsettings.json</strong> file.</p>
<p>We can use <strong>Library</strong> to create variables for different environments. Click <strong>Library</strong> in the <strong>Pipelines</strong> menu, and click <strong>+ Variable group</strong>:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413202554633.png" class="">

<p>Update the group name to indicate which environment it is for. Then add variables based on the below rules:</p>
<ul>
<li>If the key is non-nested, like <strong>MyKey</strong> in our demo, use the same name as the key, eg. <code>MyKey</code>.</li>
<li>If the key is nested, like <strong>Title</strong> in <strong>Position</strong>, use JSONPath expressions to specify them, eg. <code>Position.Title</code>.</li>
<li>If there are spaces in the value, use quotation marks to wrap the value, eg <code>&quot;My appsettings.json Value&quot;</code>.</li>
</ul>
<p>So the variable group would be:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413211858800.png" class="">

<blockquote>
<p>IMPORTANT:</p>
<p>If you store the database connection strings here, please make sure you click the <strong>lock</strong> icon to change it to secret. Otherwise, the value will show in the release logs.</p>
</blockquote>
<p>Now return to the release pipeline edit page and edit the tasks for one stage. Click the plus button on the right side of <strong>Run on agent</strong> then search <strong>transform</strong>:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413203641774.png" class="">

<p>Add the File transform task to the pipeline. Make sure it is before the deploy task. The configuration is shown below:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413203757531.png" class="">

<p><strong>File transform</strong> is a task to apply file transformations and variable substitutions on configuration and parameters files. For more detail: <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/transforms-variable-substitution?view=azure-devops&tabs=Classic">File transforms and variable substitution reference</a>.</p>
<p>Change the <strong>Package or folder</strong> based on your configuration in the artifact build pipeline. Select <strong>JSON</strong> as the <strong>File format</strong>. The <strong>Target files</strong> is <code>**/appsettings.json</code>. This task will replace the corresponding key-value pairs according to the variable definitions. Next we need to link the variable group.</p>
<p>Click <strong>Variables</strong> tab and link the variable group:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413204032778.png" class="">

<p>Save the pipeline. Create another variable group and add the File transform task for another environment. You can easily <strong>Clone</strong> the variable group and update the values. </p>
<p>Because these two variable groups have the same keys, so we need to specify the variable group scope. In other words, the <strong>Staging</strong> variable group is only for <strong>Stage</strong>, and the <strong>Production</strong> variable group is only for <strong>Production</strong>:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413210308951.png" class="">

<p>The final configuration for the variables is as below:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413212038848.png" class="">

<p>Now all tasks are ready to go:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413204601195.png" class="">

<h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>Click <strong>Create release</strong> on the release detail page, you can select which stage you need to deploy:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413204735815.png" class="">

<p>It automatically selects the latest build version as the artifact. Once you click <strong>Create</strong>, you can see a toast message:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413204820955.png" class="">

<p>Click the link to check the release status:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413204932395.png" class="">

<p>You can deploy to one or multiple stages:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413205024866.png" class="">

<p>The pipeline will download the artifact from the specified folder and upload it to Azure App Service. It also replaces the correct variables for different environments.</p>
<h3 id="Checking-the-results"><a href="#Checking-the-results" class="headerlink" title="Checking the results"></a>Checking the results</h3><p>If you stopped the App Service instances, please start them in Azure Portal. </p>
<p>We can see the correct configurations have been replaced:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413213231017.png" class="">

<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413213241918.png" class="">

<p>We can check the file content by Visual Studio 2019. Click <strong>View</strong> - <strong>Cloud Explorer</strong> then connect to your Azure subscription. You will find the actual file content:</p>
<img src="/2020/04/16/using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-on-linux/image-20200413220739835.png" class="">

<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this part, we use Azure DevOps Pipelines to build and deploy the ASP.NET Core Web App to Azure Web App on Linux. The key is how to inject the <strong>appsettings.json</strong> in the deployment. We use <strong>File transform</strong> task to do it.</p>
<p>In part 2, I will show you how to create Azure Container Registry and deploy the same Web App to Azure Web App for Containers. Please stay tuned.</p>
<p>Part 2: <a href="../using-azure-devops-pipelines-to-inject-configurations-for-aspnetcore-web-app-for-containers/">Using Azure Devops Pipelines to inject configurations for Asp.Net Core Web App for Containers</a></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Azure</tag>
        <tag>ASP.NETCore</tag>
        <tag>DevOps</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Using Azure DevOps Pipelines to publish the NuGet package from GitHub repo</title>
    <url>/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/</url>
    <content><![CDATA[<p>I have got used to configure Azure DevOps Pipelines with the classic editor that allows us to configure lots of properties of the tasks with a friendly user interface. But the better way to configure the Pipelines is by using <code>YAML</code> file. It is easy to fine-tune each option for your Pipeline, and easy to clone &amp; share. That is why <code>YAML</code> is the default Pipelines configuration template in Azure DevOps nowadays. I have developed a simple NuGet package that integrates Azure DevOps to build and publish. I will demonstrate how to create a new pipeline with <code>YAML</code> file. Before we get started, let us spend several minutes to gain a basic understanding of <code>YAML</code>.</p>
<span id="more"></span>

<h2 id="What-is-YAML"><a href="#What-is-YAML" class="headerlink" title="What is YAML?"></a>What is <code>YAML</code>?</h2><blockquote>
<p>YAML(YAML Ain’t Markup Language) is a human friendly data serialization standard for all programming languages.</p>
</blockquote>
<p>– <a href="https://yaml.org/">yaml.org</a></p>
<p><code>YAML</code> is designed to be human-friendly and work well with modern programming languages for common everyday tasks. It is similar to <code>JSON</code>. Actually, you could treat <code>YAML</code> as the superset of <code>JSON</code>. Every <code>JSON</code> file is also a valid <code>YAML</code> file. But the difference is that they have different priorities. The foremost goal of  <code>JSON</code> is simplicity and universality so it is easy to generate and parse in every modern programming language. But for <code>YAML</code>, the foremost design goal is to improve human readability. So <code>YAML</code> is a little bit more complex to generate and parse.</p>
<p>Imagine how we can describe a basic data structure? There are three basic but important primitives: mappings (hashes&#x2F;dictionaries), sequences (arrays&#x2F;lists) and scalars (strings,&#x2F;numbers). We could describe the structures of <code>JSON</code> like this:</p>
<ul>
<li>A collection of name&#x2F;value pairs. An <em>object</em> starts with <code>&#123;</code> and ends with <code>&#125;</code>. Each name is followed by <code>:</code> and the name&#x2F;value pairs are separated by <code>,</code>.</li>
<li>A list&#x2F;array of values. An <em>array</em> begins with <code>[</code> and ends with <code>]</code>. Values are separated by <code>,</code>.</li>
<li>A <em>value</em> can be a <em>string</em> in double quotes, or a <em>number</em>, or <code>true</code> or <code>false</code> or <code>null</code>, or an <em>object</em> or an <em>array</em>. These structures can be nested.</li>
</ul>
<p>Let us see how it is in <code>YAML</code>. There are similarities between <code>YAML</code> and <code>JSON</code>. We will not cover all the details of <code>YAML</code> because Azure DevOps Pipelines does not support all features of <code>YAML</code>.</p>
<h3 id="name-value"><a href="#name-value" class="headerlink" title="name&#x2F;value"></a>name&#x2F;value</h3><p><code>YAML</code> also contains a set of name&#x2F;value pairs. You do not need to use <code>&#123;</code> and <code>&#125;</code>. The left of <code>:</code> is the name and the right of <code>:</code> is the value. For example:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">myFirstPipeline</span></span><br></pre></td></tr></table></figure>

<p>Note that the <em>string</em> in <code>YAML</code> does not need to be quoted. However, they can be.</p>
<p>The value can be a string or number, or <code>true</code> or <code>false</code> or <code>null</code>, or an <em>object</em>. <code>YAML</code> uses indentation to indicate nested objects. 2 space indentation is preferred but not required. For example:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">var1:</span> <span class="string">value1</span></span><br><span class="line">  <span class="attr">var2:</span> <span class="string">value2</span></span><br></pre></td></tr></table></figure>

<h3 id="collections"><a href="#collections" class="headerlink" title="collections"></a>collections</h3><p><code>YAML</code> uses <code>[]</code> to indicate an array. For example:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sequence:</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<p>Another way is to use <code>- </code>, as shown below:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sequence:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">item1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">item2</span></span><br></pre></td></tr></table></figure>

<h3 id="multiple-data-types"><a href="#multiple-data-types" class="headerlink" title="multiple data types"></a>multiple data types</h3><p><code>|</code> indicates there are multiple data types available for the keyword. For example,  <code>job | templateReference</code> means either a job definition or a template reference are allowed.</p>
<h3 id="comments"><a href="#comments" class="headerlink" title="comments"></a>comments</h3><p><code>JSON</code> does not support comment but you can use <code>#</code> for comments in <code>YAML</code>.</p>
<h2 id="The-structure-of-YAML-for-Pipelines"><a href="#The-structure-of-YAML-for-Pipelines" class="headerlink" title="The structure of YAML for Pipelines"></a>The structure of <code>YAML</code> for Pipelines</h2><p>When we set up the pipelines in Azure DevOps, we use <strong>Stages</strong>, <strong>Jobs</strong> and <strong>Tasks</strong> to describe a CI&#x2F;CD process. One pipeline might contain one or more stages, such as “Build the app” and “Run tests”, etc. Every stage consists of one or more jobs. Every job contains one or more tasks. Let us see the hierarchy of the <code>YAML</code> file for the pipeline:</p>
<ul>
<li>Pipeline<ul>
<li>Stage A<ul>
<li>Job 1<ul>
<li>Step 1.1</li>
<li>Step 1.2</li>
<li>…</li>
</ul>
</li>
<li>Job 2<ul>
<li>Step 2.1</li>
<li>Step 2.2</li>
<li>…</li>
</ul>
</li>
</ul>
</li>
<li>Stage B<ul>
<li>Job 1</li>
<li>…</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>You do not need all these levels because sometimes the pipeline only contains a few jobs so just tailor the steps for your specific requirement.</p>
<h2 id="Creating-your-first-task-in-Azure-DevOps-Pipelines"><a href="#Creating-your-first-task-in-Azure-DevOps-Pipelines" class="headerlink" title="Creating your first task in Azure DevOps Pipelines"></a>Creating your first task in Azure DevOps Pipelines</h2><h3 id="Applying-Azure-DevOps-Pipelines-for-your-project"><a href="#Applying-Azure-DevOps-Pipelines-for-your-project" class="headerlink" title="Applying Azure DevOps Pipelines for your project"></a>Applying Azure DevOps Pipelines for your project</h3><p>You can host your project on Azure DevOps Repo or GitHub. Azure DevOps Pipelines supports lots of repository providers, such as GitHub, Bitbucket or other Git system. </p>
<p>If your project is hosted on GitHub, you can easily install the Azure Pipelines plugin from GitHub Marketplace:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191126125816387.png" class="" title="Installing Azure Pipelines to GitHub" alt="Installing Azure Pipelines to GitHub">

<p>Search <em>pipeline</em> in Marketplace then click <strong>Azure Pipelines</strong>. It will guide you to install it into your project. Next, you could see your project in Azure DevOps.</p>
<p>Another way is creating a new blank project in your Azure DevOps and just enable the modules you need. Then connect to your project repository and build the first pipeline following the guide.</p>
<p>Let us create a new pipeline to build the project. Click <strong>Pipelines</strong> in the Azure DevOps menu, then select <strong>Builds</strong>:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191126130101092.png" class="" title="Auzre DevOps menu - Builds" alt="Auzre DevOps menu - Builds">

<p>Click <strong>New</strong> - <strong>New build pipeline</strong>:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191126131331582.png" class="" title="Azure DevOps menu - New build pipeline" alt="Azure DevOps menu - New build pipeline">

<p>Azure DevOps Pipelines will ask you where the project is:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191126132325606.png" class="" title="Select your repo" alt="Select your repo">

<p>If you prefer the classic editor, feel free to click <strong>Use the classic editor</strong>. But this time, I will use <code>YAML</code>. So I click <strong>GitHub(YAML)</strong> option and select the repository. Azure Pipelines will analyze the repository and recommend a pipeline template for the project. If Azure Pipelines could not analyze what type your project is, you could configure it manually:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191126133456137.png" class="" title="Azure DevOps - Configure your pipeline" alt="Azure DevOps - Configure your pipeline">

<p>I will build the pipeline from scratch. So I select <strong>Starter pipeline</strong>. Obviously, you could select one template for the specific type of your project to simplify the process. You can also click <strong>Show more</strong> to check more available templates.</p>
<p>Once you select a template, Azure Pipelines will create a file named <code>azure-pipelines.yml</code> at the root of your repo. The default template for starter pipeline is shown below:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Starter pipeline</span></span><br><span class="line"><span class="comment"># Start with a minimal pipeline that you can customize to build and deploy your code.</span></span><br><span class="line"><span class="comment"># Add steps that build, run tests, deploy, and more:</span></span><br><span class="line"><span class="comment"># https://aka.ms/yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">trigger:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">vmImage:</span> <span class="string">&#x27;ubuntu-latest&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">script:</span> <span class="string">echo</span> <span class="string">Hello,</span> <span class="string">world!</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Run a one-line script&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    echo Add other tasks to build, test, and deploy your project.</span></span><br><span class="line"><span class="string">    echo See https://aka.ms/yaml</span></span><br><span class="line"><span class="string"></span>  <span class="attr">displayName:</span> <span class="string">&#x27;Run a multi-line script&#x27;</span></span><br></pre></td></tr></table></figure>

<p>The content of the file might vary depending on your project.</p>
<p>You can change the file name by clicking the file name link:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191203085913759.png" class="" title="Azure DevOps - Review your pipeline YAML" alt="Azure DevOps - Review your pipeline YAML">

<h3 id="Setting-up-the-trigger"><a href="#Setting-up-the-trigger" class="headerlink" title="Setting up the trigger"></a>Setting up the trigger</h3><p>We have gained the fundamentals for <code>YAML</code>. Let us investigate the content of this <code>YAML</code> file. The first key is <code>trigger</code> that means <strong>Push trigger</strong>. It specifies what branch will cause the build process when you push the changes. If you do not specify this value, every time you push to every branch will trigger a build.</p>
<p>For <code>trigger</code> key, there are different options but at the moment, we just need to know, we can set up a branch name here, as shown below:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">trigger:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>If you want to add more branches, just add the elements like this:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">trigger:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">develop</span></span><br></pre></td></tr></table></figure>

<p>You can also configure the <em>include</em>, <em>exclude</em> for <em>branches</em>, <em>tags</em> and <em>paths</em>. The full syntax is:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">trigger:</span></span><br><span class="line">  <span class="attr">batch:</span> <span class="string">boolean</span> <span class="comment"># batch changes if true (the default); start a new build for every push if false</span></span><br><span class="line">  <span class="attr">branches:</span></span><br><span class="line">    <span class="attr">include:</span> [ <span class="string">string</span> ] <span class="comment"># branch names which will trigger a build</span></span><br><span class="line">    <span class="attr">exclude:</span> [ <span class="string">string</span> ] <span class="comment"># branch names which will not</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="attr">include:</span> [ <span class="string">string</span> ] <span class="comment"># tag names which will trigger a build</span></span><br><span class="line">    <span class="attr">exclude:</span> [ <span class="string">string</span> ] <span class="comment"># tag names which will not</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="attr">include:</span> [ <span class="string">string</span> ] <span class="comment"># file paths which must match to trigger a build</span></span><br><span class="line">    <span class="attr">exclude:</span> [ <span class="string">string</span> ] <span class="comment"># file paths which will not trigger a build</span></span><br></pre></td></tr></table></figure>

<p>You can use <strong>wildcards</strong> to specify a branch of a tag. Wildcards patterns allow you to use ***** to match zero or more characters and <strong>?</strong> to match a single character. For more details, please visit <a href="https://docs.microsoft.com/zh-cn/azure/devops/pipelines/build/triggers?WT.mc_id=DT-MVP-5001643&view=azure-devops&tabs=yaml#wildcards">Wildcards in triggers</a>.</p>
<p>Another type of triggers is <strong>PR trigger</strong> which specifies what branches will cause a pull request build to run. But keep in mind that this feature is only available for GitHub and Bitbucket Cloud. If you are using Azure DevOps Repos, you can configure <a href="https://docs.microsoft.com/zh-cn/azure/devops/repos/git/branch-policies?WT.mc_id=DT-MVP-5001643&view=azure-devops#build-validation">branch policy for build validation</a> to trigger the build for validation.</p>
<p>I am using GitHub, so I will use the code below to trigger the build when I have a new Pull Request to the <code>master</code> branch:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pr:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<h3 id="Setting-up-the-pool"><a href="#Setting-up-the-pool" class="headerlink" title="Setting up the pool"></a>Setting up the pool</h3><p>The <code>pool</code> is used to specify which pool to use for the job. The full syntax is:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">string</span>  <span class="comment"># name of the pool to run this job in</span></span><br><span class="line">  <span class="attr">demands:</span> <span class="string">string</span> <span class="string">|</span> [ <span class="string">string</span> ]  <span class="comment">## see below</span></span><br><span class="line">  <span class="attr">vmImage:</span> <span class="string">string</span> <span class="comment"># name of the vm image you want to use, only valid in the Microsoft-hosted pool</span></span><br></pre></td></tr></table></figure>

<p>Azure DevOps provides us lots of Microsoft-hosted pools. You could find them here:  <a href="https://docs.microsoft.com/zh-cn/azure/devops/pipelines/agents/hosted?WT.mc_id=DT-MVP-5001643&view=azure-devops#use-a-microsoft-hosted-agent">Microsoft-hosted agents</a>.</p>
<p>Of cause, you are able to use your private pool but you need to create your build agent first. It is out of the scope of this article.</p>
<p>I want to build the project on the Windows platform so I would change <code>vmImage</code> to <code>windows-2019</code> that runs Windows Server 2019 with Visual Studio 2019. So this section would be:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">vmImage:</span> <span class="string">&#x27;windows-2019&#x27;</span></span><br></pre></td></tr></table></figure>

<p>If you are developing a .NET Core application, you could use the Linux platforms such as Ubuntu by using the code below:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">vmImage:</span> <span class="string">&#x27;ubuntu-latest&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="Running-the-first-Pipeline"><a href="#Running-the-first-Pipeline" class="headerlink" title="Running the first Pipeline"></a>Running the first Pipeline</h3><p>The next sections are some scripts. Before we change them, we can save the pipeline first and try to run it. Click <strong>Save and run</strong> on the right top corner. You can change the commit message before saving it. You will see the result as shown below:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191126170157038.png" class="" title="Running the pipeline" alt="Running the pipeline">

<p>Actually, this default pipeline template just shows how to run a one-line script and a multi-line script that output echo messages. We need to add our tasks to build the project.</p>
<h2 id="Adding-tasks-to-the-pipeline"><a href="#Adding-tasks-to-the-pipeline" class="headerlink" title="Adding tasks to the pipeline"></a>Adding tasks to the pipeline</h2><p>Let us figure out the hierarchy of pipeline tasks. We can use <strong>Stage</strong>, <strong>Job</strong> and <strong>Step</strong> to classify the tasks. Basically, a stage is a collection of related jobs. A job is a collection of steps. Steps are a series of specific operations that make up a job, such as running a piece of script, or copying files. One example is shown below:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">stage:</span> <span class="string">Build</span></span><br><span class="line">  <span class="attr">jobs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job:</span> <span class="string">BuildJob</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">script:</span> <span class="string">echo</span> <span class="string">Building!</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">stage:</span> <span class="string">Test</span></span><br><span class="line">  <span class="attr">jobs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job:</span> <span class="string">TestOnWindows</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">script:</span> <span class="string">echo</span> <span class="string">Testing</span> <span class="string">on</span> <span class="string">Windows!</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job:</span> <span class="string">TestOnLinux</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">script:</span> <span class="string">echo</span> <span class="string">Testing</span> <span class="string">on</span> <span class="string">Linux!</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">stage:</span> <span class="string">Deploy</span></span><br><span class="line">  <span class="attr">jobs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job:</span> <span class="string">Deploy</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">script:</span> <span class="string">echo</span> <span class="string">Deploying</span> <span class="string">the</span> <span class="string">code!</span></span><br></pre></td></tr></table></figure>

<p>As we mentioned, you do not need all of them. If your pipeline has only one stage and one job, you can omit <strong>stage</strong> and <strong>job</strong> and only use <strong>steps</strong>.</p>
<h3 id="Creating-the-first-step"><a href="#Creating-the-first-step" class="headerlink" title="Creating the first step"></a>Creating the first step</h3><p>I prefer to start from the easiest way. So let us just ignore <strong>stage</strong> and <strong>job</strong>. First, I will add <strong>steps</strong> to build the project. The first step is to install the .NET Core SDK.</p>
<p>Delete the echo scripts in the default pipeline, then add the <strong>steps</strong> section as shown below:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">UseDotNet@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Install .NET Core SDK&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">packageType:</span> <span class="string">&#x27;sdk&#x27;</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">&#x27;2.x&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Please DO NOT just copy &amp; paste it. Try to type it to test the powerful editor of Azure DevOps Pipelines. When you type <em>dotnet</em> for the <strong>task</strong> name, you could find that the editor automatically shows a list that contains this keyword:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202113533810.png" class="" title="Azure DevOps - IntelliSense" alt="Azure DevOps - IntelliSense">

<p>That is a similar experience of IntelliSense in Visual Studio. You will love it. Move your <em>up</em> or <em>down</em> key then press Enter to select <code>UseDotNet@2</code>. You will find there is a grey <strong>Settings</strong> link above the task:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202113922673.png" class="" title="Azure DevOps - Settings of YAML" alt="Azure DevOps - Settings of YAML">

<p>Click <strong>Settings</strong>, you will see the configuration panel on the right side:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202114046323.png" class="" title="Azure DevOps - task settings" alt="Azure DevOps - task settings">

<p>It saves time to remember the names of the parameters. Type <strong>2.x</strong> in the <strong>Version</strong> textbox, then click <strong>Add</strong>. The task will be added to the pipeline:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202114306637.png" class="" title="Azure DevOps - steps" alt="Azure DevOps - steps">

<p>The editor supports wonderful IntelliSense when you type:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202114635116.png" class="" title="Azure DevOps - IntelliSense" alt="Azure DevOps - IntelliSense">

<p>The next question is, how can we know the parameters we need to use? For .NET Core tool, check the documentation here: <a href="https://docs.microsoft.com/zh-cn/azure/devops/pipelines/tasks/tool/dotnet-core-tool-installer?WT.mc_id=DT-MVP-5001643&view=azure-devops">Use .NET Core task</a>.</p>
<p>Azure DevOps Pipelines supports lots of tasks, such as <strong>Build tasks</strong>, <strong>Tool tasks</strong>, <strong>Test tasks</strong>, <strong>Deploy tasks</strong> and <strong>Utility tasks</strong>, etc. You can find the list here: <a href="https://docs.microsoft.com/zh-cn/azure/devops/pipelines/tasks/?WT.mc_id=DT-MVP-5001643&view=azure-devops">Build and release tasks</a>.</p>
<h3 id="Building-the-project"><a href="#Building-the-project" class="headerlink" title="Building the project"></a>Building the project</h3><p>Now we have installed the .NET Core SDK for our project. Next, we need to call .NET Core CLI to build the project. Add a new task in the current <strong>steps</strong> section, and select <code>DotNetCoreCLI@2</code> because we are using .NET Core v2.x. When you see the <strong>Settings</strong> link above the task, you can easily configure it in the task configuration panel:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202115857765.png" class="" title="Azure DevOps - task settings" alt="Azure DevOps - task settings">

<p>The new task is shown below:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;build&#x27;</span></span><br><span class="line">    <span class="attr">projects:</span> <span class="string">&#x27;FunCoding.CoreMessenger/FunCoding.CoreMessenger/FunCoding.CoreMessenger.csproj&#x27;</span></span><br></pre></td></tr></table></figure>

<p>When you specify the path to project(s), you can use wildcards (e.g. &#42;&#42;<em>&#x2F;</em>&#42;.csproj for all .csproj files in all subfolders). You can also specify arguments for the <code>build</code> command.</p>
<p>Let us keep it as simple as possible at the moment. Click <strong>Save</strong> on the right top corner, and input your commit message, then click <strong>Save</strong>:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202121552841.png" class="" title="Azure DevOps - Save the pipeline" alt="Azure DevOps - Save the pipeline">

<p>Once you saved the pipeline, you can run it by clicking <strong>Run</strong> on the right top corner. Select the correct branch&#x2F;tag, then click <strong>Run</strong>:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202121527364.png" class="" title="Azure DevOps - Run the pipeline" alt="Azure DevOps - Run the pipeline">

<p>You will see the pipeline runs correctly:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202121818956.png" class="" title="Azure DevOps - pipeline result" alt="Azure DevOps - pipeline result">

<h3 id="Adding-parameters-for-NET-Core-CLI"><a href="#Adding-parameters-for-NET-Core-CLI" class="headerlink" title="Adding parameters for .NET Core CLI"></a>Adding parameters for .NET Core CLI</h3><p>When we use the <code>dotnet build</code> command of .NET Core CLI, the default configuration is <code>debug</code>. We need to specify the <code>release</code> mode. So we can add a <code>configuration</code> parameter like this:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Build the project&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;build&#x27;</span></span><br><span class="line">    <span class="attr">configuration:</span> <span class="string">&#x27;Release&#x27;</span></span><br><span class="line">    <span class="attr">projects:</span> <span class="string">&#x27;FunCoding.CoreMessenger/FunCoding.CoreMessenger/FunCoding.CoreMessenger.csproj&#x27;</span></span><br></pre></td></tr></table></figure>

<p>If we just need a build pipeline for the PR validation, that is enough. We only need to validate the build,  and no need to pack and publish the packages. But for the release, we need to pack the project and publish the <code>*.nupkg</code> file. So let us move on.</p>
<h2 id="Publishing-the-artifact"><a href="#Publishing-the-artifact" class="headerlink" title="Publishing the artifact"></a>Publishing the artifact</h2><p>The next step is to use <code>dotnet pack</code> command of .NET Core CLI to pack the code into a NuGet package, then publish it to a folder for the release.</p>
<h3 id="Packing-the-package"><a href="#Packing-the-package" class="headerlink" title="Packing the package"></a>Packing the package</h3><p>The <code>dotnet pack</code> command builds the project and creates NuGet packages. We need to add another task to use this command. Select <code>DotNetCoreCLI@2</code> task and click <strong>Settings</strong>:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202135942108.png" class="" title="Azure DevOps - task settings" alt="Azure DevOps - task settings">

<p>We need to select <code>pack</code> command. Then choose the correct path to the project to pack. We can keep the <strong>Configuration to Package</strong> and the <strong>Package Folder</strong> as the default values. For <strong>Do not build</strong> checkbox, we can make it checked because we have completed the step to build in the previous step. In the <strong>Pack options</strong>, we can select the versioning pattern. For more details:</p>
<blockquote>
<h2 id="Versioning-schemes"><a href="#Versioning-schemes" class="headerlink" title="Versioning schemes"></a>Versioning schemes</h2><p>For <strong>byPrereleaseNumber</strong>, the version will be set to whatever you choose for major, minor, and patch, plus the date and time in the format <code>yyyymmdd-hhmmss</code>.</p>
<p>For <strong>byEnvVar</strong>, the version will be set as whatever environment variable, e.g. <code>MyVersion</code> (no <strong>$</strong>, just the environment variable name), you provide. Make sure the environment variable is set to a proper SemVer e.g. <code>1.2.3</code> or <code>1.2.3-beta1</code>.</p>
<p>For <strong>byBuildNumber</strong>, the version will be set to the build number, ensure that your build number is a proper SemVer e.g. <code>1.0.$(Rev:r)</code>. If you select <strong>byBuildNumber</strong>, the task will extract a dotted version, <code>1.2.3.4</code> and use only that, dropping any label. To use the build number as is, you should use <strong>byEnvVar</strong> as described above, and set the environment variable to <code>BUILD_BUILDNUMBER</code>.</p>
</blockquote>
<p>For this demo, I do not want to publish a formal release to NuGet. So I select <strong>byPrereleaseNumber</strong>. It will attach a suffix after the <code>Major.Minor.Patch</code> version so it will be a pre-release version. Pre-release version is a label that has a <code>-</code> followed by whatever letters and numbers you want. For example, version <code>1.0.0-beta</code>, <code>1.0.0-build12345</code> are all pre-release versions of <code>1.0.0</code>. This is called <code>SemVer</code> which means semantic version number. You can find more details here: <a href="https://semver.org/">Semantic Versioning</a>. When we need to publish a formal release version, we will not use this type of pack options. Another easy way to do it is to hardcode the version number in the *.csproj file, and set the <strong>Pack options</strong> as <code>Off</code> here. We can also add arguments for <code>dotnet pack</code> command, such as  <code>dotnet pack -p:PackageVersion=2.1.0</code>. In addition, we can find some other tools to help us simplify this job, such as <a href="https://github.com/RicoSuter/DNT">DotNetTools</a>. You can use these tools or write PowerShell scripts to update the version number.</p>
<p>The <code>pack</code> section looks like this:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Pack the package&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;pack&#x27;</span></span><br><span class="line">    <span class="attr">configuration:</span> <span class="string">&#x27;Release&#x27;</span></span><br><span class="line">    <span class="attr">packagesToPack:</span> <span class="string">&#x27;FunCoding.CoreMessenger/FunCoding.CoreMessenger/FunCoding.CoreMessenger.csproj&#x27;</span></span><br><span class="line">    <span class="attr">nobuild:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">versioningScheme:</span> <span class="string">&#x27;byPrereleaseNumber&#x27;</span></span><br><span class="line">    <span class="attr">majorVersion:</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="attr">minorVersion:</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="attr">patchVersion:</span> <span class="string">&#x27;0&#x27;</span></span><br></pre></td></tr></table></figure>

<p>If the pipeline runs correctly, it will pack the project and generate the package file <code>*.nupkg</code> into <code>$(Build.ArtifactStagingDirectory)</code> , which is a predefined variable of Azure DevOps. For your information: <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?WT.mc_id=DT-MVP-5001643&view=azure-devops&tabs=yaml">Predefined variables</a>.</p>
<h3 id="Using-variables"><a href="#Using-variables" class="headerlink" title="Using variables"></a>Using variables</h3><p>At the moment, we have not specified the build configuration. The default value for most projects is <code>Debug</code>. So we need to assign <code>Release</code> to this parameter. Also, we found that both of these two tasks contain the project path. So we could use <strong>variables</strong> to simplify the script.</p>
<p><strong>Variables</strong> allow us to define some key&#x2F;value pairs that can be reused. Also, it is a good way to avoid hard-coding in the script. When Azure DevOps Pipelines executes the tasks, the variables will be replaced with the correct values.</p>
<p>Azure DevOps already provides some predefined variables, as we mentioned in the last section. We can also define our own variables. Let us add some variables after the <code>pool</code> section:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">configuration:</span> <span class="string">&#x27;Release&#x27;</span></span><br><span class="line">  <span class="attr">projectPath:</span> <span class="string">&#x27;FunCoding.CoreMessenger/FunCoding.CoreMessenger/FunCoding.CoreMessenger.csproj&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Then we can apply these variables in the tasks by using <code>$(variableName)</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Build the project&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;build&#x27;</span></span><br><span class="line">    <span class="attr">configuration:</span> <span class="string">$(configuration)</span></span><br><span class="line">    <span class="attr">projects:</span> <span class="string">$(projectPath)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Pack the package&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;pack&#x27;</span></span><br><span class="line">    <span class="attr">configuration:</span> <span class="string">$(configuration)</span></span><br><span class="line">    <span class="attr">packagesToPack:</span> <span class="string">$(projectPath)</span></span><br><span class="line">    <span class="attr">nobuild:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">versioningScheme:</span> <span class="string">&#x27;byPrereleaseNumber&#x27;</span></span><br><span class="line">    <span class="attr">majorVersion:</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="attr">minorVersion:</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="attr">patchVersion:</span> <span class="string">&#x27;0&#x27;</span></span><br></pre></td></tr></table></figure>

<p>The pipeline will work as expected.</p>
<p>Actually, we can use <code>dotnet push</code> command to push it to the NuGet package seed in the build pipeline. But it makes a little bit confusing because literally, the build pipeline should only do the build job. So I will create another release pipeline to push it to the NuGet package seed.</p>
<h3 id="Publishing-artifacts"><a href="#Publishing-artifacts" class="headerlink" title="Publishing artifacts"></a>Publishing artifacts</h3><p>The next step is to publish the NuGet package file so the release pipeline is able to push it to NuGet package feed. Add a new task by typing <code>publish</code> and select <code>PublishBuildArtifacts@1</code>:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202150114032.png" class="" title="Azure DevOps - IntelliSense" alt="Azure DevOps - IntelliSense">

<p>You can find more details about this task here: <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/publish-build-artifacts?WT.mc_id=DT-MVP-5001643&view=azure-devops">Publish Build Artifacts task</a>.</p>
<p>Click <strong>Settings</strong> and keep the default settings then click <strong>Add</strong>:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202150245329.png" class="" title="Azure DevOps - Publish build artifacts" alt="Azure DevOps - Publish build artifacts">

<p>When we pack the project, the default setting of <strong>Package Folder</strong> is <code>$(Build.ArtifactStagingDirectory)</code>. So in the publishing step, the task will get the NuGet package file from <code>$(Build.ArtifactStagingDirectory)</code> and publish it to Azure Pipelines, or a file share. The script is shown below:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">PublishBuildArtifacts@1</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Publish the package&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">PathtoPublish:</span> <span class="string">&#x27;$(Build.ArtifactStagingDirectory)&#x27;</span></span><br><span class="line">    <span class="attr">ArtifactName:</span> <span class="string">&#x27;drop&#x27;</span></span><br><span class="line">    <span class="attr">publishLocation:</span> <span class="string">&#x27;Container&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Ok, now when this pipeline is triggered, it will build the project, then pack and publish the NuGet package to Azure Pipelines. We can click <strong>Artifacts</strong> on the build pipeline result page then click <strong>drop</strong>:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202152045889.png" class="" title="Azure DevOps - build result" alt="Azure DevOps - build result">

<p>We can see the <code>*.nupkg</code> is right here:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202151935278.png" class="" title="Azure DevOps - artifacts folder" alt="Azure DevOps - artifacts folder">

<p>Note that the name of the <code>*.nupkg</code> file will be changed after each build because we selected <strong>byPrereleaseNumber</strong> as the <strong>Pack options</strong>. If you use different versioning schemes, the name may vary.</p>
<h2 id="Pushing-nupkg-file-to-NuGet-package-feed"><a href="#Pushing-nupkg-file-to-NuGet-package-feed" class="headerlink" title="Pushing *.nupkg file to NuGet package feed"></a>Pushing <code>*.nupkg</code> file to NuGet package feed</h2><p>Usually, we should have another branch named <code>release</code> to release the package. But for simplicity, I continue to use <code>master</code> branch for the release pipeline. Please keep in mind that this is not a good practice of GitFlow. I just want to focus on the <code>YAML</code> stuff. You can easily change the target branch in the script.</p>
<h3 id="Creating-the-release-pipeline"><a href="#Creating-the-release-pipeline" class="headerlink" title="Creating the release pipeline"></a>Creating the release pipeline</h3><p>Let us create a release pipeline. Click <strong>Pipelines</strong> in the Azure DevOps menu, then click <strong>Releases</strong> in the right side:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202152809377.png" class="" title="Azure DevOps menu - Releases" alt="Azure DevOps menu - Releases">

<p>In the new window, click <strong>New pipeline</strong>. You will see a page like this:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202153012927.png" class="" title="Azure DevOps - add release" alt="Azure DevOps - add release">

<p>We will build the pipeline from scratch so please click <strong>Empty job</strong>:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202153129451.png" class="" title="Azure DevOps - edit release" alt="Azure DevOps - edit release">

<h3 id="Adding-the-artifact"><a href="#Adding-the-artifact" class="headerlink" title="Adding the artifact"></a>Adding the artifact</h3><p>Click <strong>Add an artifact</strong>, then you will see a page to configure the artifact:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202160504100.png" class="" title="Azure DevOps - select artifact" alt="Azure DevOps - select artifact">

<p>Select the right build pipeline for the release. Then click <strong>Add</strong>. The artifact will be shown here:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202160622803.png" class="" title="Azure DevOps - artifact" alt="Azure DevOps - artifact">

<h3 id="Adding-tasks"><a href="#Adding-tasks" class="headerlink" title="Adding tasks"></a>Adding tasks</h3><p>Then click <strong>1 job, 0 task</strong> link below <strong>Stage 1</strong>. You can update the details of the Stage and the Agent pool:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202160901238.png" class="" title="Azure DevOps - release task" alt="Azure DevOps - release task">

<p>Click the <strong>+</strong> on the right of the job:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202161021929.png" class="" title="Azure DevOps - add release task" alt="Azure DevOps - add release task">

<p>You will see a page that shows all the tasks available in Azure DevOps:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202161112097.png" class="" title="Azure DevOps - select release task" alt="Azure DevOps - select release task">

<p>Before I wrote this article, I thought I could use <code>dotnet push</code> command to push the package to the NuGet package seed, so I selected <code>.NET Core</code> task and selected <code>nuget push</code> command from the <strong>Command</strong> list. But I found that .NET Core CLI threw an error:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error: DotNetCore currently does not support using an encrypted Api Key.</span><br><span class="line">Packages failed to publish</span><br></pre></td></tr></table></figure>

<p>I found an issue on GitHub: <a href="https://github.com/microsoft/azure-pipelines-tasks/issues/7160">DotNetCore currently does not support using an encrypted Api Key</a>. At the moment, using an ApiKey is currently not supported in .NET Core CLI because the required libraries for encrypting the key are not available. So we need to use NuGet tool to push the package:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202224011804.png" class="" title="Azure DevOps - nuget task" alt="Azure DevOps - nuget task">

<p>The tricky thing is here. The default value of <strong>Path to NuGet package(s) to publish</strong> is <code>$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg</code>. But the release pipelines download pipeline artifacts to <code>System.ArtifactsDirectory</code> so we need to use <code>$(System.ArtifactsDirectory)/**/*.nupkg</code>. You can find the note here: <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/package/nuget?WT.mc_id=DT-MVP-5001643&view=azure-devops#examples">NuGet task</a>. For more details about Artifacts, please check the documentation here: <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/release/artifacts?WT.mc_id=DT-MVP-5001643&view=azure-devops#download">Release artifacts and artifact sources</a>.</p>
<p>The next important thing is that we need to create a connection to the NuGet server. If you are publishing the NuGet package to your organization, select <strong>This organization&#x2F;collection</strong> for <strong>Target feed location</strong>. I am publishing it to NetGet, so I choose <strong>External NuGet server (including other organizations&#x2F;collections)</strong>.</p>
<p>If you have not created the connection to the NuGet server, click <strong>+New</strong> to create one. You can find the ApiKey in your NuGet portal. The Feed URL should be <code>https://api.nuget.org/v3/index.json</code>. </p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202165821476.png" class="" title="Azure DevOps - new service connection" alt="Azure DevOps - new service connection">

<p>Click <strong>Save</strong> on the right top corner to save the configuration. The final configuration for the task looks like this:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202224414806.png" class="" title="Azure DevOps - nuget task settings" alt="Azure DevOps - nuget task settings">

<p>The job is quite straightforward because we only need to use one command. If you have more tasks, just add them. You can also create different stages for different environments, such as Dev, Stage or Prod.</p>
<h3 id="Creating-the-release"><a href="#Creating-the-release" class="headerlink" title="Creating the release"></a>Creating the release</h3><p>Click <strong>Create release</strong>, you will see the page to configure the release:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202170421319.png" class="" title="Azure DevOps - create a new release" alt="Azure DevOps - create a new release">

<p>Click <strong>Create</strong> to start the release. Then return to the detail page of the release, click <strong>Deploy</strong>:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202222830280.png" class="" title="Azure DevOps - deploy" alt="Azure DevOps - deploy">

<p>You will see a new page to deploy it:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202222918027.png" class="" title="Azure DevOps - deploy" alt="Azure DevOps - deploy">

<p>Click <strong>Deploy</strong>, the release pipeline will start.</p>
<p>If the release pipeline works, you can see the result as shown below:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202224631757.png" class="" title="Azure DevOps - release result" alt="Azure DevOps - release result">

<h3 id="Check-the-package-on-NuGet"><a href="#Check-the-package-on-NuGet" class="headerlink" title="Check the package on NuGet"></a>Check the package on NuGet</h3><p>Now sign in NuGet and I can see the package is right here:</p>
<img src="/2019/12/03/using-azure-devops-pipelines-to-publish-the-nuget-package-from-github-repo/image-20191202224826733.png" class="" title="Azure DevOps - nuget result" alt="Azure DevOps - nuget result">

<p>Keep in mind that the package with an automated suffix like <code>1.0.0-CI-10191202-034430</code> is a pre-release version. Because we selected <strong>byPrereleaseNumber</strong> in the <code>pack</code> task. If we want to publish a formal version, we need to specify the version number by other ways. Versioning is another tricky thing in CI&#x2F;CD. But I want to stop here because this article is to show how to write a <code>YAML</code> file from scratch. We did not cover the full details of git flow, such as branch-policies. I hope you could gain a basic understanding of<code>YAML</code> and will not be scared of it anymore.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>The final build script is shown as below:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">trigger:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">vmImage:</span> <span class="string">&#x27;windows-2019&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">configuration:</span> <span class="string">&#x27;Release&#x27;</span></span><br><span class="line">  <span class="attr">projectPath:</span> <span class="string">&#x27;FunCoding.CoreMessenger/FunCoding.CoreMessenger/FunCoding.CoreMessenger.csproj&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">UseDotNet@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Install .NET Core SDK&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">packageType:</span> <span class="string">&#x27;sdk&#x27;</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">&#x27;2.x&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Build the project&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;build&#x27;</span></span><br><span class="line">    <span class="attr">configuration:</span> <span class="string">$(configuration)</span></span><br><span class="line">    <span class="attr">projects:</span> <span class="string">$(projectPath)</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DotNetCoreCLI@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Pack the package&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;pack&#x27;</span></span><br><span class="line">    <span class="attr">configuration:</span> <span class="string">$(configuration)</span></span><br><span class="line">    <span class="attr">packagesToPack:</span> <span class="string">$(projectPath)</span></span><br><span class="line">    <span class="attr">nobuild:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">versioningScheme:</span> <span class="string">&#x27;byPrereleaseNumber&#x27;</span></span><br><span class="line">    <span class="attr">majorVersion:</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="attr">minorVersion:</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="attr">patchVersion:</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">PublishBuildArtifacts@1</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Publish the package&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">PathtoPublish:</span> <span class="string">&#x27;$(Build.ArtifactStagingDirectory)&#x27;</span></span><br><span class="line">    <span class="attr">ArtifactName:</span> <span class="string">&#x27;drop&#x27;</span></span><br><span class="line">    <span class="attr">publishLocation:</span> <span class="string">&#x27;Container&#x27;</span></span><br></pre></td></tr></table></figure>

<p>In this article, I introduced what <code>YAML</code> is and how to define a <code>YAML</code> file from scratch. Azure DevOps Pipelines provides us with a good editor with intellisense to write <code>YAML</code> files. You can also update the properties with the configuration panel. We did not cover all the details regarding CI&#x2F;CD. Please check <a href="https://datasift.github.io/gitflow/IntroducingGitFlow.html">GitFlow</a> and create corresponding branches. I hope this article would be useful to help you write your first <code>YAML</code> file. For more detail about Azure Pipelines, please check <a href="https://docs.microsoft.com/zh-cn/azure/devops/pipelines/?WT.mc_id=DT-MVP-5001643&view=azure-devops">Azure Pipelines documentations</a>. Thanks.</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>nuget</tag>
        <tag>github</tag>
      </tags>
  </entry>
</search>
